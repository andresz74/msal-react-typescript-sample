{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  function BaseClient(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration); // Initialize the logger\n\n    this.logger = new Logger(this.config.loggerOptions, name, version); // Initialize crypto\n\n    this.cryptoUtils = this.config.cryptoInterface; // Initialize storage interface\n\n    this.cacheManager = this.config.storageInterface; // Set the network interface\n\n    this.networkClient = this.config.networkInterface; // Set the NetworkManager\n\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager); // Set TelemetryManager\n\n    this.serverTelemetryManager = this.config.serverTelemetryManager; // set Authority\n\n    this.authority = this.config.authOptions.authority; // set performance telemetry client\n\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n\n\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n\n          break;\n\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n\n\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers,\n              proxyUrl: this.config.systemOptions.proxyUrl\n            })];\n\n          case 1:\n            response = _a.sent();\n\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n\n\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n\n    this.authority = updatedAuthority;\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient };","map":{"version":3,"mappings":"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","names":["BaseClient","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","NetworkManager","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","sendPostRequest","body","proxyUrl","response","_a","status","clearTelemetryCache","updateAuthority","updatedAuthority","discoveryComplete","ClientAuthError","createEndpointDiscoveryIncompleteError"],"sources":["../../src/client/BaseClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration, buildClientConfiguration, CommonClientConfiguration } from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    // Performance telemetry client\n    protected performanceClient?: IPerformanceClient;\n\n    protected constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string> {        \n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }        \n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const response = await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n            thumbprint,\n            tokenEndpoint,\n            { body: queryString, headers: headers, proxyUrl: this.config.systemOptions.proxyUrl }\n        );\n\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    updateAuthority(updatedAuthority: Authority): void {\n        if (!updatedAuthority.discoveryComplete()) {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n        }\n        this.authority = updatedAuthority;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}