{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { EventType } from './EventType.js';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventMessageUtils =\n/** @class */\nfunction () {\n  function EventMessageUtils() {}\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n\n\n  EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n\n        break;\n\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n\n        return InteractionStatus.None;\n\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n\n          return InteractionStatus.None;\n        }\n\n        break;\n    }\n\n    return null;\n  };\n\n  return EventMessageUtils;\n}();\n\nexport { EventMessageUtils };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;EA4BA,8BA0DC;;;;;;;;EAnDUA,kDAAP,UAAqCC,OAArC,EAA4DC,aAA5D,EAA6F;IACzF,QAAQD,OAAO,CAACE,SAAhB;MACI,KAAKC,SAAS,CAACC,WAAf;QACI,OAAOC,iBAAiB,CAACC,KAAzB;;MACJ,KAAKH,SAAS,CAACI,gBAAf;QACI,OAAOF,iBAAiB,CAACG,SAAzB;;MACJ,KAAKL,SAAS,CAACM,mBAAf;QACI,IAAIT,OAAO,CAACU,eAAR,KAA4BC,eAAe,CAACC,QAA5C,IAAwDZ,OAAO,CAACU,eAAR,KAA4BC,eAAe,CAACE,KAAxG,EAA+G;UAC3G,OAAOR,iBAAiB,CAACS,YAAzB;QACH;;QACD;;MACJ,KAAKX,SAAS,CAACY,qBAAf;QACI,OAAOV,iBAAiB,CAACW,cAAzB;;MACJ,KAAKb,SAAS,CAACc,YAAf;QACI,OAAOZ,iBAAiB,CAACa,MAAzB;;MACJ,KAAKf,SAAS,CAACgB,kBAAf;MACA,KAAKhB,SAAS,CAACiB,kBAAf;QACI,IAAInB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACG,SAAzD,EAAoE;;UAEhE;QACH;;QACD,OAAOH,iBAAiB,CAACgB,IAAzB;;MACJ,KAAKlB,SAAS,CAACmB,UAAf;QACI,IAAIrB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACa,MAAzD,EAAiE;;UAE7D;QACH;;QACD,OAAOb,iBAAiB,CAACgB,IAAzB;;MACJ,KAAKlB,SAAS,CAACoB,mBAAf;QACI,IAAItB,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACW,cAAzD,EAAyE;;UAErE;QACH;;QACD,OAAOX,iBAAiB,CAACgB,IAAzB;;MACJ,KAAKlB,SAAS,CAACqB,aAAf;MACA,KAAKrB,SAAS,CAACsB,aAAf;MACA,KAAKtB,SAAS,CAACuB,qBAAf;MACA,KAAKvB,SAAS,CAACwB,qBAAf;QACI,IAAI3B,OAAO,CAACU,eAAR,KAA4BC,eAAe,CAACC,QAA5C,IAAwDZ,OAAO,CAACU,eAAR,KAA4BC,eAAe,CAACE,KAAxG,EAA+G;UAC3G,IAAIZ,aAAa,IAAIA,aAAa,KAAKI,iBAAiB,CAACC,KAArD,IAA8DL,aAAa,KAAKI,iBAAiB,CAACS,YAAtG,EAAoH;;YAEhH;UACH;;UACD,OAAOT,iBAAiB,CAACgB,IAAzB;QACH;;QACD;IA5CR;;IAgDA,OAAO,IAAP;EACH,CAlDM;;EAmDX;AAAC","names":["EventMessageUtils","message","currentStatus","eventType","EventType","LOGIN_START","InteractionStatus","Login","SSO_SILENT_START","SsoSilent","ACQUIRE_TOKEN_START","interactionType","InteractionType","Redirect","Popup","AcquireToken","HANDLE_REDIRECT_START","HandleRedirect","LOGOUT_START","Logout","SSO_SILENT_SUCCESS","SSO_SILENT_FAILURE","None","LOGOUT_END","HANDLE_REDIRECT_END","LOGIN_SUCCESS","LOGIN_FAILURE","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE"],"sources":["../../src/event/EventMessage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, AuthError, AccountInfo } from \"@azure/msal-common\";\nimport { EventType } from \"./EventType\";\nimport { InteractionStatus, InteractionType } from \"../utils/BrowserConstants\";\nimport { PopupRequest, RedirectRequest, SilentRequest, SsoSilentRequest, EndSessionRequest } from \"..\";\n\nexport type EventMessage = {\n    eventType: EventType;\n    interactionType: InteractionType | null;\n    payload: EventPayload;\n    error: EventError;\n    timestamp: number;\n};\n\nexport type PopupEvent = {\n    popupWindow: Window;\n};\n\nexport type EventPayload = AccountInfo | PopupRequest | RedirectRequest | SilentRequest | SsoSilentRequest | EndSessionRequest | AuthenticationResult | PopupEvent | null;\n\nexport type EventError = AuthError | Error | null;\n\nexport type EventCallbackFunction = (message: EventMessage) => void;\n\nexport class EventMessageUtils {\n\n    /**\n     * Gets interaction status from event message\n     * @param message\n     * @param currentStatus\n     */\n    static getInteractionStatusFromEvent(message: EventMessage, currentStatus?: InteractionStatus): InteractionStatus|null {\n        switch (message.eventType) {\n            case EventType.LOGIN_START:\n                return InteractionStatus.Login;\n            case EventType.SSO_SILENT_START:\n                return InteractionStatus.SsoSilent;\n            case EventType.ACQUIRE_TOKEN_START:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    return InteractionStatus.AcquireToken;\n                }\n                break;\n            case EventType.HANDLE_REDIRECT_START:\n                return InteractionStatus.HandleRedirect;\n            case EventType.LOGOUT_START:\n                return InteractionStatus.Logout;\n            case EventType.SSO_SILENT_SUCCESS:\n            case EventType.SSO_SILENT_FAILURE:\n                if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n                    // Prevent this event from clearing any status other than ssoSilent\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGOUT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n                    // Prevent this event from clearing any status other than logout\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.HANDLE_REDIRECT_END:\n                if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n                    // Prevent this event from clearing any status other than handleRedirect\n                    break;\n                }\n                return InteractionStatus.None;\n            case EventType.LOGIN_SUCCESS:\n            case EventType.LOGIN_FAILURE:\n            case EventType.ACQUIRE_TOKEN_SUCCESS:\n            case EventType.ACQUIRE_TOKEN_FAILURE:\n                if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n                    if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n                        // Prevent this event from clearing any status other than login or acquireToken\n                        break;\n                    }\n                    return InteractionStatus.None;\n                }\n                break;\n            default:\n                break;\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}