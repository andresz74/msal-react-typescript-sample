{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, Constants } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentAuthCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentAuthCodeClient, _super);\n\n  function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.apiId = apiId;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n   * @param request\r\n   */\n\n\n  SilentAuthCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"SilentAuthCodeClient.acquireToken called\"); // Auth code payload is required\n\n            if (!request.code) {\n              throw BrowserAuthError.createAuthCodeRequiredError();\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            authCodeRequest = __assign(__assign({}, silentRequest), {\n              code: request.code\n            });\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];\n\n          case 3:\n            clientConfig = _a.sent();\n            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait); // Handle auth code parameters from request\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromServer({\n              code: request.code,\n              msgraph_host: request.msGraphHost,\n              cloud_graph_host_name: request.cloudGraphHostName,\n              cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest.state, authClient.authority, this.networkClient, false)];\n\n          case 4:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentAuthCodeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n\n  return SilentAuthCodeClient;\n}(StandardInteractionClient);\n\nexport { SilentAuthCodeClient };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;;;;;EAmB0CA;;EAGtC,8BAAYC,MAAZ,EAA0CC,WAA1C,EAA4EC,aAA5E,EAAoGC,MAApG,EAAoHC,YAApH,EAAgJC,gBAAhJ,EAAqLC,KAArL,EAAmMC,iBAAnM,EAA0OC,oBAA1O,EAAuRC,aAAvR,EAA6S;IAA7S,YACIC,kBAAMV,MAAN,EAAcC,WAAd,EAA2BC,aAA3B,EAA0CC,MAA1C,EAAkDC,YAAlD,EAAgEC,gBAAhE,EAAkFE,iBAAlF,EAAqGC,oBAArG,EAA2HC,aAA3H,KAAyI,IAD7I;;IAEIE,KAAI,CAACL,KAAL,GAAaA,KAAb;;EACH;;;;;;;EAMKM,8CAAN,UAAmBC,OAAnB,EAAoD;;;;;;YAChD,KAAKV,MAAL,CAAYW,KAAZ,CAAkB,0CAAlB;;YAGA,IAAI,CAACD,OAAO,CAACE,IAAb,EAAmB;cACf,MAAMC,gBAAgB,CAACC,2BAAjB,EAAN;YAEH;;YAG8C;YAAA;YAAA,EAAM,KAAKC,8BAAL,CAAoCL,OAApC,EAA6CM,eAAe,CAACC,MAA7D,CAAN;;;YAAzCC,aAAa,GAA4BC,SAAzC;YACN,KAAKC,cAAL,CAAoBC,kBAApB,CAAuCH,aAAa,CAACI,KAArD,EAA4DJ,aAAa,CAACK,KAA1E,EAAiFL,aAAa,CAACM,SAA/F,EAA0GN,aAAa,CAACO,SAAd,IAA2BC,SAAS,CAACC,YAA/I,EAA6JT,aAAa,CAACU,OAAd,IAAyB,IAAtL;YAEMC,sBAAsB,GAAG,KAAKC,gCAAL,CAAsC,KAAK3B,KAA3C,CAAzB;;;;;;YAKI4B,eAAe,yBACdb,aADc,GACD;cAChBN,IAAI,EAAEF,OAAO,CAACE;YADE,CADC,CAAf;YAMe;YAAA;YAAA,EAAM,KAAKoB,sBAAL,CAA4BH,sBAA5B,EAAoDX,aAAa,CAACM,SAAlE,CAAN;;;YAAfS,YAAY,GAAGd,SAAf;YACAe,UAAU,GAAqC,IAAIC,gCAAJ,CAAqCF,YAArC,CAA/C;YACN,KAAKjC,MAAL,CAAYoC,OAAZ,CAAoB,0BAApB;YAGMC,aAAa,GAAG,IAAIC,aAAJ,CAAkBJ,UAAlB,EAA8B,KAAKd,cAAnC,EAAmDW,eAAnD,EAAoE,KAAK/B,MAAzE,EAAiF,KAAKH,MAAL,CAAY0C,MAAZ,CAAmBC,iBAApG,CAAhB;;YAGN;YAAA;YAAA,EAAOH,aAAa,CAACI,4BAAd,CACH;cACI7B,IAAI,EAAEF,OAAO,CAACE,IADlB;cAEI8B,YAAY,EAAEhC,OAAO,CAACiC,WAF1B;cAGIC,qBAAqB,EAAElC,OAAO,CAACmC,kBAHnC;cAIIC,wBAAwB,EAAEpC,OAAO,CAACqC;YAJtC,CADG,EAOH7B,aAAa,CAACI,KAPX,EAQHY,UAAU,CAACV,SARR,EASH,KAAKwB,aATF,EAUH,KAVG,CAAP;;;;;YAaA,IAAIC,GAAC,YAAYC,SAAjB,EAA4B;cACvBD,GAAe,CAACE,gBAAhB,CAAiC,KAAK7C,aAAtC;YACJ;;YACDuB,sBAAsB,CAACuB,kBAAvB,CAA0CH,GAA1C;YACA,KAAK7B,cAAL,CAAoBiC,mBAApB,CAAwCnC,aAAa,CAACI,KAAtD;YACA,MAAM2B,GAAN;;;;;;;;;EAEP,CApDK;;;;;;EAyDNxC;;IAEI,OAAO6C,OAAO,CAACC,MAAR,CAAe1C,gBAAgB,CAAC2C,kCAAjB,EAAf,CAAP;EACH,CAHD;;EAIJ;AAzEA,EAA0CC","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeMessageHandler","correlationId","_super","_this","SilentAuthCodeClient","request","trace","code","BrowserAuthError","createAuthCodeRequiredError","initializeAuthorizationRequest","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","getClientConfiguration","clientConfig","authClient","HybridSpaAuthorizationCodeClient","verbose","silentHandler","SilentHandler","system","navigateFrameWait","handleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","networkClient","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","Promise","reject","createSilentLogoutUnsupportedError","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentAuthCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, CommonAuthorizationCodeRequest, AuthError, Constants, IPerformanceClient } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request\n     */\n    async acquireToken(request: AuthorizationCodeRequest): Promise<AuthenticationResult> {\n        this.logger.trace(\"SilentAuthCodeClient.acquireToken called\");\n\n        // Auth code payload is required\n        if (!request.code) {\n            throw BrowserAuthError.createAuthCodeRequiredError();\n\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest(request, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n\n            // Initialize the client\n            const clientConfig = await this.getClientConfiguration(serverTelemetryManager, silentRequest.authority);\n            const authClient: HybridSpaAuthorizationCodeClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n\n            // Handle auth code parameters from request\n            return silentHandler.handleCodeResponseFromServer(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName\n                },\n                silentRequest.state,\n                authClient.authority,\n                this.networkClient,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}