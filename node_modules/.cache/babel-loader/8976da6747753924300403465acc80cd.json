{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectClient =\n/** @class */\nfunction (_super) {\n  __extends(RedirectClient, _super);\n\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n\n\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n            handleBackButton = function (event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n              }\n            };\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage); // Clear temporary cache if the back button is clicked during the redirect flow.\n\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4\n            /*yield*/\n            , interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 7:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2\n              /*return*/\n              , null];\n            }\n\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            state = void 0;\n\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3\n            /*break*/\n            , 3]; // We are on the page we need to navigate to - handle hash\n\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4\n            /*yield*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 2:\n            handleHashResult = _a.sent();\n\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n\n            return [2\n            /*return*/\n            , handleHashResult];\n\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2\n            /*return*/\n            , this.handleHash(responseHash, state, serverTelemetryManager)];\n\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3\n            /*break*/\n            , 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3\n            /*break*/\n            , 6];\n            homepage = BrowserUtils.getHomepage(); // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(homepage, navigationOptions)];\n\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2\n              /*return*/\n              , this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n\n            _a.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , null];\n\n          case 10:\n            e_2 = _a.sent();\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n\n\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\"); // Get current location hash from window or cache.\n\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n\n\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n\n\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest); // Clear cache on logout\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validLogoutRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\"); // Ensure interaction is in progress\n\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n\n            return [4\n            /*yield*/\n            , this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n\n          case 8:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            e_3 = _a.sent();\n\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n\n\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n\n  return RedirectClient;\n}(StandardInteractionClient);\n\nexport { RedirectClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","nativeStorage","RedirectClient","request","initializeAuthorizationRequest","InteractionType","Redirect","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","Constants","EMPTY_STRING","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","handleBackButton","event","persisted","verbose","cleanRequestByState","initializeAuthorizationCodeRequest","authCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","interactionHandler","RedirectHandler","getAuthCodeUrl","__assign","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","redirectStartPage","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","e_1","AuthError","setCorrelationId","removeEventListener","cacheFailedRequest","hash","handleRedirectPromise","isInteractionInProgress","info","responseHash","getRedirectResponseHash","location","cleanRequestByInteractionType","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","e","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","loginRequestUrlNormalized","removeHashFromUrl","currentUrlNormalized","href","auth","navigateToLoginRequestUrl","handleHash","handleHashResult","indexOf","BrowserUtils","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","e_2","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","getCachedRequest","accountId","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","acquireTokenPopup","userRequestState","ProtocolUtils","parseRequestState","acquireToken","prompt","undefined","finally","currentAuthority","getCachedAuthority","createNoCachedAuthorityError","ThrottlingUtils","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logoutRequest","validLogoutRequest","initializeLogoutRequest","logout","emitEvent","EventType","LOGOUT_START","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","navigate","getInteractionInProgress","setInteractionInProgress","navigateExternal","e_3","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri","StandardInteractionClient"],"sources":["../../src/interaction_client/RedirectClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, UrlString, AuthError, ServerTelemetryManager, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, ThrottlingUtils, ICrypto, Logger, IPerformanceClient } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { ApiId, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Redirect);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n\n        const handleBackButton = (event: PageTransitionEvent) => {\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                this.browserStorage.cleanRequestByState(validRequest.state);\n            }\n        };\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto);\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            });\n\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash\n     */\n    async handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n\n            const responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            let state: string;\n            try {\n                // Deserialize hash fragment response parameters.\n                const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(responseHash);\n                state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n                this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n                this.logger.info(`handleRedirectPromise was unable to extract state due to: ${e}`);\n                this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n                const handleHashResult = await this.handleHash(responseHash, state, serverTelemetryManager);\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n                return this.handleHash(responseHash, state, serverTelemetryManager);\n            } else if (!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return this.handleHash(responseHash, state, serverTelemetryManager);\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponseHash(hash: string): string | null {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        const isResponseHash: boolean = UrlString.hashContainsKnownProperties(hash);\n\n        if (isResponseHash) {\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return hash;\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n        return cachedHash;\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleHash(hash: string, state: string, serverTelemetryManager: ServerTelemetryManager): Promise<AuthenticationResult> {\n        const cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n        this.logger.verbose(\"handleHash called, retrieved cached request\");\n\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n            }\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return nativeInteractionClient.acquireToken({\n                ...cachedRequest,\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n            }).finally(() => {\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw BrowserAuthError.createNoCachedAuthorityError();\n        }\n\n        const authClient = await this.createAuthCodeClient(serverTelemetryManager, currentAuthority);\n        this.logger.verbose(\"Auth code client created\");\n        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n        const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto);\n        return await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n\n        try {\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch(e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}