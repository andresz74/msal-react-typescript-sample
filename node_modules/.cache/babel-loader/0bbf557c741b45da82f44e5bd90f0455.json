{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, PerformanceEvents, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentCacheClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentCacheClient, _super);\n\n  function SilentCacheClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Returns unexpired tokens from the cache, if available\r\n   * @param silentRequest\r\n   */\n\n\n  SilentCacheClient.prototype.acquireToken = function (silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, serverTelemetryManager, silentAuthClient, cachedToken, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 1:\n            silentAuthClient = _a.sent();\n            this.logger.verbose(\"Silent auth client created\");\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , silentAuthClient.acquireCachedToken(silentRequest)];\n\n          case 3:\n            cachedToken = _a.sent();\n            acquireTokenMeasurement.endMeasurement({\n              success: true,\n              fromCache: true\n            });\n            return [2\n            /*return*/\n            , cachedToken];\n\n          case 4:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof BrowserAuthError && error_1.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n              this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: error_1 instanceof AuthError && error_1.errorCode || undefined,\n              subErrorCode: error_1 instanceof AuthError && error_1.subError || undefined,\n              success: false\n            });\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentCacheClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates an Silent Flow Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new SilentFlowClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n\n  SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            }])];\n        }\n      });\n    });\n  };\n\n  return SilentCacheClient;\n}(StandardInteractionClient);\n\nexport { SilentCacheClient };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;EAWuCA;;EAAvC;;EA6DC;;;;;;;EAxDSC,2CAAN,UAAmBC,aAAnB,EAAyD;;;;;;YAC/CC,uBAAuB,GAAG,KAAKC,iBAAL,CAAuBC,gBAAvB,CAAwCC,iBAAiB,CAACC,6BAA1D,EAAyFL,aAAa,CAACM,aAAvG,CAA1B;YAEAC,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCC,KAAK,CAACC,6BAA5C,CAAzB;YAEmB;YAAA;YAAA,EAAM,KAAKC,sBAAL,CAA4BJ,sBAA5B,EAAoDP,aAAa,CAACY,SAAlE,EAA6EZ,aAAa,CAACa,iBAA3F,CAAN;;;YAAnBC,gBAAgB,GAAGC,SAAnB;YACN,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,4BAApB;;;;;;YAGwB;YAAA;YAAA,EAAMH,gBAAgB,CAACI,kBAAjB,CAAoClB,aAApC,CAAN;;;YAAdmB,WAAW,GAAGJ,SAAd;YAENd,uBAAuB,CAACmB,cAAxB,CAAuC;cACnCC,OAAO,EAAE,IAD0B;cAEnCC,SAAS,EAAE;YAFwB,CAAvC;YAIA;YAAA;YAAA,EAAOH,WAAP;;;;;YAEA,IAAII,OAAK,YAAYC,gBAAjB,IAAqCD,OAAK,CAACE,SAAN,KAAoBC,uBAAuB,CAACC,2BAAxB,CAAoDC,IAAjH,EAAuH;cACnH,KAAKZ,MAAL,CAAYC,OAAZ,CAAoB,sHAApB;YACH;;YACDhB,uBAAuB,CAACmB,cAAxB,CAAuC;cACnCK,SAAS,EAAEF,OAAK,YAAYM,SAAjB,IAA8BN,OAAK,CAACE,SAApC,IAAiDK,SADzB;cAEnCC,YAAY,EAAER,OAAK,YAAYM,SAAjB,IAA8BN,OAAK,CAACS,QAApC,IAAgDF,SAF3B;cAGnCT,OAAO,EAAE;YAH0B,CAAvC;YAKA,MAAME,OAAN;;;;;;;;;EAEP,CA3BK;;;;;;EAgCNxB;;IAEI,OAAOkC,OAAO,CAACC,MAAR,CAAeV,gBAAgB,CAACW,kCAAjB,EAAf,CAAP;EACH,CAHD;;;;;;;;EAUgBpC,qDAAhB,UAAuCQ,sBAAvC,EAAuF6B,YAAvF,EAA8GvB,iBAA9G,EAAmJ;;;;;;YAE1H;YAAA;YAAA,EAAM,KAAKwB,sBAAL,CAA4B9B,sBAA5B,EAAoD6B,YAApD,EAAkEvB,iBAAlE,CAAN;;;YAAfyB,YAAY,GAAGvB,SAAf;YACN;YAAA;YAAA,EAAO,IAAIwB,gBAAJ,CAAqBD,YAArB,EAAmC,KAAKpC,iBAAxC,CAAP;;;;EACH,CAJe;;EAMVH,sDAAN,UAA8ByC,OAA9B,EAAsDC,OAAtD,EAA0E;;;;;;;+BAE/DD;YACA;YAAA;YAAA,EAAM,KAAKE,qBAAL,CAA2BF,OAA3B,CAAN;;;YAFP;YAAA;YAAA,4DAEOG,SAFP,KAEgD;cAC5CF,OAAO,EAAEA,OADmC;cAE5CG,YAAY,EAAEJ,OAAO,CAACI,YAAR,IAAwB;YAFM,CAFhD;;;;EAMH,CAPK;;EAQV;AA7DA,EAAuCC","names":["__extends","SilentCacheClient","silentRequest","acquireTokenMeasurement","performanceClient","startMeasurement","PerformanceEvents","SilentCacheClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createSilentFlowClient","authority","azureCloudOptions","silentAuthClient","_a","logger","verbose","acquireCachedToken","cachedToken","endMeasurement","success","fromCache","error_1","BrowserAuthError","errorCode","BrowserAuthErrorMessage","signingKeyNotFoundInStorage","code","AuthError","undefined","subErrorCode","subError","Promise","reject","createSilentLogoutUnsupportedError","authorityUrl","getClientConfiguration","clientConfig","SilentFlowClient","request","account","initializeBaseRequest","_b","forceRefresh","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentCacheClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, SilentFlowClient, ServerTelemetryManager, AccountInfo, AzureCloudOptions, PerformanceEvents, AuthError} from \"@azure/msal-common\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(silentRequest: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\n\n            acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: true\n            });\n            return cachedToken;\n        } catch (error) {\n            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            acquireTokenMeasurement.endMeasurement({\n                errorCode: error instanceof AuthError && error.errorCode || undefined,\n                subErrorCode: error instanceof AuthError && error.subError || undefined,\n                success: false\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createSilentFlowClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<SilentFlowClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new SilentFlowClient(clientConfig, this.performanceClient);\n    }\n\n    async initializeSilentRequest(request: SilentRequest, account: AccountInfo): Promise<CommonSilentFlowRequest> {\n        return {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            account: account,\n            forceRefresh: request.forceRefresh || false\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}