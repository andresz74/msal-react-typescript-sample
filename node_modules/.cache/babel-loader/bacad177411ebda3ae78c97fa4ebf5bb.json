{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectHandler =\n/** @class */\nfunction (_super) {\n  __extends(RedirectHandler, _super);\n\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger) || this;\n\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n\n\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3\n            /*break*/\n            , 7]; // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n\n            if (params.redirectStartPage) {\n              this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            } // Set interaction status in the library.\n\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 4];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 2];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            // Navigate window to request URL\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n\n\n  RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            } // Interaction is completed - remove interaction status.\n\n\n            this.browserStorage.setInteractionInProgress(false);\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            try {\n              authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            } catch (e) {\n              if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n              } else {\n                throw e;\n              }\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n\n  return RedirectHandler;\n}(InteractionHandler);\n\nexport { RedirectHandler };","map":{"version":3,"mappings":"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","names":["__extends","authCodeModule","storageImpl","authCodeRequest","logger","browserCrypto","_super","_this","RedirectHandler","requestUrl","params","verbose","StringUtils","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","CORRELATION_ID","correlationId","cacheCodeRequest","infoPii","navigationOptions","apiId","ApiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","_a","info","BrowserAuthError","createEmptyNavigationUriError","locationHash","state","authority","networkModule","createEmptyHashError","setInteractionInProgress","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","InteractionHandler"],"sources":["../../src/interaction_handler/RedirectHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, Authority, INetworkModule, ClientAuthError, Logger, ServerError } from \"@azure/msal-common\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\n\nexport type RedirectParams = InteractionParams & {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler extends InteractionHandler {\n\n    private browserCrypto: ICrypto;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, browserCrypto: ICrypto) {\n        super(authCodeModule, storageImpl, authCodeRequest, logger);\n        this.browserCrypto = browserCrypto;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (!StringUtils.isEmpty(requestUrl)) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            \n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n            } else {\n                throw e;\n            }\n        }\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}