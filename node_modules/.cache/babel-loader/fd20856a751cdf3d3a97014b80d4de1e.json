{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { Authority, IdTokenEntity, AuthToken, AccountEntity, ScopeSet, AccessTokenEntity } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    if (request.account) {\n      this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n      this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      var authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId, options) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n    var idAuthToken = new AuthToken(idToken, this.cryptoObj);\n    var accountEntity = options.clientInfo ? AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setAccount(accountEntity);\n      this.storage.setIdTokenCredential(idTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache };","map":{"version":3,"mappings":"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","names":["configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","TokenCache","request","response","options","info","id_token","BrowserAuthError","createUnableToLoadTokenError","account","loadIdToken","homeAccountId","environment","tenantId","loadAccessToken","authority","authorityUrl","Authority","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","hostnameAndPort","tenant","client_info","idToken","idTokenEntity","IdTokenEntity","createIdTokenEntity","clientId","idAuthToken","AuthToken","accountEntity","AccountEntity","createAccount","undefined","createGenericAccount","verbose","setAccount","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","ScopeSet","printScopes","expiresOn","Date","getTime","accessTokenEntity","AccessTokenEntity","createAccessTokenEntity","setAccessTokenCredential"],"sources":["../../src/cache/TokenCache.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccessTokenEntity, ICrypto, IdTokenEntity, Logger, ScopeSet, Authority, AuthorityOptions, ExternalTokenResponse, AccountEntity, AuthToken } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string,\n    expiresOn?: number,\n    extendedExpiresOn?: number\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(configuration: BrowserConfiguration, storage: BrowserCacheManager, logger: Logger, cryptoObj: ICrypto) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n\n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     */\n    loadExternalTokens(request: SilentRequest, response: ExternalTokenResponse, options: LoadTokenOptions): void {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n        if (!response.id_token) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n        }\n\n        if (request.account) {\n            this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n            this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n        } else if (request.authority) {\n\n            const authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n            const authorityOptions: AuthorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata,\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\n            };\n            const authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions);\n\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n            } else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n                this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n            } else {\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n            }\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n        }\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @param options\n     */\n    private loadIdToken(idToken: string, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        const idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n        const idAuthToken = new AuthToken(idToken, this.cryptoObj);\n        const accountEntity = options.clientInfo ?\n            AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, environment) :\n            AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, environment);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setAccount(accountEntity);\n            this.storage.setIdTokenCredential(idTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param options\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns\n     */\n    private loadAccessToken(request: SilentRequest, response: ExternalTokenResponse, homeAccountId: string, environment: string, tenantId: string, options: LoadTokenOptions): void {\n\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\n            return;\n        }\n\n        if (!response.expires_in) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n        }\n\n        if (!options.extendedExpiresOn) {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n        }\n\n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\n        const extendedExpiresOn = options.extendedExpiresOn;\n\n        const accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n        } else {\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}