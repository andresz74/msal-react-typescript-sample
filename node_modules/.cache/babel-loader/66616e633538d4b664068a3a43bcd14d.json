{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NativeMessageHandler =\n/** @class */\nfunction () {\n  function NativeMessageHandler(logger, handshakeTimeoutMs, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n\n    this.responseId = 0;\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n\n\n  NativeMessageHandler.prototype.sendMessage = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\n        this.messageChannel.port1.postMessage(req);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.resolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param logger\r\n   * @param handshakeTimeoutMs\r\n   */\n\n\n  NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var preferredProvider, backupProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.trace(\"NativeMessageHandler - createProvider called.\");\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n\n            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, NativeConstants.PREFERRED_EXTENSION_ID);\n            return [4\n            /*yield*/\n            , preferredProvider.sendHandshakeRequest()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , preferredProvider];\n\n          case 3:\n            _a.sent();\n\n            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs);\n            return [4\n            /*yield*/\n            , backupProvider.sendHandshakeRequest()];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , backupProvider];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Send handshake request helper.\r\n   */\n\n\n  NativeMessageHandler.prototype.sendHandshakeRequest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\"); // Register this event listener before sending handshake\n\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: {\n            method: NativeExtensionMethod.HandshakeRequest\n          }\n        };\n\n        this.messageChannel.port1.onmessage = function (event) {\n          _this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          _this.handshakeResolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n\n          _this.timeoutId = window.setTimeout(function () {\n            /*\r\n             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n             */\n            window.removeEventListener(\"message\", _this.windowListener, false);\n\n            _this.messageChannel.port1.close();\n\n            _this.messageChannel.port2.close();\n\n            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n\n            _this.handshakeResolvers.delete(req.responseId);\n          }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        })];\n      });\n    });\n  };\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onWindowMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\"); // We only accept messages from ourselves\n\n    if (event.source !== window) {\n      return;\n    }\n\n    var request = event.data;\n\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n      if (handshakeResolver) {\n        handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n      }\n    }\n  };\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n\n\n  NativeMessageHandler.prototype.onChannelMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    var request = event.data;\n    var resolver = this.resolvers.get(request.responseId);\n    var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n    try {\n      var method = request.body.method;\n\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n\n        var response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\n\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          return;\n        }\n\n        clearTimeout(this.timeoutId); // Clear setTimeout\n\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n\n        this.extensionId = request.extensionId;\n        this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      } // Do nothing if method is not Response or HandshakeResponse\n\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\n      this.logger.errorPii(\"Unable to parse \" + event);\n\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  };\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n\n\n  NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\"); // Developer disabled WAM\n\n      return false;\n    }\n\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\"); // Extension is not available\n\n      return false;\n    }\n\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n\n    return true;\n  };\n\n  return NativeMessageHandler;\n}();\n\nexport { NativeMessageHandler };","map":{"version":3,"mappings":"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","names":["logger","handshakeTimeoutMs","extensionId","resolvers","Map","handshakeResolvers","responseId","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","NativeMessageHandler","body","trace","req","channel","NativeConstants","CHANNEL_ID","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","_this","set","preferredProvider","PREFERRED_EXTENSION_ID","sendHandshakeRequest","_a","backupProvider","window","addEventListener","method","NativeExtensionMethod","HandshakeRequest","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","BrowserAuthError","createNativeHandshakeTimeoutError","delete","source","request","data","verbose","clearTimeout","handshakeResolver","get","createNativeExtensionNotInstalledError","resolver","Response","response","status","NativeAuthError","createError","code","description","ext","result","AuthError","createUnexpectedError","HandshakeResponse","err","error","errorPii","toString","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","AuthenticationScheme","BEARER","POP"],"sources":["../../../src/broker/nativeBroker/NativeMessageHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NativeConstants, NativeExtensionMethod } from \"../../utils/BrowserConstants\";\nimport { Logger, AuthError, AuthenticationScheme } from \"@azure/msal-common\";\nimport { NativeExtensionRequest, NativeExtensionRequestBody } from \"./NativeRequest\";\nimport { NativeAuthError } from \"../../error/NativeAuthError\";\nimport { BrowserAuthError } from \"../../error/BrowserAuthError\";\nimport { BrowserConfiguration } from \"../../config/Configuration\";\n\ntype ResponseResolvers<T> = {\n    resolve: (value:T|PromiseLike<T>) => void;\n    reject: (value:AuthError|Error|PromiseLike<Error>|PromiseLike<AuthError>)  => void;\n};\n\nexport class NativeMessageHandler {\n    private extensionId: string | undefined;\n    private logger: Logger;\n    private handshakeTimeoutMs: number;\n    private responseId: number;\n    private timeoutId: number | undefined;\n    private resolvers: Map<number, ResponseResolvers<object>>;\n    private handshakeResolvers: Map<number, ResponseResolvers<void>>;\n    private messageChannel: MessageChannel;\n    private windowListener: (event: MessageEvent) => void;\n\n    constructor(logger: Logger, handshakeTimeoutMs: number, extensionId?: string) {\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.responseId = 0;\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    }\n\n    /**\n     * Sends a given message to the extension and resolves with the extension response\n     * @param body \n     */\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: this.responseId++,\n            body: body\n        };\n\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\n        this.messageChannel.port1.postMessage(req);\n\n        return new Promise((resolve, reject) => {\n            this.resolvers.set(req.responseId, {resolve, reject});\n        });\n    }\n\n    /**\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\n     * @param logger \n     * @param handshakeTimeoutMs\n     */\n    static async createProvider(logger: Logger, handshakeTimeoutMs: number): Promise<NativeMessageHandler> {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, NativeConstants.PREFERRED_EXTENSION_ID);\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs);\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n\n    /**\n     * Send handshake request helper.\n     */\n    private async sendHandshakeRequest(): Promise<void> {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: this.responseId++,\n\n            body: {\n                method: NativeExtensionMethod.HandshakeRequest\n            }\n        };\n\n        this.messageChannel.port1.onmessage = (event) => {\n            this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n\n        return new Promise((resolve, reject) => {\n            this.handshakeResolvers.set(req.responseId, {resolve, reject});\n            this.timeoutId = window.setTimeout(() => {\n                /*\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\n                 */\n                window.removeEventListener(\"message\", this.windowListener, false);\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n\n    /**\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\n     * @param event \n     */\n    private onWindowMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n\n        const request = event.data;\n\n        if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n            return;\n        }\n\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n            if (handshakeResolver) {\n                handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n            }\n        }\n    }\n\n    /**\n     * Invoked when a message is received from the extension on the MessageChannel port\n     * @param event \n     */\n    private onChannelMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n        \n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n\n        try {\n            const method = request.body.method;\n            \n            if (method === NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\n                if (response.status !== \"Success\") {\n                    resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n                } else if (response.result) {\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\n                        resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\n\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            } \n            // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(`Error parsing response from WAM Extension: ${err.toString()}`);\n            this.logger.errorPii(`Unable to parse ${event}`);\n\n            if (resolver) {\n                resolver.reject(err as AuthError);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err as AuthError);\n            }\n        }\n    }\n    \n    /**\n     * Returns boolean indicating whether or not the request should attempt to use native broker\n     * @param logger\n     * @param config\n     * @param nativeExtensionProvider\n     * @param authenticationScheme \n     */\n    static isNativeAvailable(config: BrowserConfiguration, logger: Logger, nativeExtensionProvider?: NativeMessageHandler, authenticationScheme?: AuthenticationScheme): boolean {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n            // Developer disabled WAM\n            return false;\n        }\n\n        if (!nativeExtensionProvider) {\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n            // Extension is not available\n            return false;\n        }\n\n        if (authenticationScheme) {\n            switch(authenticationScheme) {\n                case AuthenticationScheme.BEARER:\n                case AuthenticationScheme.POP:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n                    return true;\n                default:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n                    return false;\n            }\n        }\n\n        return true;\n    }\n} \n"]},"metadata":{},"sourceType":"module"}