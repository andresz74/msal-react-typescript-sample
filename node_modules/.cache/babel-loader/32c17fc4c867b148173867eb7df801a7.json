{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator, __extends } from '../_virtual/_tslib.js';\nimport { Constants, CredentialType, AuthenticationScheme, CacheSchemaType, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { CredentialEntity } from './entities/CredentialEntity.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\n\nvar CacheManager =\n/** @class */\nfunction () {\n  function CacheManager(clientId, cryptoImpl) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n\n\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n\n    var currentAccounts = this.getAccountsFilteredBy();\n    var accountValues = Object.keys(currentAccounts).map(function (accountKey) {\n      return currentAccounts[accountKey];\n    });\n    var numAccounts = accountValues.length;\n\n    if (numAccounts < 1) {\n      return [];\n    } else {\n      var allAccounts = accountValues.map(function (value) {\n        var accountEntity = CacheManager.toObject(new AccountEntity(), value);\n        var accountInfo = accountEntity.getAccountInfo();\n\n        var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);\n\n        if (idToken && !accountInfo.idTokenClaims) {\n          accountInfo.idToken = idToken.secret;\n          accountInfo.idTokenClaims = new AuthToken(idToken.secret, _this.cryptoImpl).claims;\n        }\n\n        return accountInfo;\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n\n\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!cacheRecord) {\n              throw ClientAuthError.createNullOrUndefinedCacheRecord();\n            }\n\n            if (!!cacheRecord.account) {\n              this.setAccount(cacheRecord.account);\n            }\n\n            if (!!cacheRecord.idToken) {\n              this.setIdTokenCredential(cacheRecord.idToken);\n            }\n\n            if (!!!cacheRecord.accessToken) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.saveAccessToken(cacheRecord.accessToken)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            if (!!cacheRecord.refreshToken) {\n              this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n\n            if (!!cacheRecord.appMetadata) {\n              this.setAppMetadata(cacheRecord.appMetadata);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentTokenCache, currentScopes, currentAccessTokens, removedAccessTokens_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            currentTokenCache = this.getCredentialsFilteredBy({\n              clientId: credential.clientId,\n              credentialType: credential.credentialType,\n              environment: credential.environment,\n              homeAccountId: credential.homeAccountId,\n              realm: credential.realm,\n              tokenType: credential.tokenType,\n              requestedClaimsHash: credential.requestedClaimsHash\n            });\n            currentScopes = ScopeSet.fromString(credential.target);\n            currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) {\n              return currentTokenCache.accessTokens[key];\n            });\n            if (!currentAccessTokens) return [3\n            /*break*/\n            , 2];\n            removedAccessTokens_1 = [];\n            currentAccessTokens.forEach(function (tokenEntity) {\n              var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n\n              if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                removedAccessTokens_1.push(_this.removeCredential(tokenEntity));\n              }\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedAccessTokens_1)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.setAccessTokenCredential(credential);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : Constants.EMPTY_STRING, accountFilter ? accountFilter.environment : Constants.EMPTY_STRING, accountFilter ? accountFilter.realm : Constants.EMPTY_STRING, accountFilter ? accountFilter.nativeAccountId : Constants.EMPTY_STRING);\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm, nativeAccountId) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingAccounts = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      var entity = _this.getAccount(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n\n      if (!!nativeAccountId && !_this.matchNativeAccountId(entity, nativeAccountId)) {\n        return;\n      }\n\n      matchingAccounts[cacheKey] = entity;\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.getCredentialsFilteredBy = function (filter) {\n    return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.userAssertionHash, filter.tokenType, filter.keyId, filter.requestedClaimsHash);\n  };\n  /**\r\n   * Support function to help match credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   * @param userAssertionHash\r\n   * @param tokenType\r\n   */\n\n\n  CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, userAssertionHash, tokenType, keyId, requestedClaimsHash) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingCredentials = {\n      idTokens: {},\n      accessTokens: {},\n      refreshTokens: {}\n    };\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-credential type cache entities\n      var credType = CredentialEntity.getCredentialType(cacheKey);\n\n      if (credType === Constants.NOT_DEFINED) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getSpecificCredential(cacheKey, credType);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!userAssertionHash && !_this.matchUserAssertionHash(entity, userAssertionHash)) {\n        return;\n      }\n\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n\n      if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {\n        return;\n      }\n\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n\n      if (!!familyId && !_this.matchFamilyId(entity, familyId)) {\n        return;\n      }\n      /*\r\n       * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n       * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n       */\n\n\n      if (!!target && !_this.matchTarget(entity, target)) {\n        return;\n      } // If request OR cached entity has requested Claims Hash, check if they match\n\n\n      if (requestedClaimsHash || entity.requestedClaimsHash) {\n        // Don't match if either is undefined or they are different\n        if (entity.requestedClaimsHash !== requestedClaimsHash) {\n          return;\n        }\n      } // Access Token with Auth Scheme specific matching\n\n\n      if (credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n        if (!!tokenType && !_this.matchTokenType(entity, tokenType)) {\n          return;\n        } // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n\n\n        if (tokenType === AuthenticationScheme.SSH) {\n          if (keyId && !_this.matchKeyId(entity, keyId)) {\n            return;\n          }\n        }\n      } // At this point, the entity matches the request, update cache key if key schema has changed\n\n\n      var updatedCacheKey = _this.updateCredentialCacheKey(cacheKey, entity);\n\n      switch (credType) {\n        case CredentialType.ID_TOKEN:\n          matchingCredentials.idTokens[updatedCacheKey] = entity;\n          break;\n\n        case CredentialType.ACCESS_TOKEN:\n        case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n          matchingCredentials.accessTokens[updatedCacheKey] = entity;\n          break;\n\n        case CredentialType.REFRESH_TOKEN:\n          matchingCredentials.refreshTokens[updatedCacheKey] = entity;\n          break;\n      }\n    });\n    return matchingCredentials;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAppMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAuthorityMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAllAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allCacheKeys, removedAccounts;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allCacheKeys = this.getKeys();\n            removedAccounts = [];\n            allCacheKeys.forEach(function (cacheKey) {\n              var entity = _this.getAccount(cacheKey);\n\n              if (!entity) {\n                return;\n              }\n\n              removedAccounts.push(_this.removeAccount(cacheKey));\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedAccounts)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\r\n   * returns a boolean if the given account is removed\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            account = this.getAccount(accountKey);\n\n            if (!account) {\n              throw ClientAuthError.createNoAccountFoundError();\n            }\n\n            return [4\n            /*yield*/\n            , this.removeAccountContext(account)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent() && this.removeItem(accountKey, CacheSchemaType.ACCOUNT)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes credentials associated with the provided account\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccountContext = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allCacheKeys, accountId, removedCredentials;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allCacheKeys = this.getKeys();\n            accountId = account.generateAccountId();\n            removedCredentials = [];\n            allCacheKeys.forEach(function (cacheKey) {\n              // don't parse any non-credential type cache entities\n              var credType = CredentialEntity.getCredentialType(cacheKey);\n\n              if (credType === Constants.NOT_DEFINED) {\n                return;\n              }\n\n              var cacheEntity = _this.getSpecificCredential(cacheKey, credType);\n\n              if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n                removedCredentials.push(_this.removeCredential(cacheEntity));\n              }\n            });\n            return [4\n            /*yield*/\n            , Promise.all(removedCredentials)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.removeCredential = function (credential) {\n    return __awaiter(this, void 0, void 0, function () {\n      var key, accessTokenWithAuthSchemeEntity, kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            key = credential.generateCredentialKey();\n            if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3\n            /*break*/\n            , 4];\n            if (!(credential.tokenType === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 4];\n            accessTokenWithAuthSchemeEntity = credential;\n            kid = accessTokenWithAuthSchemeEntity.keyId;\n            if (!kid) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.cryptoImpl.removeTokenBindingKey(kid)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            throw ClientAuthError.createBindingKeyNotRemovedError();\n\n          case 4:\n            return [2\n            /*return*/\n            , this.removeItem(key, CacheSchemaType.CREDENTIAL)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.readCacheRecord = function (account, clientId, request, environment) {\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.readIdTokenFromCache(clientId, account);\n    var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, request);\n    var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param nativeAccountId\r\n   * @returns AccountEntity or Null\r\n   */\n\n\n  CacheManager.prototype.readAccountFromCacheWithNativeAccountId = function (nativeAccountId) {\n    // fetch account from memory\n    var accountFilter = {\n      nativeAccountId: nativeAccountId\n    };\n    var accountCache = this.getAccountsFilteredBy(accountFilter);\n    var accounts = Object.keys(accountCache).map(function (key) {\n      return accountCache[key];\n    });\n\n    if (accounts.length < 1) {\n      return null;\n    } else if (accounts.length > 1) {\n      throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n    }\n\n    return accountCache[0];\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n\n\n  CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: clientId,\n      realm: account.tenantId\n    };\n    var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    });\n    var numIdTokens = idTokens.length;\n\n    if (numIdTokens < 1) {\n      return null;\n    } else if (numIdTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, request) {\n    var scopes = new ScopeSet(request.scopes || []);\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: clientId,\n      realm: account.tenantId,\n      target: scopes.printScopesLowerCase(),\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash\n    };\n    var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n\n\n  CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: clientId,\n      familyId: id\n    };\n    var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n    var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) {\n      return credentialCache.refreshTokens[key];\n    });\n    var numRefreshTokens = refreshTokens.length;\n\n    if (numRefreshTokens < 1) {\n      return null;\n    } // address the else case after remove functions address environment aliases\n\n\n    return refreshTokens[0];\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n\n\n  CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n    }\n\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {\n    var appMetadata = this.readAppMetadataFromCache(environment, clientId);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n\n\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n\n\n  CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\n    return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n\n\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n\n\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n\n\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * helper to match nativeAccountId\r\n   * @param entity\r\n   * @param nativeAccountId\r\n   * @returns boolean indicating the match result\r\n   */\n\n\n  CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\n    return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n\n    var entityScopeSet = ScopeSet.fromString(entity.target);\n    var requestTargetScopeSet = ScopeSet.fromString(target);\n\n    if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n      requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n    } else {\n      requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n\n    return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n  };\n  /**\r\n   * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n\n\n  CacheManager.prototype.matchTokenType = function (entity, tokenType) {\n    return !!(entity.tokenType && entity.tokenType === tokenType);\n  };\n  /**\r\n   * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n\n\n  CacheManager.prototype.matchKeyId = function (entity, keyId) {\n    return !!(entity.keyId && entity.keyId === keyId);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n\n\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n   * @param key\r\n   * @param credType\r\n   */\n\n\n  CacheManager.prototype.getSpecificCredential = function (key, credType) {\n    switch (credType) {\n      case CredentialType.ID_TOKEN:\n        {\n          return this.getIdTokenCredential(key);\n        }\n\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        {\n          return this.getAccessTokenCredential(key);\n        }\n\n      case CredentialType.REFRESH_TOKEN:\n        {\n          return this.getRefreshTokenCredential(key);\n        }\n\n      default:\n        return null;\n    }\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n\n\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n\n    return obj;\n  };\n\n  return CacheManager;\n}();\n\nvar DefaultStorageClass =\n/** @class */\nfunction (_super) {\n  __extends(DefaultStorageClass, _super);\n\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  };\n\n  DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\n    var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n\n  return DefaultStorageClass;\n}(CacheManager);\n\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"mappings":"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","names":["CacheManager","clientId","cryptoImpl","_this","currentAccounts","getAccountsFilteredBy","accountValues","Object","keys","map","accountKey","numAccounts","length","allAccounts","value","accountEntity","toObject","AccountEntity","accountInfo","getAccountInfo","idToken","readIdTokenFromCache","idTokenClaims","secret","AuthToken","claims","saveCacheRecord","cacheRecord","ClientAuthError","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","_a","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","currentTokenCache","getCredentialsFilteredBy","credentialType","environment","homeAccountId","realm","tokenType","requestedClaimsHash","currentScopes","ScopeSet","fromString","target","currentAccessTokens","accessTokens","key","removedAccessTokens_1","forEach","tokenEntity","tokenScopeSet","intersectingScopeSets","push","removeCredential","Promise","all","setAccessTokenCredential","accountFilter","getAccountsFilteredByInternal","Constants","EMPTY_STRING","nativeAccountId","allCacheKeys","getKeys","matchingAccounts","cacheKey","entity","getAccount","matchHomeAccountId","matchEnvironment","matchRealm","matchNativeAccountId","filter","getCredentialsFilteredByInternal","familyId","userAssertionHash","keyId","matchingCredentials","idTokens","refreshTokens","credType","CredentialEntity","getCredentialType","NOT_DEFINED","getSpecificCredential","matchUserAssertionHash","matchCredentialType","matchClientId","matchFamilyId","matchTarget","CredentialType","ACCESS_TOKEN_WITH_AUTH_SCHEME","matchTokenType","AuthenticationScheme","SSH","matchKeyId","updatedCacheKey","updateCredentialCacheKey","ID_TOKEN","ACCESS_TOKEN","REFRESH_TOKEN","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","matchingAppMetadata","isAppMetadata","getAppMetadata","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","indexOf","getAuthorityMetadata","aliases","removedAccounts","removeAccount","createNoAccountFoundError","removeAccountContext","removeItem","CacheSchemaType","ACCOUNT","accountId","generateAccountId","removedCredentials","cacheEntity","generateCredentialKey","toLowerCase","POP","accessTokenWithAuthSchemeEntity","kid","removeTokenBindingKey","createBindingKeyNotRemovedError","CREDENTIAL","APP_METADATA","readCacheRecord","request","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","readAccessTokenFromCache","cachedRefreshToken","readRefreshTokenFromCache","cachedAppMetadata","readAppMetadataFromCache","generateAccountCacheKey","readAccountFromCacheWithNativeAccountId","accountCache","accounts","createMultipleMatchingAccountsInCacheError","idTokenFilter","tenantId","credentialCache","numIdTokens","createMultipleMatchingTokensInCacheError","scopes","authScheme","authenticationScheme","BEARER","accessTokenFilter","printScopesLowerCase","sshKid","numAccessTokens","familyRT","id","THE_FAMILY_ID","undefined","refreshTokenFilter","numRefreshTokens","appMetadataFilter","appMetadataEntries","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","cloudMetadata","isNotAccessTokenCredential","entityScopeSet","requestTargetScopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","containsScopeSet","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","generateAuthorityMetadataCacheKey","authority","getIdTokenCredential","getAccessTokenCredential","getRefreshTokenCredential","obj","json","propertyName","__extends","DefaultStorageClass","notImplErr","AuthError","createUnexpectedError"],"sources":["../../src/cache/CacheManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountCache, AccountFilter, CredentialFilter, CredentialCache, ValidCredentialType, AppMetadataFilter, AppMetadataCache } from \"./utils/CacheTypes\";\nimport { CacheRecord } from \"./entities/CacheRecord\";\nimport { CacheSchemaType, CredentialType, Constants, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from \"../utils/Constants\";\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { AccountEntity } from \"./entities/AccountEntity\";\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ICacheManager } from \"./interface/ICacheManager\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/**\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\n */\nexport abstract class CacheManager implements ICacheManager {\n    protected clientId: string;\n    protected cryptoImpl: ICrypto;\n\n    constructor(clientId: string, cryptoImpl: ICrypto) {\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     *  @param accountKey\n     */\n    abstract getAccount(accountKey: string): AccountEntity | null;\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    abstract setAccount(account: AccountEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param idTokenKey\n     */\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param idToken\n     */\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param accessTokenKey\n     */\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param accessToken\n     */\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\n\n    /**\n     * fetch the idToken entity from the platform cache\n     * @param refreshTokenKey\n     */\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\n\n    /**\n     * set idToken entity to the platform cache\n     * @param refreshToken\n     */\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\n\n    /**\n     * fetch cloud discovery metadata entity from the platform cache\n     * @param key\n     */\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\n\n    /**\n     *\n     */\n    abstract getAuthorityMetadataKeys(): Array<string>;\n\n    /**\n     * set cloud discovery metadata entity to the platform cache\n     * @param key\n     * @param value\n     */\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;;\n\n    /**\n     * Function to remove an item from cache given its key.\n     * @param key\n     */\n    abstract removeItem(key: string, type?: string): boolean;\n\n    /**\n     * Function which returns boolean whether cache contains a specific key.\n     * @param key\n     */\n    abstract containsKey(key: string, type?: string): boolean;\n\n    /**\n     * Function which retrieves all current keys from the cache.\n     */\n    abstract getKeys(): string[];\n\n    /**\n     * Function which clears cache.\n     */\n    abstract clear(): Promise<void>;\n\n    /**\n     * Function which updates an outdated credential cache key\n     */\n    abstract updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string;\n\n    /**\n     * Returns all accounts in cache\n     */\n    getAllAccounts(): AccountInfo[] {\n        const currentAccounts: AccountCache = this.getAccountsFilteredBy();\n        const accountValues: AccountEntity[] = Object.keys(currentAccounts).map(accountKey => currentAccounts[accountKey]);\n        const numAccounts = accountValues.length;\n        if (numAccounts < 1) {\n            return [];\n        } else {\n            const allAccounts = accountValues.map<AccountInfo>((value) => {\n                const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), value);\n                const accountInfo = accountEntity.getAccountInfo();\n                const idToken = this.readIdTokenFromCache(this.clientId, accountInfo);\n                if (idToken && !accountInfo.idTokenClaims) {\n                    accountInfo.idToken = idToken.secret;\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n                }\n\n                return accountInfo;\n\n            });\n            return allAccounts;\n        }\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord\n     */\n    async saveCacheRecord(cacheRecord: CacheRecord): Promise<void> {\n        if (!cacheRecord) {\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\n        }\n\n        if (!!cacheRecord.account) {\n            this.setAccount(cacheRecord.account);\n        }\n\n        if (!!cacheRecord.idToken) {\n            this.setIdTokenCredential(cacheRecord.idToken);\n        }\n\n        if (!!cacheRecord.accessToken) {\n            await this.saveAccessToken(cacheRecord.accessToken);\n        }\n\n        if (!!cacheRecord.refreshToken) {\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\n        }\n\n        if (!!cacheRecord.appMetadata) {\n            this.setAppMetadata(cacheRecord.appMetadata);\n        }\n    }\n\n    /**\n     * saves access token credential\n     * @param credential\n     */\n    private async saveAccessToken(credential: AccessTokenEntity): Promise<void> {\n        const currentTokenCache = this.getCredentialsFilteredBy({\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash\n        });\n\n        const currentScopes = ScopeSet.fromString(credential.target);\n        const currentAccessTokens: AccessTokenEntity[] = Object.keys(currentTokenCache.accessTokens).map(key => currentTokenCache.accessTokens[key]);\n\n        if (currentAccessTokens) {\n            const removedAccessTokens: Array<Promise<boolean>> = [];\n            currentAccessTokens.forEach((tokenEntity) => {\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeCredential(tokenEntity));\n                }\n            });\n            await Promise.all(removedAccessTokens);\n        }\n        this.setAccessTokenCredential(credential);\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    getAccountsFilteredBy(accountFilter?: AccountFilter): AccountCache {\n        return this.getAccountsFilteredByInternal(\n            accountFilter ? accountFilter.homeAccountId : Constants.EMPTY_STRING,\n            accountFilter ? accountFilter.environment : Constants.EMPTY_STRING,\n            accountFilter ? accountFilter.realm : Constants.EMPTY_STRING,\n            accountFilter ? accountFilter.nativeAccountId: Constants.EMPTY_STRING,\n        );\n    }\n\n    /**\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\n     * @param homeAccountId\n     * @param environment\n     * @param realm\n     */\n    private getAccountsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        realm?: string,\n        nativeAccountId?: string,\n    ): AccountCache {\n        const allCacheKeys = this.getKeys();\n        const matchingAccounts: AccountCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            if (!!nativeAccountId && !this.matchNativeAccountId(entity, nativeAccountId)) {\n                return;\n            }\n\n            matchingAccounts[cacheKey] = entity;\n        });\n\n        return matchingAccounts;\n    }\n\n    /**\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     */\n    getCredentialsFilteredBy(filter: CredentialFilter): CredentialCache {\n        return this.getCredentialsFilteredByInternal(\n            filter.homeAccountId,\n            filter.environment,\n            filter.credentialType,\n            filter.clientId,\n            filter.familyId,\n            filter.realm,\n            filter.target,\n            filter.userAssertionHash,\n            filter.tokenType,\n            filter.keyId,\n            filter.requestedClaimsHash\n        );\n    }\n\n    /**\n     * Support function to help match credentials\n     * @param homeAccountId\n     * @param environment\n     * @param credentialType\n     * @param clientId\n     * @param realm\n     * @param target\n     * @param userAssertionHash\n     * @param tokenType\n     */\n    private getCredentialsFilteredByInternal(\n        homeAccountId?: string,\n        environment?: string,\n        credentialType?: string,\n        clientId?: string,\n        familyId?: string,\n        realm?: string,\n        target?: string,\n        userAssertionHash?: string,\n        tokenType?: AuthenticationScheme,\n        keyId?: string,\n        requestedClaimsHash?: string\n    ): CredentialCache {\n        const allCacheKeys = this.getKeys();\n        const matchingCredentials: CredentialCache = {\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n        };\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getSpecificCredential(cacheKey, credType);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!userAssertionHash && !this.matchUserAssertionHash(entity, userAssertionHash)) {\n                return;\n            }\n\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!realm && !this.matchRealm(entity, realm)) {\n                return;\n            }\n\n            if (!!credentialType && !this.matchCredentialType(entity, credentialType)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            if (!!familyId && !this.matchFamilyId(entity, familyId)) {\n                return;\n            }\n\n            /*\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\n             */\n            if (!!target && !this.matchTarget(entity, target)) {\n                return;\n            }\n\n            // If request OR cached entity has requested Claims Hash, check if they match\n            if (requestedClaimsHash || entity.requestedClaimsHash) {\n                // Don't match if either is undefined or they are different\n                if (entity.requestedClaimsHash !== requestedClaimsHash) {\n                    return;\n                }\n            }\n\n            // Access Token with Auth Scheme specific matching\n            if (credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n                if(!!tokenType && !this.matchTokenType(entity, tokenType)) {\n                    return;\n                }\n\n                // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n                if (tokenType === AuthenticationScheme.SSH) {\n                    if(keyId && !this.matchKeyId(entity, keyId)) {\n                        return;\n                    }\n                }\n            }\n\n            // At this point, the entity matches the request, update cache key if key schema has changed\n            const updatedCacheKey = this.updateCredentialCacheKey(cacheKey, entity);\n\n            switch (credType) {\n                case CredentialType.ID_TOKEN:\n                    matchingCredentials.idTokens[updatedCacheKey] = entity as IdTokenEntity;\n                    break;\n                case CredentialType.ACCESS_TOKEN:\n                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                    matchingCredentials.accessTokens[updatedCacheKey] = entity as AccessTokenEntity;\n                    break;\n                case CredentialType.REFRESH_TOKEN:\n                    matchingCredentials.refreshTokens[updatedCacheKey] = entity as RefreshTokenEntity;\n                    break;\n            }\n        });\n\n        return matchingCredentials;\n    }\n\n    /**\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\n     * @param filter\n     */\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\n        return this.getAppMetadataFilteredByInternal(\n            filter.environment,\n            filter.clientId,\n        );\n    }\n\n    /**\n     * Support function to help match appMetadata\n     * @param environment\n     * @param clientId\n     */\n    private getAppMetadataFilteredByInternal(\n        environment?: string,\n        clientId?: string\n    ): AppMetadataCache {\n\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata: AppMetadataCache = {};\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\n                return;\n            }\n\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\n                return;\n            }\n\n            matchingAppMetadata[cacheKey] = entity;\n\n        });\n\n        return matchingAppMetadata;\n    }\n\n    /**\n     * retrieve authorityMetadata that contains a matching alias\n     * @param filter\n     */\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n\n            if (!entity) {\n                return;\n            }\n\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n\n            matchedEntity = entity;\n\n        });\n\n        return matchedEntity;\n    }\n\n    /**\n     * Removes all accounts and related tokens from cache.\n     */\n    async removeAllAccounts(): Promise<boolean> {\n        const allCacheKeys = this.getKeys();\n        const removedAccounts: Array<Promise<boolean>> = [];\n\n        allCacheKeys.forEach((cacheKey) => {\n            const entity = this.getAccount(cacheKey);\n            if (!entity) {\n                return;\n            }\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n\n        await Promise.all(removedAccounts);\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given account is removed\n     * @param account\n     */\n    async removeAccount(accountKey: string): Promise<boolean> {\n        const account = this.getAccount(accountKey);\n        if (!account) {\n            throw ClientAuthError.createNoAccountFoundError();\n        }\n        return (await this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));\n    }\n\n    /**\n     * Removes credentials associated with the provided account\n     * @param account\n     */\n    async removeAccountContext(account: AccountEntity): Promise<boolean> {\n        const allCacheKeys = this.getKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials: Array<Promise<boolean>> = [];\n\n        allCacheKeys.forEach((cacheKey) => {\n            // don't parse any non-credential type cache entities\n            const credType = CredentialEntity.getCredentialType(cacheKey);\n            if (credType === Constants.NOT_DEFINED) {\n                return;\n            }\n\n            const cacheEntity = this.getSpecificCredential(cacheKey, credType);\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n                removedCredentials.push(this.removeCredential(cacheEntity));\n            }\n        });\n\n        await Promise.all(removedCredentials);\n        return true;\n    }\n\n    /**\n     * returns a boolean if the given credential is removed\n     * @param credential\n     */\n    async removeCredential(credential: CredentialEntity): Promise<boolean> {\n        const key = credential.generateCredentialKey();\n\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if(credential.tokenType === AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential as AccessTokenEntity;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\n                    }\n                }\n            }\n        }\n\n        return this.removeItem(key, CacheSchemaType.CREDENTIAL);\n    }\n\n    /**\n     * Removes all app metadata objects from cache.\n     */\n    removeAppMetadata(): boolean {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey) => {\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n            }\n        });\n\n        return true;\n    }\n\n    /**\n     * Retrieve the cached credentials into a cacherecord\n     * @param account\n     * @param clientId\n     * @param scopes\n     * @param environment\n     * @param authScheme\n     */\n    readCacheRecord(account: AccountInfo, clientId: string, request: BaseAuthRequest, environment: string): CacheRecord {\n\n        const cachedAccount = this.readAccountFromCache(account);\n        const cachedIdToken = this.readIdTokenFromCache(clientId, account);\n        const cachedAccessToken = this.readAccessTokenFromCache(clientId, account, request);\n        const cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n\n        if (cachedAccount && cachedIdToken) {\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n        }\n\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata,\n        };\n    }\n\n    /**\n     * Retrieve AccountEntity from cache\n     * @param account\n     */\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey);\n    }\n\n    /**\n     * Retrieve AccountEntity from cache\n     * @param nativeAccountId\n     * @returns AccountEntity or Null\n     */\n    readAccountFromCacheWithNativeAccountId(nativeAccountId: string): AccountEntity | null {\n        // fetch account from memory\n        const accountFilter: AccountFilter = {\n            nativeAccountId\n        };\n        const accountCache: AccountCache = this.getAccountsFilteredBy(accountFilter);\n        const accounts = Object.keys(accountCache).map((key) => accountCache[key]);\n\n        if (accounts.length < 1) {\n            return null;\n        } else if (accounts.length > 1) {\n            throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n        }\n\n        return accountCache[0];\n    }\n\n    /**\n     * Retrieve IdTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param inputRealm\n     */\n    readIdTokenFromCache(clientId: string, account: AccountInfo): IdTokenEntity | null {\n        const idTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: clientId,\n            realm: account.tenantId,\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map((key) => credentialCache.idTokens[key]);\n        const numIdTokens = idTokens.length;\n\n        if (numIdTokens < 1) {\n            return null;\n        } else if (numIdTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * Retrieve AccessTokenEntity from cache\n     * @param clientId\n     * @param account\n     * @param scopes\n     * @param authScheme\n     */\n    readAccessTokenFromCache(clientId: string, account: AccountInfo, request: BaseAuthRequest): AccessTokenEntity | null {\n        const scopes =  new ScopeSet(request.scopes || []);\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n        /*\n         * Distinguish between Bearer and PoP/SSH token cache types\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n\n        const accessTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId,\n            realm: account.tenantId,\n            target: scopes.printScopesLowerCase(),\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash,\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n\n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Helper to retrieve the appropriate refresh token from cache\n     * @param clientId\n     * @param account\n     * @param familyRT\n     */\n    readRefreshTokenFromCache(clientId: string, account: AccountInfo, familyRT: boolean): RefreshTokenEntity | null {\n        const id = familyRT ? THE_FAMILY_ID : undefined;\n        const refreshTokenFilter: CredentialFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: CredentialType.REFRESH_TOKEN,\n            clientId: clientId,\n            familyId: id,\n        };\n\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n        const refreshTokens = Object.keys(credentialCache.refreshTokens).map((key) => credentialCache.refreshTokens[key]);\n\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n\n        return refreshTokens[0] as RefreshTokenEntity;\n    }\n\n    /**\n     * Retrieve AppMetadataEntity from cache\n     */\n    readAppMetadataFromCache(environment: string, clientId: string): AppMetadataEntity | null {\n        const appMetadataFilter: AppMetadataFilter = {\n            environment,\n            clientId,\n        };\n\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\n\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n        }\n\n        return appMetadataEntries[0] as AppMetadataEntity;\n    }\n\n    /**\n     * Return the family_id value associated  with FOCI\n     * @param environment\n     * @param clientId\n     */\n    isAppMetadataFOCI(environment: string, clientId: string): boolean {\n        const appMetadata = this.readAppMetadataFromCache(environment, clientId);\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n    }\n\n    /**\n     * helper to match account ids\n     * @param value\n     * @param homeAccountId\n     */\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n    }\n\n    /**\n     * helper to match assertion\n     * @param value\n     * @param oboAssertion\n     */\n    private matchUserAssertionHash(entity: CredentialEntity, userAssertionHash: string): boolean {\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n    }\n\n    /**\n     * helper to match environment\n     * @param value\n     * @param environment\n     */\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * helper to match credential type\n     * @param entity\n     * @param credentialType\n     */\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\n    }\n\n    /**\n     * helper to match client ids\n     * @param entity\n     * @param clientId\n     */\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n\n    /**\n     * helper to match family ids\n     * @param entity\n     * @param familyId\n     */\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n\n    /**\n     * helper to match realm\n     * @param entity\n     * @param realm\n     */\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\n        return !!(entity.realm && realm === entity.realm);\n    }\n\n    /**\n     * helper to match nativeAccountId\n     * @param entity\n     * @param nativeAccountId\n     * @returns boolean indicating the match result\n     */\n    private matchNativeAccountId(entity: AccountEntity, nativeAccountId: string): boolean {\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n    }\n\n    /**\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\n     * @param entity\n     * @param target\n     */\n    private matchTarget(entity: CredentialEntity, target: string): boolean {\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n\n        if ( isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\n        const requestTargetScopeSet: ScopeSet = ScopeSet.fromString(target);\n\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n        } else {\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n    }\n\n    /**\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\n     * @param entity\n     * @param tokenType\n     */\n    private matchTokenType(entity: CredentialEntity, tokenType: AuthenticationScheme): boolean {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n\n    /**\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\n     * @param entity\n     * @param tokenType\n     */\n    private matchKeyId(entity: CredentialEntity, keyId: string): boolean {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n\n    /**\n     * returns if a given cache entity is of the type appmetadata\n     * @param key\n     */\n    private isAppMetadata(key: string): boolean {\n        return key.indexOf(APP_METADATA) !== -1;\n    }\n\n    /**\n     * returns if a given cache entity is of the type authoritymetadata\n     * @param key\n     */\n    protected isAuthorityMetadata(key: string): boolean {\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n\n    /**\n     * returns cache key used for cloud instance metadata\n     */\n    generateAuthorityMetadataCacheKey(authority: string): string {\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n\n    /**\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\n     * @param key\n     * @param credType\n     */\n    private getSpecificCredential(key: string, credType: string): ValidCredentialType | null {\n        switch (credType) {\n            case CredentialType.ID_TOKEN: {\n                return this.getIdTokenCredential(key);\n            }\n            case CredentialType.ACCESS_TOKEN:\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\n                return this.getAccessTokenCredential(key);\n            }\n            case CredentialType.REFRESH_TOKEN: {\n                return this.getRefreshTokenCredential(key);\n            }\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Helper to convert serialized data to object\n     * @param obj\n     * @param json\n     */\n    static toObject<T>(obj: T, json: object): T {\n        for (const propertyName in json) {\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n\nexport class DefaultStorageClass extends CacheManager {\n    setAccount(): void {\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccount(): AccountEntity {\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setIdTokenCredential(): void {\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getIdTokenCredential(): IdTokenEntity {\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAccessTokenCredential(): void {\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAccessTokenCredential(): AccessTokenEntity {\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setRefreshTokenCredential(): void {\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getRefreshTokenCredential(): RefreshTokenEntity {\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAppMetadata(): void {\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAppMetadata(): AppMetadataEntity {\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setServerTelemetry(): void {\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getServerTelemetry(): ServerTelemetryEntity {\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setAuthorityMetadata(): void {\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getAuthorityMetadataKeys(): Array<string> {\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    setThrottlingCache(): void {\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getThrottlingCache(): ThrottlingEntity {\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    removeItem(): boolean {\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    containsKey(): boolean {\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    getKeys(): string[] {\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    async clear(): Promise<void> {\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n    updateCredentialCacheKey(): string {\n        const notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}