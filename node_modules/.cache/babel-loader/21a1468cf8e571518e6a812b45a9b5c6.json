{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar KeyLocation;\n\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\n\nvar PopTokenGenerator =\n/** @class */\nfunction () {\n  function PopTokenGenerator(cryptoUtils) {\n    this.cryptoUtils = cryptoUtils;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqCnf, reqCnfString, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.generateKid(request)];\n\n          case 1:\n            reqCnf = _b.sent();\n            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n            _a = {\n              kid: reqCnf.kid,\n              reqCnfString: reqCnfString\n            };\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(reqCnfString)];\n\n          case 2:\n            return [2\n            /*return*/\n            , (_a.reqCnfHash = _b.sent(), _a)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.generateKid = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoUtils.getPublicKeyThumbprint(request)];\n\n          case 1:\n            kidThumbprint = _a.sent();\n            return [2\n            /*return*/\n            , {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.signPayload(accessToken, keyId, request)];\n      });\n    });\n  };\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n\n\n  PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            return [4\n            /*yield*/\n            , this.cryptoUtils.signJwt(__assign({\n              at: payload,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, claims), keyId, request.correlationId)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return PopTokenGenerator;\n}();\n\nexport { PopTokenGenerator };","map":{"version":3,"mappings":"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","names":["KeyLocation","cryptoUtils","PopTokenGenerator","generateCnf","request","generateKid","reqCnf","_b","reqCnfString","base64Encode","JSON","stringify","kid","hashString","_a","getPublicKeyThumbprint","kidThumbprint","xms_ksl","SW","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","__assign","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims","correlationId"],"sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n    reqCnfHash: string;\n};\n\nenum KeyLocation {\n    SW = \"sw\",\n    UHW = \"uhw\"\n}\n\nexport class PopTokenGenerator {\n\n    private cryptoUtils: ICrypto;\n\n    constructor(cryptoUtils: ICrypto) {\n        this.cryptoUtils = cryptoUtils;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\n        const reqCnf = await this.generateKid(request);\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString, \n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\n\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\n\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt({\n            at: payload,\n            ts: TimeUtils.nowSeconds(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, request.correlationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}