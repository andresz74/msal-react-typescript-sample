{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\n\nvar TimeUtils =\n/** @class */\nfunction () {\n  function TimeUtils() {}\n  /**\r\n   * return the current time in Unix time (seconds).\r\n   */\n\n\n  TimeUtils.nowSeconds = function () {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  };\n  /**\r\n   * check if a token is expired based on given UTC time in seconds.\r\n   * @param expiresOn\r\n   */\n\n\n  TimeUtils.isTokenExpired = function (expiresOn, offset) {\n    // check for access token expiry\n    var expirationSec = Number(expiresOn) || 0;\n    var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset; // If current time + offset is greater than token expiration time, then token is expired.\n\n    return offsetCurrentTimeSec > expirationSec;\n  };\n  /**\r\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n   * i.e. The system clock was turned back after acquiring the cached token\r\n   * @param cachedAt\r\n   * @param offset\r\n   */\n\n\n  TimeUtils.wasClockTurnedBack = function (cachedAt) {\n    var cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  };\n  /**\r\n   * Waits for t number of milliseconds\r\n   * @param t number\r\n   * @param value T\r\n   */\n\n\n  TimeUtils.delay = function (t, value) {\n    return new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(value);\n      }, t);\n    });\n  };\n\n  return TimeUtils;\n}();\n\nexport { TimeUtils };","map":{"version":3,"mappings":";;AAAA;;;AAGG;;AAEH;;AAEG;;AACH;AAAA;AAAA;EAAA,sBA2CC;EAzCG;;AAEG;;;EACIA,uBAAP;;IAEI,OAAOC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,MAAlC,CAAP;EACH,CAHM;EAKP;;;AAGG;;;EACIJ,2BAAP,UAAsBK,SAAtB,EAAyCC,MAAzC,EAAuD;;IAEnD,IAAMC,aAAa,GAAGC,MAAM,CAACH,SAAD,CAAN,IAAqB,CAA3C;IACA,IAAMI,oBAAoB,GAAGT,SAAS,CAACU,UAAV,KAAyBJ,MAAtD,CAHmD;;IAMnD,OAAQG,oBAAoB,GAAGF,aAA/B;EACH,CAPM;EASP;;;;;AAKG;;;EACIP,SAAkB,mBAAlB,GAAP,UAA0BW,QAA1B,EAA0C;IACtC,IAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAD,CAA1B;IAEA,OAAOC,WAAW,GAAGZ,SAAS,CAACU,UAAV,EAArB;EACH,CAJM;EAMP;;;;AAIG;;;EACIV,kBAAP,UAAgBa,CAAhB,EAA2BC,KAA3B,EAAoC;IAChC,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;MAAA,iBAAU,CAAC,YAAM;QAAA,cAAO,CAACF,KAAD,CAAP;MAAc,CAArB,EAAuBD,CAAvB,CAAV;IAAmC,CAA5D,CAAP;EACH,CAFM;;EAGX,OAACb,SAAD;AAAC,CA3CD","names":["TimeUtils","Math","round","Date","getTime","expiresOn","offset","expirationSec","Number","offsetCurrentTimeSec","nowSeconds","cachedAt","cachedAtSec","t","value","Promise","resolve"],"sources":["../../src/utils/TimeUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nexport class TimeUtils {\n\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds(): number {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n    \n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return (offsetCurrentTimeSec > expirationSec);\n    }\n\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt \n     * @param offset \n     */\n    static wasClockTurnedBack(cachedAt: string): boolean {\n        const cachedAtSec = Number(cachedAt);\n\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay<T>(t: number, value?: T): Promise<T | void> {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}