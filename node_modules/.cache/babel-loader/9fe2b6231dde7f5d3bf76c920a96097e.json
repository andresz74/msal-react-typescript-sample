{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\n\nvar AuthorizationCodeClient =\n/** @class */\nfunction (_super) {\n  __extends(AuthorizationCodeClient, _super);\n\n  function AuthorizationCodeClient(configuration) {\n    var _this = _super.call(this, configuration) || this; // Flag to indicate if client is for hybrid spa auth code redemption\n\n\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.createAuthCodeUrlQueryString(request)];\n\n          case 1:\n            queryString = _a.sent();\n            return [2\n            /*return*/\n            , UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n\n\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null); // Deserialize hash fragment response parameters.\n\n    var hashUrlString = new UrlString(hashFragment); // Deserialize hash fragment response parameters.\n\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash()); // Get code response\n\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils); // throw when there is no auth code in the response\n\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n\n    var queryString = this.createLogoutUrlQueryString(logoutRequest); // Construct logout URI\n\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            } // Add scope array, parameter builder will add default scopes and dedupe\n\n\n            parameterBuilder.addScopes(request.scopes); // add code: user set, not validated\n\n            parameterBuilder.addAuthorizationCode(request.code); // Add library metadata\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            } // add code_verifier if passed\n\n\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _b.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _b.label = 3;\n\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            ccsCred = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            } // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n\n\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            } // Add hybrid spa parameters if not already provided\n\n\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_a = {}, _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _a));\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes); // validate the redirectUri (to be a non null value)\n\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId); // add response_mode. If not passed in it defaults to query.\n\n            parameterBuilder.addResponseMode(request.responseMode); // add response_type = code\n\n            parameterBuilder.addResponseTypeCode(); // add library info parameters\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application); // add client_info=1\n\n            parameterBuilder.addClientInfo();\n\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            } // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n\n\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account); // If login_hint claim is present, use it over sid/username\n\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n\n            if (!request.nativeBroker) return [3\n            /*break*/\n            , 2]; // signal ests that this is a WAM call\n\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _a.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n\n\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n\n  return AuthorizationCodeClient;\n}(BaseClient);\n\nexport { AuthorizationCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_this","AuthorizationCodeClient","getAuthCodeUrl","request","createAuthCodeUrlQueryString","queryString","_a","UrlString","appendQueryString","authority","authorizationEndpoint","authCodePayload","logger","info","StringUtils","isEmpty","code","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","response","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","ccsCredential","undefined","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","verbose","headers","createTokenRequestHeaders","endpoint","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","includeRedirectUri","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","_b","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","correlationId","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","requestScopes","__spreadArrays","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","extraQueryParameters","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint","BaseClient"],"sources":["../../src/client/AuthorizationCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys } from \"../utils/Constants\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlString } from \"../url/UrlString\";\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { AccountInfo } from \"../account/AccountInfo\";\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { RequestValidator } from \"../request/RequestValidator\";\n\n/**\n * Oauth2.0 Authorization Code client\n */\nexport class AuthorizationCodeClient extends BaseClient {\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    protected includeRedirectUri: boolean = true;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\n     * application. The URL target the /authorize endpoint of the authority configured in the\n     * application object.\n     *\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\n     * acquireToken(AuthorizationCodeRequest)\n     * @param request\n     */\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const queryString = await this.createAuthCodeUrlQueryString(request);\n\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n\n    /**\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\n     * authorization_code_grant\n     * @param request\n     */\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\n        this.logger.info(\"in acquireToken call\");\n        if (!request || StringUtils.isEmpty(request.code)) {\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\n        }\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload);\n    }\n\n    /**\n     * Handles the hash fragment response from public client code request. Returns a code response used by\n     * the client to exchange for a token in acquireToken.\n     * @param hashFragment\n     */\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\n        // Handle responses.\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n\n        // Deserialize hash fragment response parameters.\n        const hashUrlString = new UrlString(hashFragment);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\n\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\n        }\n        return {\n            ...serverParams,\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n            code: serverParams.code\n        };\n    }\n\n    /**\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param authorityUri\n     */\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n\n        // Construct logout URI\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        let ccsCredential: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\n\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        /*\n         * For hybrid spa flow, there will be a code but no verifier\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\n         */\n        if (!this.includeRedirectUri) {\n            // Just validate\n            RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes);\n\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if(request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        let ccsCred: CcsCredential | undefined = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\n     * @param request\n     */\n    private async createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): Promise<string> {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\n        parameterBuilder.addScopes(requestScopes);\n\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                    /*\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\n                     * SessionId is only used in silent calls\n                     */\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            }\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * This API validates the `EndSessionRequest` and creates a URL\n     * @param request\n     */\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n\n        if(request.state) {\n            parameterBuilder.addState(request.state);\n        }\n\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\n     * @param account\n     */\n    private extractAccountSid(account: AccountInfo): string | null {\n        return account.idTokenClaims?.sid || null;\n    }\n\n    private extractLoginHint(account: AccountInfo): string | null {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}