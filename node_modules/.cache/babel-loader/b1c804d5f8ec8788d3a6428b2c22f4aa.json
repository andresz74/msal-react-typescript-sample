{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\n\nvar AuthenticationHeaderParser =\n/** @class */\nfunction () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    } // Attempt to parse nonce from WWW-Authenticate\n\n\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    } // If neither header is present, throw missing headers error\n\n\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n\n\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n          key = _a[0],\n          value = _a[1]; // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n\n\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n\n  return AuthenticationHeaderParser;\n}();\n\nexport { AuthenticationHeaderParser };","map":{"version":3,"mappings":";;;;;AAAA;;;AAGG;;AAaH;;;AAGG;;AACH;AAAA;AAAA;EAGI,oCAAYA,OAAZ,EAA2C;IACvC,KAAKA,OAAL,GAAeA,OAAf;EACH;EAED;;;AAGG;;;EACHC;;IAEI,IAAMC,kBAAkB,GAAG,KAAKF,OAAL,CAAaG,WAAW,CAACC,kBAAzB,CAA3B;;IACA,IAAIF,kBAAJ,EAAwB;MACpB,IAAMG,4BAA4B,GAAG,KAAKC,eAAL,CAAmDJ,kBAAnD,CAArC;;MACA,IAAIG,4BAA4B,CAACE,SAAjC,EAA4C;QACxC,OAAOF,4BAA4B,CAACE,SAApC;MACH;;MACD,MAAMC,wBAAwB,CAACC,sCAAzB,CAAgEN,WAAW,CAACC,kBAA5E,EAAgG,iCAAhG,CAAN;IACH,CATL;;;IAYI,IAAMM,eAAe,GAAG,KAAKV,OAAL,CAAaG,WAAW,CAACQ,eAAzB,CAAxB;;IACA,IAAID,eAAJ,EAAqB;MACjB,IAAME,yBAAyB,GAAG,KAAKN,eAAL,CAAgDI,eAAhD,CAAlC;;MACA,IAAIE,yBAAyB,CAACC,KAA9B,EAAoC;QAChC,OAAOD,yBAAyB,CAACC,KAAjC;MACH;;MACD,MAAML,wBAAwB,CAACC,sCAAzB,CAAgEN,WAAW,CAACQ,eAA5E,EAA6F,6BAA7F,CAAN;IACH,CAnBL;;;IAsBI,MAAMH,wBAAwB,CAACM,4CAAzB,EAAN;EACH,CAvBD;EAyBA;;;;AAIG;;;EACKb,0BAAe,UAAf,CAAeK,eAAf,GAAR,UAA2BS,MAA3B,EAAyC;IACrC,IAAMC,eAAe,GAAGD,MAAM,CAACE,OAAP,CAAe,GAAf,CAAxB;IACA,IAAMC,UAAU,GAAGH,MAAM,CAACI,MAAP,CAAcH,eAAe,GAAG,CAAhC,EAAmCI,KAAnC,CAAyC,GAAzC,CAAnB;IACA,IAAMC,YAAY,GAAG,EAArB;IAEAH,UAAU,CAACI,OAAX,CAAmB,UAACC,SAAD,EAAkB;MAC3B,MAAiB,YAAS,CAACH,KAAV,CAAgB,GAAhB,CAAjB;MAAA,IAAEI,GAAG,QAAL;MAAA,IAAOC,KAAK,QAAZ,CAD2B;;;MAGjCJ,YAAY,CAACG,GAAD,CAAZ,GAAoBE,QAAQ,CAACD,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwBC,SAAS,CAACC,YAAlC,CAAD,CAA5B;IACH,CAJD;IAMA,OAAOR,YAAP;EACH,CAZO;;EAaZ,OAACpB,0BAAD;AAAC,CAtDD","names":["headers","AuthenticationHeaderParser","authenticationInfo","HeaderNames","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","ClientConfigurationError","createInvalidAuthenticationHeaderError","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","createMissingNonceAuthenticationHeadersError","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","key","value","unescape","replace","Constants","EMPTY_STRING"],"sources":["../../src/request/AuthenticationHeaderParser.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string,\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns \n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges = this.parseChallenges<AuthenticationInfoChallenges>(authenticationInfo);\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges = this.parseChallenges<WWWAuthenticateChallenges>(wwwAuthenticate);     \n            if (wwwAuthenticateChallenges.nonce){\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n        }\n\n        // If neither header is present, throw missing headers error\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header \n     * @returns \n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [ key, value ] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n        });\n\n        return challengeMap;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}