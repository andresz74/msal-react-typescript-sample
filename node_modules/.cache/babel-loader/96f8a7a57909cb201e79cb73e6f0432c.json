{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserPerformanceClient, _super);\n\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n\n    _this.browserCrypto = new BrowserCrypto(_this.logger);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n\n\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this; // Capture page visibilityState and then invoke start/end measurement\n\n\n    var startPageVisibility = this.getPageVisibility();\n\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        return inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n      }\n    });\n  };\n\n  return BrowserPerformanceClient;\n}(PerformanceClient);\n\nexport { BrowserPerformanceClient };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;EAU8CA;;EAI1C,kCAAYC,QAAZ,EAA8BC,SAA9B,EAAiDC,MAAjD,EAAiEC,WAAjE,EAAsFC,cAAtF,EAA8GC,oBAA9G,EAAwJ;IAAxJ,YACIC,kBAAMN,QAAN,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,WAAnC,EAAgDC,cAAhD,EAAgEC,oBAAhE,KAAqF,IADzF;;IAEIE,KAAI,CAACC,aAAL,GAAqB,IAAIC,aAAJ,CAAkBF,KAAI,CAACL,MAAvB,CAArB;IACAK,KAAI,CAACG,aAAL,GAAqB,IAAIC,aAAJ,CAAkBJ,KAAI,CAACC,aAAvB,CAArB;;EACH;;EAEDI,4EAA6BC,WAA7B,EAAkDC,aAAlD,EAAuE;IACnE,OAAO,IAAIC,6BAAJ,CAAkCF,WAAlC,EAA+CC,aAA/C,CAAP;EACH,CAFD;;EAIAF;IACI,OAAO,KAAKF,aAAL,CAAmBM,YAAnB,EAAP;EACH,CAFD;;EAIQJ,uDAAR;;;IACI,OAAO,eAAQ,CAACK,eAAT,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,QAAF,EAAxB,KAAwC,IAA/C;EACH,CAFO;;;;;;;;;;;EAYRP,gEAAiBC,WAAjB,EAAiDC,aAAjD,EAAuE;IAAvE,iBAAuE;;;IAEnE,IAAMM,mBAAmB,GAAG,KAAKC,iBAAL,EAA5B;;IAEA,IAAMC,eAAe,GAAGhB,iBAAMiB,gBAAN,CAAsBC,IAAtB,CAAsB,IAAtB,EAAuBX,WAAvB,EAAoCC,aAApC,CAAxB;;IAEA,6BACOQ,eADP,GACsB;MAClBG,cAAc,EAAE,UAACC,KAAD,EAAkC;QAC9C,OAAOJ,eAAe,CAACG,cAAhB,CAA8BE;UACjCP,mBAAmB,qBADc;UAEjCQ,iBAAiB,EAAErB,KAAI,CAACc,iBAAL;QAFc,GAG9BK,KAH8B,CAA9B,CAAP;MAKH;IAPiB,CADtB;EAUH,CAhBD;;EAiBJ;AA/CA,EAA8CG","names":["__extends","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","_super","_this","browserCrypto","BrowserCrypto","guidGenerator","GuidGenerator","BrowserPerformanceClient","measureName","correlationId","BrowserPerformanceMeasurement","generateGuid","visibilityState","_a","toString","startPageVisibility","getPageVisibility","inProgressEvent","startMeasurement","call","endMeasurement","event","__assign","endPageVisibility","PerformanceClient"],"sources":["../../src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, PerformanceEvent, PerformanceEvents, IPerformanceClient, PerformanceClient, IPerformanceMeasurement, InProgressPerformanceEvent, ApplicationTelemetry } from \"@azure/msal-common\";\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\n\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    \n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    }\n    \n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n\n    generateId() : string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n    \n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n        \n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\n\n        return {\n            ...inProgressEvent,\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                return inProgressEvent.endMeasurement({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event\n                });\n            }\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}