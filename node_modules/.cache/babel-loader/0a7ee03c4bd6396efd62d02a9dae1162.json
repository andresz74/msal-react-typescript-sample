{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient =\n/** @class */\nfunction (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient);\n\nexport { UsernamePasswordClient };","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;;AAGG;;AAiBH;;;AAGG;;AACH;AAAA;AAAA;EAA4CA,SAAU,gCAAV;;EAExC,gCAAYC,aAAZ,EAA8C;IAC1C,yBAAMA,aAAN,KAAoB,IAApB;EACH;EAED;;;;AAIG;;;EACGC,sBAAY,UAAZ,CAAYC,YAAZ,GAAN,UAAmBC,OAAnB,EAAyD;;;;;;YACrD,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,sBAAjB;YAEMC,YAAY,GAAGC,SAAS,CAACC,UAAV,EAAf;YACW,OAAM;YAAA;YAAA,OAAKC,mBAAL,CAAyB,KAAKC,SAA9B,EAAyCP,OAAzC,EAAN;;;YAAXQ,QAAQ,GAAGC,EAAuD,KAAvD,EAAX;YAEAC,eAAe,GAAG,IAAIC,eAAJ,CACpB,KAAKC,MAAL,CAAYC,WAAZ,CAAwBC,QADJ,EAEpB,KAAKC,YAFe,EAGpB,KAAKC,WAHe,EAIpB,KAAKf,MAJe,EAKpB,KAAKW,MAAL,CAAYK,iBALQ,EAMpB,KAAKL,MAAL,CAAYM,iBANQ,CAAlB;;YAUNR,eAAe,CAACS,qBAAhB,CAAsCX,QAAQ,CAACY,IAA/C;YACMC,aAAa,GAAGX,eAAe,CAACY,yBAAhB,CAA0Cd,QAAQ,CAACY,IAAnD,EAAyD,KAAKb,SAA9D,EAAyEJ,YAAzE,EAAuFH,OAAvF,CAAhB;YAEN;YAAA;YAAA,EAAOqB,aAAP;;;;EACH,CApBK;EAsBN;;;;AAIG;;;EACWvB,uDAAd,UAAkCS,SAAlC,EAAwDP,OAAxD,EAA8F;;;;QACpFuB,UAAU,GAAsB;UAClCT,QAAQ,EAAE,KAAKF,MAAL,CAAYC,WAAZ,CAAwBC,QADA;UAElCP,SAAS,EAAEA,SAAS,CAACiB,kBAFa;UAGlCC,MAAM,EAAEzB,OAAO,CAACyB,MAHkB;UAIlCC,MAAM,EAAE1B,OAAO,CAAC0B,MAJkB;UAKlCC,oBAAoB,EAAE3B,OAAO,CAAC2B,oBALI;UAMlCC,qBAAqB,EAAE5B,OAAO,CAAC4B,qBANG;UAOlCC,kBAAkB,EAAE7B,OAAO,CAAC6B,kBAPM;UAQlCC,SAAS,EAAE9B,OAAO,CAAC8B,SARe;UASlCC,MAAM,EAAE/B,OAAO,CAAC+B;QATkB,CAAhC;QAWAC,WAAW,GAAG,KAAKC,sBAAL,CAA4BjC,OAA5B,CAAd;QACAkC,OAAO,GAA2B,KAAKC,yBAAL,CAA+B;UACnEC,UAAU,EAAEpC,OAAO,CAACqC,QAD+C;UAEnEC,IAAI,EAAEC,iBAAiB,CAACC;QAF2C,CAA/B,CAAlC;QAKN;QAAA;QAAA,EAAO,KAAKC,0BAAL,CAAgClC,SAAS,CAACmC,aAA1C,EAAyDV,WAAzD,EAAsEE,OAAtE,EAA+EX,UAA/E,CAAP;;;EACH,CAnBa;EAqBd;;;AAGG;;;EACKzB,sBAAsB,UAAtB,CAAsBmC,sBAAtB,GAAR,UAA+BjC,OAA/B,EAAqE;IACjE,IAAM2C,gBAAgB,GAAG,IAAIC,uBAAJ,EAAzB;IAEAD,gBAAgB,CAACE,WAAjB,CAA6B,KAAKjC,MAAL,CAAYC,WAAZ,CAAwBC,QAArD;IACA6B,gBAAgB,CAACG,WAAjB,CAA6B9C,OAAO,CAACqC,QAArC;IACAM,gBAAgB,CAACI,WAAjB,CAA6B/C,OAAO,CAACgD,QAArC;IAEAL,gBAAgB,CAACM,SAAjB,CAA2BjD,OAAO,CAACyB,MAAnC;IAEAkB,gBAAgB,CAACO,iCAAjB;IAEAP,gBAAgB,CAACQ,YAAjB,CAA8BC,SAAS,CAACC,6BAAxC;IACAV,gBAAgB,CAACW,aAAjB;IAEAX,gBAAgB,CAACY,cAAjB,CAAgC,KAAK3C,MAAL,CAAY4C,WAA5C;IACAb,gBAAgB,CAACc,uBAAjB,CAAyC,KAAK7C,MAAL,CAAY8C,SAAZ,CAAsBC,WAA/D;IACAhB,gBAAgB,CAACiB,aAAjB;;IAEA,IAAI,KAAKC,sBAAT,EAAiC;MAC7BlB,gBAAgB,CAACmB,kBAAjB,CAAoC,KAAKD,sBAAzC;IACH;;IAED,IAAME,aAAa,GAAG/D,OAAO,CAAC+D,aAAR,IAAyB,KAAKnD,MAAL,CAAYoD,eAAZ,CAA4BC,aAA5B,EAA/C;IACAtB,gBAAgB,CAACuB,gBAAjB,CAAkCH,aAAlC;;IAEA,IAAI,KAAKnD,MAAL,CAAYuD,iBAAZ,CAA8BC,YAAlC,EAAgD;MAC5CzB,gBAAgB,CAAC0B,eAAjB,CAAiC,KAAKzD,MAAL,CAAYuD,iBAAZ,CAA8BC,YAA/D;IACH;;IAED,IAAI,KAAKxD,MAAL,CAAYuD,iBAAZ,CAA8BG,eAAlC,EAAmD;MAC/C,IAAMA,eAAe,GAAG,KAAK1D,MAAL,CAAYuD,iBAAZ,CAA8BG,eAAtD;MACA3B,gBAAgB,CAAC4B,kBAAjB,CAAoCD,eAAe,CAACE,SAApD;MACA7B,gBAAgB,CAAC8B,sBAAjB,CAAwCH,eAAe,CAACI,aAAxD;IACH;;IAED,IAAI,CAACC,WAAW,CAACC,UAAZ,CAAuB5E,OAAO,CAAC0B,MAA/B,CAAD,IAA2C,KAAKd,MAAL,CAAYC,WAAZ,CAAwBgE,kBAAxB,IAA8C,KAAKjE,MAAL,CAAYC,WAAZ,CAAwBgE,kBAAxB,CAA2CC,MAA3C,GAAoD,CAAjJ,EAAoJ;MAChJnC,gBAAgB,CAACoC,SAAjB,CAA2B/E,OAAO,CAAC0B,MAAnC,EAA2C,KAAKd,MAAL,CAAYC,WAAZ,CAAwBgE,kBAAnE;IACH;;IAED,IAAI,KAAKjE,MAAL,CAAYoE,aAAZ,CAA0BC,oBAA1B,IAAkDjF,OAAO,CAACqC,QAA9D,EAAwE;MACpEM,gBAAgB,CAACuC,SAAjB,CAA2BlF,OAAO,CAACqC,QAAnC;IACH;;IAED,OAAOM,gBAAgB,CAACwC,iBAAjB,EAAP;EACH,CA5CO;;EA6CZ,OAACrF,sBAAD;AA5GA,EAA4CsF,UAA5C","names":["__extends","configuration","UsernamePasswordClient","acquireToken","request","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["../../src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseClient } from \"./BaseClient\";\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { Authority } from \"../authority/Authority\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType } from \"../utils/Constants\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\n\n/**\n * Oauth2.0 Password grant client\n * Note: We are only supporting public clients for password grant and for purely testing purposes\n */\nexport class UsernamePasswordClient extends BaseClient {\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\n     * password_grant\n     * @param request\n     */\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\n        this.logger.info(\"in acquireToken call\");\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n\n        return tokenResponse;\n    }\n\n    /**\n     * Executes POST request to token endpoint\n     * @param authority\n     * @param request\n     */\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\n            credential: request.username,\n            type: CcsCredentialType.UPN\n        });\n\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n    }\n\n    /**\n     * Generates a map for all the params to be sent to the service\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\n\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\n            parameterBuilder.addCcsUpn(request.username);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}