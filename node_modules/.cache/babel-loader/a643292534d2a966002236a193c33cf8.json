{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserProtocolUtils =\n/** @class */\nfunction () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n\n\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n\n\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n\n  return BrowserProtocolUtils;\n}();\n\nexport { BrowserProtocolUtils };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;EAYA,iCAgCC;;;;;;;;EAzBUA,kDAAP,UAAkCC,aAAlC,EAA0DC,KAA1D,EAAuE;IACnE,IAAIC,WAAW,CAACC,OAAZ,CAAoBF,KAApB,CAAJ,EAAgC;MAC5B,OAAO,IAAP;IACH;;IAED,IAAI;MACA,IAAMG,eAAe,GAAuBC,aAAa,CAACC,iBAAd,CAAgCN,aAAhC,EAA+CC,KAA/C,CAA5C;MACA,OAAOG,eAAe,CAACG,YAAhB,CAA6BC,IAApC;IACH,CAHD,CAGE,OAAOC,CAAP,EAAU;MACR,MAAMC,eAAe,CAACC,uBAAhB,CAAwCV,KAAxC,EAA+CQ,CAA/C,CAAN;IACH;EACJ,CAXM;;;;;;;EAiBAV,mDAAP,UAAmCa,YAAnC,EAAuD;IACnD,IAAI,CAACA,YAAL,EAAmB;MACf,OAAO,EAAP;IACH;;IAED,IAAMC,aAAa,GAAG,IAAIC,SAAJ,CAAcF,YAAd,CAAtB;IACA,OAAOE,SAAS,CAACC,mBAAV,CAA8BF,aAAa,CAACG,OAAd,EAA9B,CAAP;EACH,CAPM;;EAQX;AAAC","names":["BrowserProtocolUtils","browserCrypto","state","StringUtils","isEmpty","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta","e","ClientAuthError","createInvalidStateError","locationHash","hashUrlString","UrlString","getDeserializedHash","getHash"],"sources":["../../src/utils/BrowserProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType\n};\n\nexport class BrowserProtocolUtils {\n\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto \n     * @param state \n     */\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\n        if (StringUtils.isEmpty(state)) {\n            return null;\n        }\n\n        try {\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta as BrowserStateObject;\n        } catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e);\n        }\n    }\n\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\n        if (!locationHash) {\n            return {};\n        }\n        \n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n"]},"metadata":{},"sourceType":"module"}