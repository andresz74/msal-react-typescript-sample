{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator, __spread, __assign } from '../_virtual/_tslib.js';\nimport { AccountEntity, AuthenticationScheme, ClientConfigurationError, StringUtils, UrlString, ServerTelemetryManager, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BaseInteractionClient =\n/** @class */\nfunction () {\n  function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n\n  BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!account) return [3\n            /*break*/\n            , 5];\n\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n              this.logger.verbose(\"Setting active account to null\");\n              this.browserStorage.setActiveAccount(null);\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];\n\n          case 2:\n            _a.sent();\n\n            this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [3\n            /*break*/\n            , 9];\n\n          case 5:\n            _a.trys.push([5, 8,, 9]);\n\n            this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId); // Clear all accounts and tokens\n\n            return [4\n            /*yield*/\n            , this.browserStorage.clear()];\n\n          case 6:\n            // Clear all accounts and tokens\n            _a.sent(); // Clear any stray keys from IndexedDB\n\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.clearKeystore()];\n\n          case 7:\n            // Clear any stray keys from IndexedDB\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            _a.sent();\n\n            this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeBaseRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authority, scopes, validatedRequest, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.verbose(\"Initializing BaseAuthRequest\");\n            authority = request.authority || this.config.auth.authority;\n            scopes = __spread(request && request.scopes || []);\n            validatedRequest = __assign(__assign({}, request), {\n              correlationId: this.correlationId,\n              authority: authority,\n              scopes: scopes\n            }); // Set authenticationScheme to BEARER if not explicitly set in the request\n\n            if (!validatedRequest.authenticationScheme) {\n              validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n              this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n            } else {\n              if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                  throw ClientConfigurationError.createMissingSshJwkError();\n                }\n\n                if (!request.sshKid) {\n                  throw ClientConfigurationError.createMissingSshKidError();\n                }\n              }\n\n              this.logger.verbose(\"Authentication Scheme set to \\\"\" + validatedRequest.authenticationScheme + \"\\\" as configured in Auth request\");\n            }\n\n            if (!(request.claims && !StringUtils.isEmpty(request.claims))) return [3\n            /*break*/\n            , 2];\n            _a = validatedRequest;\n            return [4\n            /*yield*/\n            , this.browserCrypto.hashString(request.claims)];\n\n          case 1:\n            _a.requestedClaimsHash = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , validatedRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n\n\n  BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  };\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n\n\n  BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    var telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n\n\n  BaseInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getDiscoveredAuthority called\");\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata\n            };\n            if (!requestAuthority) return [3\n            /*break*/\n            , 2];\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            this.logger.verbose(\"Creating discovered authority with configured authority\");\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return BaseInteractionClient;\n}();\n\nexport { BaseInteractionClient };","map":{"version":3,"mappings":"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","names":["config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","BrowserConstants","MSAL_SKU","version","BaseInteractionClient","account","AccountEntity","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","_a","error","clear","clearKeystore","request","authority","auth","scopes","validatedRequest","authenticationScheme","AuthenticationScheme","BEARER","SSH","sshJwk","ClientConfigurationError","createMissingSshJwkError","sshKid","createMissingSshKidError","claims","StringUtils","isEmpty","hashString","requestedClaimsHash","_b","requestRedirectUri","redirectUri","BrowserUtils","getCurrentUri","UrlString","getAbsoluteUrl","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","ServerTelemetryManager","requestAuthority","authorityOptions","protocolMode","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","AuthorityFactory","createDiscoveredInstance"],"sources":["../../src/interaction_client/BaseInteractionClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, INetworkModule, Logger, AuthenticationResult, AccountInfo, AccountEntity, BaseAuthRequest, AuthenticationScheme, UrlString, ServerTelemetryManager, ServerTelemetryRequest, ClientConfigurationError, StringUtils, Authority, AuthorityOptions, AuthorityFactory, IPerformanceClient } from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\n\nexport abstract class BaseInteractionClient {\n\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected navigationClient: INavigationClient;\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\n    protected correlationId: string;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n        this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n        this.performanceClient = performanceClient;\n    }\n\n    abstract acquireToken(request: RedirectRequest|PopupRequest|SsoSilentRequest): Promise<AuthenticationResult|void>;\n\n    abstract logout(request: EndSessionRequest): Promise<void>;\n\n    protected async clearCacheOnLogout(account?: AccountInfo| null): Promise<void> {\n        if (account) {\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            } catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        } else {\n            try {\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch(e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n\n    /**\n     * Initializer function for all request APIs\n     * @param request\n     */\n    protected async initializeBaseRequest(request: Partial<BaseAuthRequest>): Promise<BaseAuthRequest> {\n        this.logger.verbose(\"Initializing BaseAuthRequest\");\n        const authority = request.authority || this.config.auth.authority;\n\n        const scopes = [...((request && request.scopes) || [])];\n\n        const validatedRequest: BaseAuthRequest = {\n            ...request,\n            correlationId: this.correlationId,\n            authority,\n            scopes\n        };\n\n        // Set authenticationScheme to BEARER if not explicitly set in the request\n        if (!validatedRequest.authenticationScheme) {\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n            this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n        } else {\n            if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                    throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if(!request.sshKid) {\n                    throw ClientConfigurationError.createMissingSshKidError();\n                }\n            }\n            this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n        }\n\n        // Set requested claims hash if claims were requested\n        if (request.claims && !StringUtils.isEmpty(request.claims)) {\n            validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\n        }\n\n        return validatedRequest;\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(apiId: number, forceRefresh?: boolean): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n        };\n\n        return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getDiscoveredAuthority(requestAuthority?: string): Promise<Authority> {\n        this.logger.verbose(\"getDiscoveredAuthority called\");\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata\n        };\n\n        if (requestAuthority) {\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return await AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions);\n        }\n\n        this.logger.verbose(\"Creating discovered authority with configured authority\");\n        return await AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}