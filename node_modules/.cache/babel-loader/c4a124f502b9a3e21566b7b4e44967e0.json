{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { AuthError, PerformanceEvents, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentRefreshClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentRefreshClient, _super);\n\n  function SilentRefreshClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Exchanges the refresh token for new tokens\r\n   * @param request\r\n   */\n\n\n  SilentRefreshClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [__assign({}, request)];\n            return [4\n            /*yield*/\n            , this.initializeBaseRequest(request)];\n\n          case 1:\n            silentRequest = __assign.apply(void 0, _a.concat([_b.sent()]));\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n            return [4\n            /*yield*/\n            , this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 2:\n            refreshTokenClient = _b.sent();\n            this.logger.verbose(\"Refresh token client created\"); // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n\n            return [2\n            /*return*/\n            , refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache\n              });\n              return result;\n            }).catch(function (e) {\n              if (e instanceof AuthError) {\n                e.setCorrelationId(_this.correlationId);\n              }\n\n              serverTelemetryManager.cacheFailedRequest(e);\n              acquireTokenMeasurement.endMeasurement({\n                errorCode: e.errorCode,\n                subErrorCode: e.subError,\n                success: false\n              });\n              throw e;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentRefreshClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Creates a Refresh Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n\n\n  SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];\n\n          case 1:\n            clientConfig = _a.sent();\n            return [2\n            /*return*/\n            , new RefreshTokenClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n\n  return SilentRefreshClient;\n}(StandardInteractionClient);\n\nexport { SilentRefreshClient };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;EAUyCA;;EAAzC;;EAyDC;;;;;;;EApDSC,6CAAN,UAAmBC,OAAnB,EAAmD;;;;;;;;;+BAExCA;YACA;YAAA;YAAA,EAAM,KAAKC,qBAAL,CAA2BD,OAA3B,CAAN;;;YAFDE,aAAa,qCAEZC,SAFY,GAAb;YAIAC,uBAAuB,GAAG,KAAKC,iBAAL,CAAuBC,gBAAvB,CAAwCC,iBAAiB,CAACC,+BAA1D,EAA2FN,aAAa,CAACO,aAAzG,CAA1B;YACAC,sBAAsB,GAAG,KAAKC,gCAAL,CAAsCC,KAAK,CAACC,6BAA5C,CAAzB;YAEqB;YAAA;YAAA,EAAM,KAAKC,wBAAL,CAA8BJ,sBAA9B,EAAsDR,aAAa,CAACa,SAApE,EAA+Eb,aAAa,CAACc,iBAA7F,CAAN;;;YAArBC,kBAAkB,GAAGd,SAArB;YACN,KAAKe,MAAL,CAAYC,OAAZ,CAAoB,8BAApB;;YAEA;YAAA;YAAA,EAAOF,kBAAkB,CAACG,0BAAnB,CAA8ClB,aAA9C,EACFmB,IADE,CACG,UAACC,MAAD,EAA6B;cAC/BlB,uBAAuB,CAACmB,cAAxB,CAAuC;gBACnCC,OAAO,EAAE,IAD0B;gBAEnCC,SAAS,EAAEH,MAAM,CAACG;cAFiB,CAAvC;cAKA,OAAOH,MAAP;YACH,CARE,EASFI,KATE,CASI,UAACC,CAAD,EAAa;cAChB,IAAIA,CAAC,YAAYC,SAAjB,EAA4B;gBACvBD,CAAe,CAACE,gBAAhB,CAAiCC,KAAI,CAACrB,aAAtC;cACJ;;cACDC,sBAAsB,CAACqB,kBAAvB,CAA0CJ,CAA1C;cACAvB,uBAAuB,CAACmB,cAAxB,CAAuC;gBACnCS,SAAS,EAAEL,CAAC,CAACK,SADsB;gBAEnCC,YAAY,EAAEN,CAAC,CAACO,QAFmB;gBAGnCV,OAAO,EAAE;cAH0B,CAAvC;cAKA,MAAMG,CAAN;YACH,CApBE,CAAP;;;;EAqBH,CAhCK;;;;;;EAqCN5B;;IAEI,OAAOoC,OAAO,CAACC,MAAR,CAAeC,gBAAgB,CAACC,kCAAjB,EAAf,CAAP;EACH,CAHD;;;;;;;;EAUgBvC,yDAAhB,UAAyCW,sBAAzC,EAAyF6B,YAAzF,EAAgHvB,iBAAhH,EAAqJ;;;;;;YAE5H;YAAA;YAAA,EAAM,KAAKwB,sBAAL,CAA4B9B,sBAA5B,EAAoD6B,YAApD,EAAkEvB,iBAAlE,CAAN;;;YAAfyB,YAAY,GAAGC,SAAf;YACN;YAAA;YAAA,EAAO,IAAIC,kBAAJ,CAAuBF,YAAvB,EAAqC,KAAKpC,iBAA1C,CAAP;;;;EACH,CAJe;;EAKpB;AAzDA,EAAyCuC","names":["__extends","SilentRefreshClient","request","initializeBaseRequest","silentRequest","_b","acquireTokenMeasurement","performanceClient","startMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createRefreshTokenClient","authority","azureCloudOptions","refreshTokenClient","logger","verbose","acquireTokenByRefreshToken","then","result","endMeasurement","success","fromCache","catch","e","AuthError","setCorrelationId","_this","cacheFailedRequest","errorCode","subErrorCode","subError","Promise","reject","BrowserAuthError","createSilentLogoutUnsupportedError","authorityUrl","getClientConfiguration","clientConfig","_a","RefreshTokenClient","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { CommonSilentFlowRequest, AuthenticationResult, ServerTelemetryManager, RefreshTokenClient, AuthError, AzureCloudOptions, PerformanceEvents } from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n\n        const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n        this.logger.verbose(\"Refresh token client created\");\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return refreshTokenClient.acquireTokenByRefreshToken(silentRequest)\n            .then((result: AuthenticationResult) => {\n                acquireTokenMeasurement.endMeasurement({\n                    success: true,\n                    fromCache: result.fromCache\n                });\n\n                return result;\n            })\n            .catch((e: AuthError) => {\n                if (e instanceof AuthError) {\n                    (e as AuthError).setCorrelationId(this.correlationId);\n                }\n                serverTelemetryManager.cacheFailedRequest(e);\n                acquireTokenMeasurement.endMeasurement({\n                    errorCode: e.errorCode,\n                    subErrorCode: e.subError,\n                    success: false\n                });\n                throw e;\n            });\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(serverTelemetryManager: ServerTelemetryManager, authorityUrl?: string, azureCloudOptions?: AzureCloudOptions): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}