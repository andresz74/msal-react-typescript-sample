{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SignedHttpRequest =\n/** @class */\nfunction () {\n  function SignedHttpRequest(shrParameters, shrOptions) {\n    var loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n\n\n  SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.popTokenGenerator.generateKid(this.shrParameters)];\n\n          case 1:\n            kid = _a.sent().kid;\n            return [2\n            /*return*/\n            , kid];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n\n\n  SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\n      });\n    });\n  };\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n\n\n  SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SignedHttpRequest;\n}();\n\nexport { SignedHttpRequest };","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;EAmBI,2BAAYA,aAAZ,EAAwDC,UAAxD,EAA6F;IACzF,IAAMC,aAAa,GAAID,UAAU,IAAIA,UAAU,CAACC,aAA1B,IAA4C,EAAlE;IACA,KAAKC,MAAL,GAAc,IAAIC,MAAJ,CAAWF,aAAX,EAA0BG,IAA1B,EAAgCC,OAAhC,CAAd;IACA,KAAKC,SAAL,GAAiB,IAAIC,SAAJ,CAAc,KAAKL,MAAnB,CAAjB;IACA,KAAKM,iBAAL,GAAyB,IAAIC,iBAAJ,CAAsB,KAAKH,SAA3B,CAAzB;IACA,KAAKP,aAAL,GAAqBA,aAArB;EACH;;;;;;;EAMKW,0DAAN;;;;;;YACoB;YAAA;YAAA,EAAM,KAAKF,iBAAL,CAAuBG,WAAvB,CAAmC,KAAKZ,aAAxC,CAAN;;;YAARa,GAAG,GAAKC,UAA4DD,GAApE;YAER;YAAA;YAAA,EAAOA,GAAP;;;;EACH,CAJK;;;;;;;;;;EAaAF,0CAAN,UAAkBI,OAAlB,EAAmCC,mBAAnC,EAAgEC,MAAhE,EAA+E;;;QAC3E;QAAA;QAAA,EAAO,KAAKR,iBAAL,CAAuBS,WAAvB,CACHH,OADG,EAEHC,mBAFG,EAGH,KAAKhB,aAHF,EAIHiB,MAJG,CAAP;;;EAMH,CAPK;;;;;;;;EAcAN,yCAAN,UAAiBK,mBAAjB,EAA4C;;;;;YACjC;YAAA;YAAA,EAAM,KAAKT,SAAL,CAAeY,qBAAf,CAAqCH,mBAArC,CAAN;;;YAAP;YAAA;YAAA,EAAOF,SAAP;;;;EACH,CAFK;;EAGV;AAAC","names":["shrParameters","shrOptions","loggerOptions","logger","Logger","name","version","cryptoOps","CryptoOps","popTokenGenerator","PopTokenGenerator","SignedHttpRequest","generateKid","kid","_a","payload","publicKeyThumbprint","claims","signPayload","removeTokenBindingKey"],"sources":["../../src/crypto/SignedHttpRequest.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"./CryptoOps\";\nimport { Logger, LoggerOptions, PopTokenGenerator, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { version, name } from \"../packageMetadata\";\n\nexport type SignedHttpRequestOptions = {\n    loggerOptions: LoggerOptions\n};\n\nexport class SignedHttpRequest {\n    private popTokenGenerator: PopTokenGenerator;\n    private cryptoOps: CryptoOps;\n    private shrParameters: SignedHttpRequestParameters;\n    private logger: Logger;\n\n    constructor(shrParameters: SignedHttpRequestParameters, shrOptions?: SignedHttpRequestOptions) {\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\n        this.logger = new Logger(loggerOptions, name, version);\n        this.cryptoOps = new CryptoOps(this.logger);\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n        this.shrParameters = shrParameters;\n    }\n\n    /**\n     * Generates and caches a keypair for the given request options.\n     * @returns Public key digest, which should be sent to the token issuer.\n     */\n    async generatePublicKeyThumbprint(): Promise<string> {\n        const { kid } = await this.popTokenGenerator.generateKid(this.shrParameters);\n\n        return kid;\n    }\n\n    /**\n     * Generates a signed http request for the given payload with the given key.\n     * @param payload Payload to sign (e.g. access token)\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @param claims Additional claims to include/override in the signed JWT \n     * @returns Pop token signed with the corresponding private key\n     */\n    async signRequest(payload: string, publicKeyThumbprint: string, claims?: object): Promise<string> {\n        return this.popTokenGenerator.signPayload(\n            payload, \n            publicKeyThumbprint,\n            this.shrParameters, \n            claims\n        );\n    }\n\n    /**\n     * Removes cached keys from browser for given public key thumbprint\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @returns If keys are properly deleted\n     */\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\n        return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}