{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet(inputScopes) {\n    var _this = this; // Filter empty string and null/undefined array items\n\n\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : []; // Validate and filter scopes (validate function throws if validation fails)\n\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n\n\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || Constants.EMPTY_STRING;\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n\n\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes); // compare lowercase scopes\n\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n\n\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n\n\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n\n\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n\n\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n\n\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    } // Do not allow OIDC scopes to be the only intersecting scopes\n\n\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n\n\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n\n\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n\n\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n\n\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"mappings":"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","names":["inputScopes","_this","scopeArr","StringUtils","trimArrayEntries","__spreadArrays","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","add","scope","ScopeSet","inputScopeString","scopeString","Constants","EMPTY_STRING","split","length","ClientConfigurationError","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","containsScopeSet","scopeSet","size","asArray","every","defaultScopeCount","OIDC_SCOPES","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","ClientAuthError","createAppendScopeSetError","removeScope","createRemoveEmptyScopeFromSetError","delete","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","containsOnlyOIDCScopes","removeOIDCScopes","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","push","val","join","printScopes"],"sources":["../../src/request/ScopeSet.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach(scope => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (!StringUtils.isEmpty(newScope)) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach(newScope => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (StringUtils.isEmpty(scope)) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        \n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach(val => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}