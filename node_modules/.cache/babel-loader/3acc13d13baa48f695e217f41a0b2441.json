{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar JoseHeader =\n/** @class */\nfunction () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n\n\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    } // Alg is required on the SHR header\n\n\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Jwt,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n\n  return JoseHeader;\n}();\n\nexport { JoseHeader };","map":{"version":3,"mappings":";;;;;AAAA;;;AAGG;;AAWH;AAAA;AAAA;EAKI,oBAAaA,OAAb,EAAuC;IACnC,KAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;IACA,KAAKC,GAAL,GAAWF,OAAO,CAACE,GAAnB;IACA,KAAKC,GAAL,GAAWH,OAAO,CAACG,GAAnB;EACH;EAED;;;;;;;AAOG;;;EACIC,UAAkB,mBAAlB,GAAP,UAA0BC,gBAA1B,EAA6D;;IAEzD,IAAI,CAACA,gBAAgB,CAACF,GAAtB,EAA2B;MACvB,MAAMG,eAAe,CAACC,qBAAhB,EAAN;IACH,CAJwD;;;IAOzD,IAAI,CAACF,gBAAgB,CAACH,GAAtB,EAA2B;MACvB,MAAMI,eAAe,CAACE,qBAAhB,EAAN;IACH;;IAED,IAAMC,SAAS,GAAG,IAAIL,UAAJ,CAAe;;MAE7BH,GAAG,EAAEI,gBAAgB,CAACJ,GAAjB,IAAwBS,SAAS,CAACC,GAFV;MAG7BR,GAAG,EAAEE,gBAAgB,CAACF,GAHO;MAI7BD,GAAG,EAAEG,gBAAgB,CAACH;IAJO,CAAf,CAAlB;IAOA,OAAOU,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAAP;EACH,CAnBM;;EAoBX,OAACL,UAAD;AAAC,CAvCD","names":["options","typ","alg","kid","JoseHeader","shrHeaderOptions","JoseHeaderError","createMissingKidError","createMissingAlgError","shrHeader","JsonTypes","Jwt","JSON","stringify"],"sources":["../../src/crypto/JoseHeader.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { JoseHeaderError } from \"../error/JoseHeaderError\";\nimport { JsonTypes } from \"../utils/Constants\";\n\nexport type JoseHeaderOptions = {\n    typ?: JsonTypes,\n    alg?: string,\n    kid?: string\n};\n\nexport class JoseHeader {\n    public typ?: JsonTypes;\n    public alg?: string;\n    public kid?: string;\n\n    constructor (options: JoseHeaderOptions) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions \n     * @returns \n     */\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw JoseHeaderError.createMissingKidError();\n        }\n\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw JoseHeaderError.createMissingAlgError();\n        }\n\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonTypes.Jwt,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg\n        });\n\n        return JSON.stringify(shrHeader);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}