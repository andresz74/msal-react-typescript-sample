{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { DatabaseStorage } from './DatabaseStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\n\nvar AsyncMemoryStorage =\n/** @class */\nfunction () {\n  function AsyncMemoryStorage(logger, storeName) {\n    this.inMemoryCache = new MemoryStorage();\n    this.indexedDBCache = new DatabaseStorage();\n    this.logger = logger;\n    this.storeName = storeName;\n  }\n\n  AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {\n    if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n      this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n    } else {\n      throw error;\n    }\n  };\n  /**\r\n   * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n   * storage object if item isn't found in-memory.\r\n   * @param key\r\n   */\n\n\n  AsyncMemoryStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var item, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            item = this.inMemoryCache.getItem(key);\n            if (!!item) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n            return [4\n            /*yield*/\n            , this.indexedDBCache.getItem(key)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            e_1 = _a.sent();\n            this.handleDatabaseAccessError(e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            , item];\n        }\n      });\n    });\n  };\n  /**\r\n   * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n   * storage object with the given key.\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  AsyncMemoryStorage.prototype.setItem = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.setItem(key, value);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.indexedDBCache.setItem(key, value)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            this.handleDatabaseAccessError(e_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n   * @param key\r\n   */\n\n\n  AsyncMemoryStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.removeItem(key);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.indexedDBCache.removeItem(key)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_3 = _a.sent();\n            this.handleDatabaseAccessError(e_3);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n   * asynchronous storage object.\r\n   */\n\n\n  AsyncMemoryStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cacheKeys, e_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cacheKeys = this.inMemoryCache.getKeys();\n            if (!(cacheKeys.length === 0)) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n            return [4\n            /*yield*/\n            , this.indexedDBCache.getKeys()];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            e_4 = _a.sent();\n            this.handleDatabaseAccessError(e_4);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            , cacheKeys];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns true or false if the given key is present in the cache.\r\n   * @param key\r\n   */\n\n\n  AsyncMemoryStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var containsKey, e_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            containsKey = this.inMemoryCache.containsKey(key);\n            if (!!containsKey) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n            return [4\n            /*yield*/\n            , this.indexedDBCache.containsKey(key)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            e_5 = _a.sent();\n            this.handleDatabaseAccessError(e_5);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            , containsKey];\n        }\n      });\n    });\n  };\n  /**\r\n   * Clears in-memory Map and tries to delete the IndexedDB database.\r\n   */\n\n\n  AsyncMemoryStorage.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dbDeleted, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // InMemory cache is a Map instance, clear is straightforward\n            this.logger.verbose(\"Deleting in-memory keystore \" + this.storeName);\n            this.inMemoryCache.clear();\n            this.logger.verbose(\"In-memory keystore \" + this.storeName + \" deleted\");\n            this.logger.verbose(\"Deleting persistent keystore \" + this.storeName);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.indexedDBCache.deleteDatabase()];\n\n          case 2:\n            dbDeleted = _a.sent();\n\n            if (dbDeleted) {\n              this.logger.verbose(\"Persistent keystore \" + this.storeName + \" deleted\");\n            }\n\n            return [2\n            /*return*/\n            , dbDeleted];\n\n          case 3:\n            e_6 = _a.sent();\n            this.handleDatabaseAccessError(e_6);\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AsyncMemoryStorage;\n}();\n\nexport { AsyncMemoryStorage };","map":{"version":3,"mappings":"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","names":["logger","storeName","inMemoryCache","MemoryStorage","indexedDBCache","DatabaseStorage","AsyncMemoryStorage","error","BrowserAuthError","errorCode","BrowserAuthErrorMessage","databaseUnavailable","code","key","item","getItem","verbose","_a","handleDatabaseAccessError","e_1","value","setItem","e_2","removeItem","e_3","cacheKeys","getKeys","length","e_4","containsKey","e_5","clear","deleteDatabase","dbDeleted","e_6"],"sources":["../../src/cache/AsyncMemoryStorage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { DatabaseStorage } from \"./DatabaseStorage\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\n\n/**\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\n */\nexport class AsyncMemoryStorage<T> implements IAsyncStorage<T> {\n    private inMemoryCache: MemoryStorage<T>;\n    private indexedDBCache: DatabaseStorage<T>;\n    private logger: Logger;\n    private storeName: string;\n\n    constructor(logger: Logger, storeName: string) {\n        this.inMemoryCache = new MemoryStorage<T>();\n        this.indexedDBCache = new DatabaseStorage<T>();\n        this.logger = logger;\n        this.storeName = storeName;\n    }\n\n    private handleDatabaseAccessError(error: unknown): void {\n        if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n        } else {\n            throw error;\n        }\n    }\n    /**\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\n     * storage object if item isn't found in-memory.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        const item = this.inMemoryCache.getItem(key);\n        if(!item) {\n            try {\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.getItem(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return item;\n    }\n\n    /**\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\n     * storage object with the given key.\n     * @param key \n     * @param value \n     */\n    async setItem(key: string, value: T): Promise<void> {\n        this.inMemoryCache.setItem(key, value);\n        try {\n            await this.indexedDBCache.setItem(key, value);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\n     * @param key \n     */\n    async removeItem(key: string): Promise<void> {\n        this.inMemoryCache.removeItem(key);\n        try {\n            await this.indexedDBCache.removeItem(key);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n\n    /**\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the \n     * asynchronous storage object.\n     */\n    async getKeys(): Promise<string[]> {\n        const cacheKeys = this.inMemoryCache.getKeys();\n        if (cacheKeys.length === 0) {\n            try {\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n                return await this.indexedDBCache.getKeys();\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return cacheKeys;\n    }\n\n    /**\n     * Returns true or false if the given key is present in the cache.\n     * @param key \n     */\n    async containsKey(key: string): Promise<boolean> {\n        const containsKey = this.inMemoryCache.containsKey(key);\n        if(!containsKey) {\n            try {\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.containsKey(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return containsKey;\n    }\n\n    /**\n     * Clears in-memory Map and tries to delete the IndexedDB database.\n     */\n    async clear(): Promise<boolean> {\n        // InMemory cache is a Map instance, clear is straightforward\n        this.logger.verbose(`Deleting in-memory keystore ${this.storeName}`);\n        this.inMemoryCache.clear();\n        this.logger.verbose(`In-memory keystore ${this.storeName} deleted`);\n        this.logger.verbose(`Deleting persistent keystore ${this.storeName}`);\n        \n        try {\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\n            \n            if (dbDeleted) {\n                this.logger.verbose(`Persistent keystore ${this.storeName} deleted`);\n            }\n            \n            return dbDeleted;\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n            return false;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}