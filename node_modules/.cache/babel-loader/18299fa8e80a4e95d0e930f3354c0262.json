{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\n\nvar RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\n\nvar PkceGenerator =\n/** @class */\nfunction () {\n  function PkceGenerator(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n\n\n  PkceGenerator.prototype.generateCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var codeVerifier, codeChallenge;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            codeVerifier = this.generateCodeVerifier();\n            return [4\n            /*yield*/\n            , this.generateCodeChallengeFromVerifier(codeVerifier)];\n\n          case 1:\n            codeChallenge = _a.sent();\n            return [2\n            /*return*/\n            , {\n              verifier: codeVerifier,\n              challenge: codeChallenge\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n\n\n  PkceGenerator.prototype.generateCodeVerifier = function () {\n    try {\n      // Generate random values as utf-8\n      var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer); // encode verifier as base64\n\n      var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  };\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n\n\n  PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pkceHashedCodeVerifier, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.cryptoObj.sha256Digest(pkceCodeVerifier)];\n\n          case 1:\n            pkceHashedCodeVerifier = _a.sent(); // encode hash as base64\n\n            return [2\n            /*return*/\n            , this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\n\n          case 2:\n            e_1 = _a.sent();\n            throw BrowserAuthError.createPkceNotGeneratedError(e_1);\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PkceGenerator;\n}();\n\nexport { PkceGenerator };","map":{"version":3,"mappings":";;;;;;AAAA;;;;AAUA;;AACA,IAAMA,sBAAsB,GAAG,EAA/B;AAEA;;;;;;;EAQI,uBAAYC,SAAZ,EAAoC;IAChC,KAAKC,YAAL,GAAoB,IAAIC,YAAJ,EAApB;IACA,KAAKF,SAAL,GAAiBA,SAAjB;EACH;;;;;;EAKKG,wCAAN;;;;;;YACUC,YAAY,GAAG,KAAKC,oBAAL,EAAf;YACgB;YAAA;YAAA,EAAM,KAAKC,iCAAL,CAAuCF,YAAvC,CAAN;;;YAAhBG,aAAa,GAAGC,SAAhB;YACN;YAAA;YAAA,EAAO;cACHC,QAAQ,EAAEL,YADP;cAEHM,SAAS,EAAEH;YAFR,CAAP;;;;EAIH,CAPK;;;;;;;EAaEJ,+CAAR;IACI,IAAI;;MAEA,IAAMQ,MAAM,GAAe,IAAIC,UAAJ,CAAeb,sBAAf,CAA3B;MACA,KAAKC,SAAL,CAAea,eAAf,CAA+BF,MAA/B,EAHA;;MAKA,IAAMG,mBAAmB,GAAW,KAAKb,YAAL,CAAkBc,YAAlB,CAA+BJ,MAA/B,CAApC;MACA,OAAOG,mBAAP;IACH,CAPD,CAOE,OAAOE,CAAP,EAAU;MACR,MAAMC,gBAAgB,CAACC,2BAAjB,CAA6CF,CAA7C,CAAN;IACH;EACJ,CAXO;;;;;;;EAiBMb,4DAAd,UAAgDgB,gBAAhD,EAAwE;;;;;;;;YAGjC;YAAA;YAAA,EAAM,KAAKnB,SAAL,CAAeoB,YAAf,CAA4BD,gBAA5B,CAAN;;;YAAzBE,sBAAsB,GAAGb,SAAzB;;YAEN;YAAA;YAAA,EAAO,KAAKP,YAAL,CAAkBc,YAAlB,CAA+B,IAAIH,UAAJ,CAAeS,sBAAf,CAA/B,CAAP;;;;YAEA,MAAMJ,gBAAgB,CAACC,2BAAjB,CAA6CI,GAA7C,CAAN;;;;;;;;;EAEP,CATa;;EAUlB;AAAC","names":["RANDOM_BYTE_ARR_LENGTH","cryptoObj","base64Encode","Base64Encode","PkceGenerator","codeVerifier","generateCodeVerifier","generateCodeChallengeFromVerifier","codeChallenge","_a","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","BrowserAuthError","createPkceNotGeneratedError","pkceCodeVerifier","sha256Digest","pkceHashedCodeVerifier","e_1"],"sources":["../../src/crypto/PkceGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nexport class PkceGenerator {\n\n    private base64Encode: Base64Encode;\n    private cryptoObj: BrowserCrypto;\n\n    constructor(cryptoObj: BrowserCrypto) {\n        this.base64Encode = new Base64Encode();\n        this.cryptoObj = cryptoObj;\n    }\n\n    /**\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n     */\n    async generateCodes(): Promise<PkceCodes> {\n        const codeVerifier = this.generateCodeVerifier();\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\n        return {\n            verifier: codeVerifier,\n            challenge: codeChallenge\n        };\n    }\n\n    /**\n     * Generates a random 32 byte buffer and returns the base64\n     * encoded string to be used as a PKCE Code Verifier\n     */\n    private generateCodeVerifier(): string {\n        try {\n            // Generate random values as utf-8\n            const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n            this.cryptoObj.getRandomValues(buffer);\n            // encode verifier as base64\n            const pkceCodeVerifierB64: string = this.base64Encode.urlEncodeArr(buffer);\n            return pkceCodeVerifierB64;\n        } catch (e) {\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\n        }\n    }\n\n    /**\n     * Creates a base64 encoded PKCE Code Challenge string from the\n     * hash created from the PKCE Code Verifier supplied\n     */\n    private async generateCodeChallengeFromVerifier(pkceCodeVerifier: string): Promise<string> {\n        try {\n            // hashed verifier\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\n            // encode hash as base64\n            return this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n        } catch (e) {\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}