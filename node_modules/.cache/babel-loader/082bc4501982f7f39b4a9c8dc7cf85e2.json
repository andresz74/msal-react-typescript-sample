{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType } from '../../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * REFRESH_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\r\n *\r\n * Value:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n * }\r\n */\n\nvar RefreshTokenEntity =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenEntity, _super);\n\n  function RefreshTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create RefreshTokenEntity\r\n   * @param homeAccountId\r\n   * @param authenticationResult\r\n   * @param clientId\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n    var rtEntity = new RefreshTokenEntity();\n    rtEntity.clientId = clientId;\n    rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n    rtEntity.environment = environment;\n    rtEntity.homeAccountId = homeAccountId;\n    rtEntity.secret = refreshToken;\n    rtEntity.userAssertionHash = userAssertionHash;\n    if (familyId) rtEntity.familyId = familyId;\n    return rtEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  RefreshTokenEntity.isRefreshTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n  };\n\n  return RefreshTokenEntity;\n}(CredentialEntity);\n\nexport { RefreshTokenEntity };","map":{"version":3,"mappings":";;;;;;AAAA;;;AAGG;;AAKH;;;;;;;;;;;;;;;;;;AAkBG;;AACH;AAAA;AAAA;EAAwCA,SAAgB,4BAAhB;;EAAxC;;EAoDC;EAjDG;;;;;;AAMG;;;EACIC,8CAAP,UACIC,aADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIIC,QAJJ,EAKIC,QALJ,EAMIC,iBANJ,EAM8B;IAE1B,IAAMC,QAAQ,GAAG,IAAIP,kBAAJ,EAAjB;IAEAO,QAAQ,CAACH,QAAT,GAAoBA,QAApB;IACAG,QAAQ,CAACC,cAAT,GAA0BC,cAAc,CAACC,aAAzC;IACAH,QAAQ,CAACL,WAAT,GAAuBA,WAAvB;IACAK,QAAQ,CAACN,aAAT,GAAyBA,aAAzB;IACAM,QAAQ,CAACI,MAAT,GAAkBR,YAAlB;IACAI,QAAQ,CAACD,iBAAT,GAA6BA,iBAA7B;IAEA,IAAID,QAAJ,EACIE,QAAQ,CAACF,QAAT,GAAoBA,QAApB;IAEJ,OAAOE,QAAP;EACH,CArBM;EAuBP;;;AAGG;;;EACIP,kBAAoB,qBAApB,GAAP,UAA4BY,MAA5B,EAA0C;IAEtC,IAAI,CAACA,MAAL,EAAa;MACT,OAAO,KAAP;IACH;;IAED,OACIA,MAAM,CAACC,cAAP,CAAsB,eAAtB,KACAD,MAAM,CAACC,cAAP,CAAsB,aAAtB,CADA,IAEAD,MAAM,CAACC,cAAP,CAAsB,gBAAtB,CAFA,IAGAD,MAAM,CAACC,cAAP,CAAsB,UAAtB,CAHA,IAIAD,MAAM,CAACC,cAAP,CAAsB,QAAtB,CAJA,IAKAD,MAAM,CAAC,gBAAD,CAAN,KAA6BH,cAAc,CAACC,aANhD;EAQH,CAdM;;EAeX,OAACV,kBAAD;AApDA,EAAwCc,gBAAxC","names":["__extends","RefreshTokenEntity","homeAccountId","environment","refreshToken","clientId","familyId","userAssertionHash","rtEntity","credentialType","CredentialType","REFRESH_TOKEN","secret","entity","hasOwnProperty","CredentialEntity"],"sources":["../../../src/cache/entities/RefreshTokenEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CredentialEntity } from \"./CredentialEntity\";\nimport { CredentialType } from \"../../utils/Constants\";\n\n/**\n * REFRESH_TOKEN Cache\n *\n * Key:Value Schema:\n *\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\n *\n * Value:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, '1' represents Microsoft Family\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n * }\n */\nexport class RefreshTokenEntity extends CredentialEntity {\n    familyId?: string;\n\n    /**\n     * Create RefreshTokenEntity\n     * @param homeAccountId\n     * @param authenticationResult\n     * @param clientId\n     * @param authority\n     */\n    static createRefreshTokenEntity(\n        homeAccountId: string,\n        environment: string,\n        refreshToken: string,\n        clientId: string,\n        familyId?: string,\n        userAssertionHash?: string\n    ): RefreshTokenEntity {\n        const rtEntity = new RefreshTokenEntity();\n\n        rtEntity.clientId = clientId;\n        rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n        rtEntity.environment = environment;\n        rtEntity.homeAccountId = homeAccountId;\n        rtEntity.secret = refreshToken;\n        rtEntity.userAssertionHash = userAssertionHash;\n\n        if (familyId)\n            rtEntity.familyId = familyId;\n\n        return rtEntity;\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isRefreshTokenEntity(entity: object): boolean {\n\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            entity.hasOwnProperty(\"homeAccountId\") &&\n            entity.hasOwnProperty(\"environment\") &&\n            entity.hasOwnProperty(\"credentialType\") &&\n            entity.hasOwnProperty(\"clientId\") &&\n            entity.hasOwnProperty(\"secret\") &&\n            entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}