{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { ThrottlingConstants, CacheSchemaType, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ThrottlingUtils =\n/** @class */\nfunction () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n        return;\n      }\n\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n\n\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n  };\n\n  return ThrottlingUtils;\n}();\n\nexport { ThrottlingUtils };","map":{"version":3,"mappings":"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","names":["ThrottlingUtils","thumbprint","ThrottlingConstants","THROTTLING_PREFIX","JSON","stringify","cacheManager","key","generateThrottlingStorageKey","value","getThrottlingCache","throttleTime","Date","now","removeItem","CacheSchemaType","THROTTLING","ServerError","errorCodes","_a","join","Constants","EMPTY_STRING","errorMessage","subError","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","HeaderNames","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["../../src/network/ThrottlingUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { HeaderNames, CacheSchemaType, ThrottlingConstants, Constants } from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\nexport class ThrottlingUtils {\n\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n                return;\n            }\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n        ) * 1000);\n    }\n\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): boolean {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}