{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage =\n/** @class */\nfunction () {\n  function DatabaseStorage() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function () {\n            return reject(BrowserAuthError.createDatabaseUnavailableError());\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Closes the connection to IndexedDB database when all pending transactions\r\n   * complete.\r\n   */\n\n\n  DatabaseStorage.prototype.closeConnection = function () {\n    var db = this.db;\n\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  };\n  /**\r\n   * Opens database if it's not already open\r\n   */\n\n\n  DatabaseStorage.prototype.validateDbIsOpen = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.setItem = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbDelete = objectStore.delete(key);\n              dbDelete.addEventListener(\"success\", function () {\n                _this.closeConnection();\n\n                resolve();\n              });\n              dbDelete.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n\n\n  DatabaseStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGetKeys = objectStore.getAllKeys();\n              dbGetKeys.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result);\n              });\n              dbGetKeys.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n\n\n  DatabaseStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.validateDbIsOpen()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbContainsKey = objectStore.count(key);\n              dbContainsKey.addEventListener(\"success\", function (e) {\n                var event = e;\n\n                _this.closeConnection();\n\n                resolve(event.target.result === 1);\n              });\n              dbContainsKey.addEventListener(\"error\", function (e) {\n                _this.closeConnection();\n\n                reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n\n\n  DatabaseStorage.prototype.deleteDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var existingDatabases, database;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Check if database being deleted exists\n            if (this.db && this.dbOpen) {\n              this.closeConnection();\n            }\n\n            return [4\n            /*yield*/\n            , window.indexedDB.databases()];\n\n          case 1:\n            existingDatabases = _a.sent();\n            database = existingDatabases.find(function (database) {\n              return database.name === DB_NAME;\n            }); // If database exists, delete it\n\n            if (database) {\n              return [2\n              /*return*/\n              , new Promise(function (resolve, reject) {\n                var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n                deleteDbRequest.addEventListener(\"success\", function () {\n                  return resolve(true);\n                });\n                deleteDbRequest.addEventListener(\"error\", function () {\n                  return reject(false);\n                });\n              })];\n            } // Database doesn't exist, return true\n\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;AA0BA;;;;;;;EAUI;IACI,KAAKA,MAAL,GAAcC,OAAd;IACA,KAAKC,OAAL,GAAeC,UAAf;IACA,KAAKC,SAAL,GAAiBC,aAAjB;IACA,KAAKC,MAAL,GAAc,KAAd;EACH;;;;;;EAKKC,iCAAN;;;;;QACI;QAAA;QAAA,EAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;UAC/B,IAAMC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBC,KAAI,CAACf,MAA3B,EAAmCe,KAAI,CAACb,OAAxC,CAAf;UACAS,MAAM,CAACK,gBAAP,CAAwB,eAAxB,EAAyC,UAACC,CAAD,EAAyB;YAC9D,IAAMC,KAAK,GAAGD,CAAd;YACAC,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBC,iBAApB,CAAsCN,KAAI,CAACX,SAA3C;UACH,CAHD;UAIAO,MAAM,CAACK,gBAAP,CAAwB,SAAxB,EAAmC,UAACC,CAAD,EAAS;YACxC,IAAMC,KAAK,GAAGD,CAAd;YACAF,KAAI,CAACO,EAAL,GAAUJ,KAAK,CAACC,MAAN,CAAaC,MAAvB;YACAL,KAAI,CAACT,MAAL,GAAc,IAAd;YACAG,OAAO;UACV,CALD;UAMAE,MAAM,CAACK,gBAAP,CAAwB,OAAxB,EAAkC;YAAM,aAAM,CAACO,gBAAgB,CAACC,8BAAjB,EAAD,CAAN;UAAyD,CAAjG;QACH,CAbM,CAAP;;;EAcH,CAfK;;;;;;;EAqBNjB;IACI,IAAMe,EAAE,GAAG,KAAKA,EAAhB;;IACA,IAAIA,EAAE,IAAI,KAAKhB,MAAf,EAAuB;MACnBgB,EAAE,CAACG,KAAH;MACA,KAAKnB,MAAL,GAAc,KAAd;IACH;EACJ,CAND;;;;;;EAWcC,6CAAd;;;;;iBACQ,CAAC,KAAKD,QAAN;YAAA;YAAA;YACO;YAAA;YAAA,EAAM,KAAKQ,IAAL,EAAN;;;YAAP;YAAA;YAAA,EAAOY,SAAP;;;;;;;;;EAEP,CAJa;;;;;;;EAURnB,oCAAN,UAAcoB,GAAd,EAAyB;;;;;;;YACrB;YAAA;YAAA,EAAM,KAAKC,gBAAL,EAAN;;;YAAAF;;YACA;YAAA;YAAA,EAAO,IAAIlB,OAAJ,CAAe,UAACC,OAAD,EAAUC,MAAV,EAAgB;;cAElC,IAAI,CAACK,KAAI,CAACO,EAAV,EAAc;gBACV,OAAOZ,MAAM,CAACa,gBAAgB,CAACM,0BAAjB,EAAD,CAAb;cACH;;cACD,IAAMC,WAAW,GAAGf,KAAI,CAACO,EAAL,CAAQQ,WAAR,CAAoB,CAACf,KAAI,CAACX,SAAN,CAApB,EAAsC,UAAtC,CAApB;;cACA,IAAM2B,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAwBhB,KAAI,CAACX,SAA7B,CAApB;cACA,IAAM4B,KAAK,GAAGD,WAAW,CAACE,GAAZ,CAAgBN,GAAhB,CAAd;cAEAK,KAAK,CAAChB,gBAAN,CAAuB,SAAvB,EAAkC,UAACC,CAAD,EAAS;gBACvC,IAAMC,KAAK,GAAGD,CAAd;;gBACAF,KAAI,CAACmB,eAAL;;gBACAzB,OAAO,CAACS,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAP;cACH,CAJD;cAMAY,KAAK,CAAChB,gBAAN,CAAuB,OAAvB,EAAgC,UAACC,CAAD,EAAS;gBACrCF,KAAI,CAACmB,eAAL;;gBACAxB,MAAM,CAACO,CAAD,CAAN;cACH,CAHD;YAIH,CAnBM,CAAP;;;;EAoBH,CAtBK;;;;;;;;EA6BAV,oCAAN,UAAcoB,GAAd,EAA2BQ,OAA3B,EAAqC;;;;;;;YACjC;YAAA;YAAA,EAAM,KAAKP,gBAAL,EAAN;;;YAAAF;;YACA;YAAA;YAAA,EAAO,IAAIlB,OAAJ,CAAkB,UAACC,OAAD,EAAoBC,MAApB,EAAoC;;cAEzD,IAAI,CAACK,KAAI,CAACO,EAAV,EAAc;gBACV,OAAOZ,MAAM,CAACa,gBAAgB,CAACM,0BAAjB,EAAD,CAAb;cACH;;cACD,IAAMC,WAAW,GAAGf,KAAI,CAACO,EAAL,CAAQQ,WAAR,CAAoB,CAACf,KAAI,CAACX,SAAN,CAApB,EAAsC,WAAtC,CAApB;;cAEA,IAAM2B,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAwBhB,KAAI,CAACX,SAA7B,CAApB;cAEA,IAAMgC,KAAK,GAAGL,WAAW,CAACM,GAAZ,CAAgBF,OAAhB,EAAyBR,GAAzB,CAAd;cAEAS,KAAK,CAACpB,gBAAN,CAAuB,SAAvB,EAAkC;gBAC9BD,KAAI,CAACmB,eAAL;;gBACAzB,OAAO;cACV,CAHD;cAKA2B,KAAK,CAACpB,gBAAN,CAAuB,OAAvB,EAAgC,UAACC,CAAD,EAAE;gBAC9BF,KAAI,CAACmB,eAAL;;gBACAxB,MAAM,CAACO,CAAD,CAAN;cACH,CAHD;YAIH,CApBM,CAAP;;;;EAqBH,CAvBK;;;;;;;EA6BAV,uCAAN,UAAiBoB,GAAjB,EAA4B;;;;;;;YACxB;YAAA;YAAA,EAAM,KAAKC,gBAAL,EAAN;;;YAAAF;;YACA;YAAA;YAAA,EAAO,IAAIlB,OAAJ,CAAkB,UAACC,OAAD,EAAoBC,MAApB,EAAoC;cACzD,IAAI,CAACK,KAAI,CAACO,EAAV,EAAc;gBACV,OAAOZ,MAAM,CAACa,gBAAgB,CAACM,0BAAjB,EAAD,CAAb;cACH;;cAED,IAAMC,WAAW,GAAGf,KAAI,CAACO,EAAL,CAAQQ,WAAR,CAAoB,CAACf,KAAI,CAACX,SAAN,CAApB,EAAsC,WAAtC,CAApB;;cACA,IAAM2B,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAwBhB,KAAI,CAACX,SAA7B,CAApB;cACA,IAAMkC,QAAQ,GAAGP,WAAW,CAACQ,MAAZ,CAAmBZ,GAAnB,CAAjB;cAEAW,QAAQ,CAACtB,gBAAT,CAA0B,SAA1B,EAAqC;gBACjCD,KAAI,CAACmB,eAAL;;gBACAzB,OAAO;cACV,CAHD;cAKA6B,QAAQ,CAACtB,gBAAT,CAA0B,OAA1B,EAAmC,UAACC,CAAD,EAAE;gBACjCF,KAAI,CAACmB,eAAL;;gBACAxB,MAAM,CAACO,CAAD,CAAN;cACH,CAHD;YAIH,CAlBM,CAAP;;;;EAmBH,CArBK;;;;;;EA0BAV,oCAAN;;;;;;;YACI;YAAA;YAAA,EAAM,KAAKqB,gBAAL,EAAN;;;YAAAF;;YACA;YAAA;YAAA,EAAO,IAAIlB,OAAJ,CAAsB,UAACC,OAAD,EAAoBC,MAApB,EAAoC;cAC7D,IAAI,CAACK,KAAI,CAACO,EAAV,EAAc;gBACV,OAAOZ,MAAM,CAACa,gBAAgB,CAACM,0BAAjB,EAAD,CAAb;cACH;;cAED,IAAMC,WAAW,GAAGf,KAAI,CAACO,EAAL,CAAQQ,WAAR,CAAoB,CAACf,KAAI,CAACX,SAAN,CAApB,EAAsC,UAAtC,CAApB;;cACA,IAAM2B,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAwBhB,KAAI,CAACX,SAA7B,CAApB;cACA,IAAMoC,SAAS,GAAGT,WAAW,CAACU,UAAZ,EAAlB;cAEAD,SAAS,CAACxB,gBAAV,CAA2B,SAA3B,EAAsC,UAACC,CAAD,EAAS;gBAC3C,IAAMC,KAAK,GAAGD,CAAd;;gBACAF,KAAI,CAACmB,eAAL;;gBACAzB,OAAO,CAACS,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAP;cACH,CAJD;cAMAoB,SAAS,CAACxB,gBAAV,CAA2B,OAA3B,EAAqC,UAACC,CAAD,EAAS;gBAC1CF,KAAI,CAACmB,eAAL;;gBACAxB,MAAM,CAACO,CAAD,CAAN;cACH,CAHD;YAIH,CAnBM,CAAP;;;;EAoBH,CAtBK;;;;;;;EA4BAV,wCAAN,UAAkBoB,GAAlB,EAA6B;;;;;;;YACzB;YAAA;YAAA,EAAM,KAAKC,gBAAL,EAAN;;;YAAAF;;YAEA;YAAA;YAAA,EAAO,IAAIlB,OAAJ,CAAqB,UAACC,OAAD,EAAoBC,MAApB,EAAoC;cAC5D,IAAI,CAACK,KAAI,CAACO,EAAV,EAAc;gBACV,OAAOZ,MAAM,CAACa,gBAAgB,CAACM,0BAAjB,EAAD,CAAb;cACH;;cAED,IAAMC,WAAW,GAAGf,KAAI,CAACO,EAAL,CAAQQ,WAAR,CAAoB,CAACf,KAAI,CAACX,SAAN,CAApB,EAAsC,UAAtC,CAApB;;cACA,IAAM2B,WAAW,GAAGD,WAAW,CAACC,WAAZ,CAAwBhB,KAAI,CAACX,SAA7B,CAApB;cACA,IAAMsC,aAAa,GAAGX,WAAW,CAACY,KAAZ,CAAkBhB,GAAlB,CAAtB;cAEAe,aAAa,CAAC1B,gBAAd,CAA+B,SAA/B,EAA0C,UAACC,CAAD,EAAS;gBAC/C,IAAMC,KAAK,GAAGD,CAAd;;gBACAF,KAAI,CAACmB,eAAL;;gBACAzB,OAAO,CAACS,KAAK,CAACC,MAAN,CAAaC,MAAb,KAAwB,CAAzB,CAAP;cACH,CAJD;cAMAsB,aAAa,CAAC1B,gBAAd,CAA+B,OAA/B,EAAwC,UAACC,CAAD,EAAS;gBAC7CF,KAAI,CAACmB,eAAL;;gBACAxB,MAAM,CAACO,CAAD,CAAN;cACH,CAHD;YAIH,CAnBM,CAAP;;;;EAoBH,CAvBK;;;;;;;;EA8BAV,2CAAN;;;;;;;YAGI,IAAI,KAAKe,EAAL,IAAW,KAAKhB,MAApB,EAA4B;cACxB,KAAK4B,eAAL;YACH;;YAGyB;YAAA;YAAA,EAAMtB,MAAM,CAACC,SAAP,CAAiB+B,SAAjB,EAAN;;;YAApBC,iBAAiB,GAAGnB,SAApB;YACAoB,QAAQ,GAAGD,iBAAiB,CAACE,IAAlB,CAAuB,UAACD,QAAD,EAA0B;cAAK,eAAQ,CAACE,IAAT,KAAkB/C,OAAlB;YAAyB,CAA/E,CAAX;;YAGN,IAAI6C,QAAJ,EAAc;cACV;cAAA;cAAA,EAAO,IAAItC,OAAJ,CAAqB,UAACC,OAAD,EAAoBC,MAApB,EAAoC;gBAC5D,IAAMuC,eAAe,GAAGrC,MAAM,CAACC,SAAP,CAAiBqC,cAAjB,CAAgCjD,OAAhC,CAAxB;gBACAgD,eAAe,CAACjC,gBAAhB,CAAiC,SAAjC,EAA4C;kBAAM,cAAO,CAAC,IAAD,CAAP;gBAAa,CAA/D;gBACAiC,eAAe,CAACjC,gBAAhB,CAAiC,OAAjC,EAA0C;kBAAM,aAAM,CAAC,KAAD,CAAN;gBAAa,CAA7D;cACH,CAJM,CAAP;YAKH;;;YAGD;YAAA;YAAA,EAAO,IAAP;;;;EACH,CAtBK;;EAuBV;AAAC","names":["dbName","DB_NAME","version","DB_VERSION","tableName","DB_TABLE_NAME","dbOpen","DatabaseStorage","Promise","resolve","reject","openDB","window","indexedDB","open","_this","addEventListener","e","event","target","result","createObjectStore","db","BrowserAuthError","createDatabaseUnavailableError","close","_a","key","validateDbIsOpen","createDatabaseNotOpenError","transaction","objectStore","dbGet","get","closeConnection","payload","dbPut","put","dbDelete","delete","dbGetKeys","getAllKeys","dbContainsKey","count","databases","existingDatabases","database","find","name","deleteDbRequest","deleteDatabase"],"sources":["../../src/cache/DatabaseStorage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\ninterface IDBDatabaseInfo {\n    name?: string;\n    version?: number;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase|undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\n                const event = e as IDBOpenOnUpgradeNeededEvent;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\",  () => reject(BrowserAuthError.createDatabaseUnavailableError()));\n        });\n    }\n\n    /**\n     * Closes the connection to IndexedDB database when all pending transactions\n     * complete.\n     */\n    closeConnection(): void {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key \n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            \n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGet.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key \n     * @param payload \n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbPut.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n\n            dbDelete.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbDelete.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGetKeys.addEventListener(\"error\",  (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * \n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n            }\n\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n\n            dbContainsKey.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        // Check if database being deleted exists\n\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n        \n        // @ts-ignore\n        const existingDatabases = await window.indexedDB.databases();\n        const database = existingDatabases.find((database: IDBDatabaseInfo) => database.name === DB_NAME );\n\n        // If database exists, delete it\n        if (database) {\n            return new Promise<boolean>((resolve: Function, reject: Function) => {\n                const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n                deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n                deleteDbRequest.addEventListener(\"error\", () => reject(false));\n            });\n        }\n\n        // Database doesn't exist, return true\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}