{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    return __awaiter(this, void 0, void 0, function () {\n      var refreshToken, refreshTokenRequest;\n      return __generator(this, function (_a) {\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci); // no refresh Token\n\n        if (!refreshToken) {\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _b.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _b.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _b.label = 3;\n\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"mappings":"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","names":["__extends","RefreshTokenClient","configuration","performanceClient","_super","acquireToken","request","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","forceCache","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","errorCode","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","refreshToken","readRefreshTokenFromCache","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireTokenMeasurement","startMeasurement","PerformanceEvents","RefreshTokenClientExecuteTokenRequest","correlationId","createTokenRequestBody","requestBody","_b","queryParameters","createTokenQueryParameters","headers","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","then","result","endMeasurement","success","catch","error","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","BaseClientCreateTokenRequestHeaders","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","verbose","UPN","addCcsUpn","BaseClient"],"sources":["../../src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\"; \nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        super(configuration,performanceClient);\n    }\n\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache\n        );\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        // no refresh Token\n        if (!refreshToken) {\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);    \n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\n            .then((result) =>{\n                acquireTokenMeasurement?.endMeasurement({\n                    success: true\n                });\n                return result;\n            })\n            .catch((error) =>{\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const correlationId = request.correlationId;\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId); \n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        \n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        acquireTokenMeasurement?.endMeasurement({\n            success: true\n        });\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}