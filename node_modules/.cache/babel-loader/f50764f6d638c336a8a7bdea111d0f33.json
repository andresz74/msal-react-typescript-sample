{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator =\n/** @class */\nfunction () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    return eQParams;\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"mappings":";;;;;;AAAA;;;AAGG;;AAOH;;AAEG;;AACH;AAAA;AAAA;EAAA,6BAkFC;EAhFG;;;AAGG;;;EACIA,gBAAmB,oBAAnB,GAAP,UAA2BC,WAA3B,EAA8C;IAC1C,IAAIC,WAAW,CAACC,OAAZ,CAAoBF,WAApB,CAAJ,EAAsC;MAClC,MAAMG,wBAAwB,CAACC,2BAAzB,EAAN;IACH;EACJ,CAJM;EAMP;;;AAGG;;;EACIL,gBAAc,eAAd,GAAP,UAAsBM,MAAtB,EAAoC;IAChC,IAAMC,YAAY,GAAG,EAArB;;IAEA,KAAK,IAAMC,KAAX,IAAoBC,WAApB,EAAiC;MAC7BF,YAAY,CAACG,IAAb,CAAkBD,WAAW,CAACD,KAAD,CAA7B;IACH;;IAED,IAAID,YAAY,CAACI,OAAb,CAAqBL,MAArB,IAA+B,CAAnC,EAAsC;MAClC,MAAMF,wBAAwB,CAACQ,wBAAzB,CAAkDN,MAAlD,CAAN;IACH;EACJ,CAVM;;EAYAN,gBAAc,eAAd,GAAP,UAAsBa,MAAtB,EAAoC;IAChC,IAAI;MACAC,IAAI,CAACC,KAAL,CAAWF,MAAX;IACH,CAFD,CAEE,OAAMG,CAAN,EAAS;MACP,MAAMZ,wBAAwB,CAACa,+BAAzB,EAAN;IACH;EACJ,CANM;EAQP;;;;AAIG;;;EACIjB,+CAAP,UAAmCkB,aAAnC,EAA0DC,mBAA1D,EAAqF;IACjF,IAAIjB,WAAW,CAACC,OAAZ,CAAoBe,aAApB,KAAsChB,WAAW,CAACC,OAAZ,CAAoBgB,mBAApB,CAA1C,EAAoF;MAChF,MAAMf,wBAAwB,CAACgB,qCAAzB,EAAN;IACH,CAFD,MAEO;MACH,KAAKC,2BAAL,CAAiCF,mBAAjC;IACH;EACJ,CANM;EAQP;;;AAGG;;;EACInB,gBAA2B,4BAA3B,GAAP,UAAmCmB,mBAAnC,EAA8D;IAC1D,IACI,CACIG,yBAAyB,CAACC,KAD9B,EAEID,yBAAyB,CAACE,IAF9B,EAGEb,OAHF,CAGUQ,mBAHV,IAGiC,CAJrC,EAKE;MACE,MAAMf,wBAAwB,CAACqB,qCAAzB,EAAN;IACH;EACJ,CATM;EAWP;;;AAGG;;;EACIzB,oCAAP,UAAwB0B,QAAxB,EAA8CC,WAA9C,EAA8E;IAC1E,IAAI,CAACD,QAAL,EAAe;MACX,OAAO,EAAP;IACH,CAHyE;;;IAM1EC,WAAW,CAACC,OAAZ,CAAoB,UAACpB,KAAD,EAAQqB,GAAR,EAAW;MAC3B,IAAIH,QAAQ,CAACG,GAAD,CAAZ,EAAmB;QACf,OAAOH,QAAQ,CAACG,GAAD,CAAf;MACH;IACJ,CAJD;IAMA,OAAOH,QAAP;EACH,CAbM;;EAcX,OAAC1B,gBAAD;AAAC,CAlFD","names":["RequestValidator","redirectUri","StringUtils","isEmpty","ClientConfigurationError","createRedirectUriEmptyError","prompt","promptValues","value","PromptValue","push","indexOf","createInvalidPromptError","claims","JSON","parse","e","createInvalidClaimsRequestError","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","CodeChallengeMethodValues","PLAIN","S256","createInvalidCodeChallengeMethodError","eQParams","queryParams","forEach","key"],"sources":["../../src/request/RequestValidator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\nimport { StringDict } from \"../utils/MsalTypes\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string) : void {\n        if (StringUtils.isEmpty(redirectUri)) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string) : void {\n        const promptValues = [];\n\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n\n        if (promptValues.indexOf(prompt) < 0) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n\n    static validateClaims(claims: string) : void {\n        try {\n            JSON.parse(claims);\n        } catch(e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n\n    /**\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\n        if (!eQParams) {\n            return {};\n        }\n\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n\n        return eQParams;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}