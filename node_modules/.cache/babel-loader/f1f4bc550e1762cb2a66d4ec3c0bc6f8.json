{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthenticationScheme, CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []); // generate the user_assertion_hash for OBOAssertion\n\n            _a = this;\n            return [4\n            /*yield*/\n            , this.cryptoUtils.hashString(request.oboAssertion)];\n\n          case 1:\n            // generate the user_assertion_hash for OBOAssertion\n            _a.userAssertionHash = _b.sent();\n            if (!request.skipCache) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            _b.trys.push([3, 5,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority, this.userAssertionHash)];\n\n          case 6:\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * Find idtoken in the cache\r\n   * Find accessToken based on user assertion and account info in the cache\r\n   * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n   * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n\n            if (!cachedAccessToken) {\n              // Must refresh due to non-existent access_token.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Access token expired, will need to renewed\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            cachedIdToken = this.readIdTokenFromCacheForOBO(request, cachedAccessToken.homeAccountId);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || Constants.EMPTY_STRING\n              };\n              cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n            } // increment telemetry cache hit counter\n\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n   * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCacheForOBO = function (request, atHomeAccountId) {\n    var idTokenFilter = {\n      homeAccountId: atHomeAccountId,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    }); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * Fetches the cached access token based on incoming assertion\r\n   * @param clientId\r\n   * @param request\r\n   * @param userAssertionHash\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCacheForOBO = function (clientId, request) {\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      credentialType: credentialType,\n      clientId: clientId,\n      target: this.scopeSet.printScopesLowerCase(),\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash,\n      userAssertionHash: this.userAssertionHash\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority, userAssertionHash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","OnBehalfOfClient","acquireToken","request","scopeSet","ScopeSet","scopes","_a","cryptoUtils","hashString","oboAssertion","_b","skipCache","executeTokenRequest","authority","userAssertionHash","getCachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCacheForOBO","config","authOptions","clientId","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","logger","info","ClientAuthError","createRefreshRequiredError","TimeUtils","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","cachedIdToken","readIdTokenFromCacheForOBO","homeAccountId","cachedAccount","idTokenObject","AuthToken","secret","cryptoInterface","localAccountId","claims","oid","sub","accountInfo","environment","tenantId","realm","username","Constants","EMPTY_STRING","cacheManager","readAccountFromCache","incrementCacheHits","generateAuthenticationResult","account","accessToken","idToken","refreshToken","appMetadata","_c","atHomeAccountId","idTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ID_TOKEN","tenant","credentialCache","getCredentialsFilteredBy","idTokens","Object","keys","map","key","length","authScheme","authenticationScheme","AuthenticationScheme","BEARER","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","ACCESS_TOKEN","accessTokenFilter","target","printScopesLowerCase","tokenType","keyId","sshKid","requestedClaimsHash","accessTokens","numAccessTokens","createMultipleMatchingTokensInCacheError","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","resourceRequestMethod","resourceRequestUri","shrClaims","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","ResponseHandler","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","AADServerParamKeys","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","createQueryString","BaseClient"],"sources":["../../src/client/OnBehalfOfClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { Authority } from \"../authority/Authority\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { ScopeSet } from \"../request/ScopeSet\";\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome, AuthenticationScheme } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\nimport { AuthToken } from \"../account/AuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { AccountInfo } from \"../account/AccountInfo\";\n\n/**\n * On-Behalf-Of client\n */\nexport class OnBehalfOfClient extends BaseClient {\n\n    private scopeSet: ScopeSet;\n    private userAssertionHash: string;\n\n    constructor(configuration: ClientConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * Public API to acquire tokens with on behalf of flow\n     * @param request\n     */\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n        this.scopeSet = new ScopeSet(request.scopes || []);\n\n        // generate the user_assertion_hash for OBOAssertion\n        this.userAssertionHash = await this.cryptoUtils.hashString(request.oboAssertion);\n\n        if (request.skipCache) {\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\n        }\n\n        try {\n            return await this.getCachedAuthenticationResult(request);\n        } catch (e) {\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\n        }\n    }\n\n    /**\n     * look up cache for tokens\n     * Find idtoken in the cache\n     * Find accessToken based on user assertion and account info in the cache\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\n     * @param request\n     */\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\n\n        // look in the cache for the access_token which matches the incoming_assertion\n        const cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n        if (!cachedAccessToken) {\n            // Must refresh due to non-existent access_token.\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n            throw ClientAuthError.createRefreshRequiredError();\n        } else if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // Access token expired, will need to renewed\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            this.logger.info(`OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n            throw ClientAuthError.createRefreshRequiredError();\n        }\n\n        // fetch the idToken from cache\n        const cachedIdToken = this.readIdTokenFromCacheForOBO(request, cachedAccessToken.homeAccountId);\n        let idTokenObject: AuthToken | undefined;\n        let cachedAccount: AccountEntity | null = null;\n        if (cachedIdToken) {\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n            const accountInfo: AccountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || Constants.EMPTY_STRING\n            };\n\n            cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n        }\n\n        // increment telemetry cache hit counter\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n\n        return await ResponseHandler.generateAuthenticationResult(\n            this.cryptoUtils,\n            this.authority,\n            {\n                account: cachedAccount,\n                accessToken: cachedAccessToken,\n                idToken: cachedIdToken,\n                refreshToken: null,\n                appMetadata: null\n            },\n            true,\n            request,\n            idTokenObject);\n    }\n\n    /**\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\n     * @param request\n     */\n    private readIdTokenFromCacheForOBO(request: CommonOnBehalfOfRequest, atHomeAccountId: string): IdTokenEntity | null {\n\n        const idTokenFilter: CredentialFilter = {\n            homeAccountId: atHomeAccountId,\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: CredentialType.ID_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\n        if (idTokens.length < 1) {\n            return null;\n        }\n        return idTokens[0] as IdTokenEntity;\n    }\n\n    /**\n     * Fetches the cached access token based on incoming assertion\n     * @param clientId\n     * @param request\n     * @param userAssertionHash\n     */\n    private readAccessTokenFromCacheForOBO(clientId: string, request: CommonOnBehalfOfRequest) {\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n        /*\n         * Distinguish between Bearer and PoP/SSH token cache types\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        const credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n\n        const accessTokenFilter: CredentialFilter = {\n            credentialType: credentialType,\n            clientId,\n            target: this.scopeSet.printScopesLowerCase(),\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash,\n            userAssertionHash: this.userAssertionHash\n        };\n\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n\n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\n\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n        }\n\n        return accessTokens[0] as AccessTokenEntity;\n    }\n\n    /**\n     * Make a network call to the server requesting credentials\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority, userAssertionHash: string)\n        : Promise<AuthenticationResult | null> {\n\n        const requestBody = this.createTokenRequestBody(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            userAssertionHash\n        );\n\n        return tokenResponse;\n    }\n\n    /**\n     * generate a server request in accepable format\n     * @param request\n     */\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n\n        parameterBuilder.addOboAssertion(request.oboAssertion);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}