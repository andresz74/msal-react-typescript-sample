{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken =\n/** @class */\nfunction () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken };","map":{"version":3,"mappings":";;;;;AAAA;;;AAGG;;AAQH;;AAEG;;AACH;AAAA;AAAA;EAMI,SAAYA,SAAZ,CAAYC,QAAZ,EAA8BC,MAA9B,EAA6C;IACzC,IAAIC,WAAW,CAACC,OAAZ,CAAoBH,QAApB,CAAJ,EAAmC;MAC/B,MAAMI,eAAe,CAACC,2BAAhB,CAA4CL,QAA5C,CAAN;IACH;;IAED,KAAKA,QAAL,GAAgBA,QAAhB;IACA,KAAKM,MAAL,GAAcP,SAAS,CAACQ,kBAAV,CAA6BP,QAA7B,EAAuCC,MAAvC,CAAd;EACH;EAED;;;;AAIG;;;EACIF,+BAAP,UAA0BS,YAA1B,EAAgDP,MAAhD,EAA+D;IAE3D,IAAMQ,YAAY,GAAqBP,WAAW,CAACQ,eAAZ,CAA4BF,YAA5B,CAAvC,CAF2D;;IAK3D,IAAI;MACA,IAAMG,kBAAkB,GAAGF,YAAY,CAACG,UAAxC,CADA;;MAIA,IAAMC,aAAa,GAAGZ,MAAM,CAACa,YAAP,CAAoBH,kBAApB,CAAtB;MACA,OAAOI,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAP;IACH,CAND,CAME,OAAOI,GAAP,EAAY;MACV,MAAMb,eAAe,CAACc,uBAAhB,CAAwCD,GAAxC,CAAN;IACH;EACJ,CAdM;;EAeX,OAAClB,SAAD;AAAC,CAnCD","names":["AuthToken","rawToken","crypto","StringUtils","isEmpty","ClientAuthError","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError"],"sources":["../../src/account/AuthToken.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ICrypto } from \"../crypto/ICrypto\";\n\n/**\n * JWT Token representation class. Parses token string and generates claims object.\n */\nexport class AuthToken {\n\n    // Raw Token string\n    rawToken: string;\n    // Claims inside token\n    claims: TokenClaims;\n    constructor(rawToken: string, crypto: ICrypto) {\n        if (StringUtils.isEmpty(rawToken)) {\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n        }\n\n        this.rawToken = rawToken;\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n    }\n\n    /**\n     * Extract token by decoding the rawToken\n     *\n     * @param encodedToken\n     */\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\n\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\n\n        // token will be decoded to get the username\n        try {\n            const base64TokenPayload = decodedToken.JWSPayload;\n\n            // base64Decode() should throw an error if there is an issue\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\n            return JSON.parse(base64Decoded) as TokenClaims;\n        } catch (err) {\n            throw ClientAuthError.createTokenParsingError(err);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}