{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscovery = new RegionDiscovery(networkInterface);\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n  }\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n      if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n        return AuthorityType.Adfs;\n      }\n\n      return AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        // ROPC policies may not have end_session_endpoint set\n        if (!this.metadata.end_session_endpoint) {\n          throw ClientAuthError.createLogoutNotSupportedError();\n        }\n\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"jwksUri\", {\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.jwks_uri);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _a.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _a.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _c.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(metadata)];\n\n          case 2:\n            metadata = _c.sent();\n            _c.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3\n            /*break*/\n            , 7];\n            if (!((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.updateMetadataWithRegionalInformation(harcodedMetadata)];\n\n          case 5:\n            harcodedMetadata = _c.sent();\n            _c.label = 6;\n\n          case 6:\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.HARDCODED_VALUES];\n\n          case 7:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n   * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = {};\n\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get OAuth endpoints for common authorities.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\n    if (this.canonicalAuthority in EndpointMetadata) {\n      return EndpointMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Update the retrieved metadata with regional information.\r\n   */\n\n\n  Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\n    var _a, _b, _c, _d, _e;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, azureRegion;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)];\n\n          case 1:\n            autodetectedRegionName = _f.sent();\n            azureRegion = ((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : (_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion;\n\n            if (((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = ((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion) === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              return [2\n              /*return*/\n              , Authority.replaceWithRegionalInformation(metadata, azureRegion)];\n            }\n\n            return [2\n            /*return*/\n            , metadata];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n   * @param cachedMetadata\r\n   * @param newMetadata\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _a.sent();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            }\n\n            if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n              metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.HARDCODED_VALUES];\n            } else {\n              // Metadata could not be obtained from config, cache or network\n              throw ClientConfigurationError.createUntrustedAuthorityError();\n            }\n\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      try {\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n\n        if (metadata) {\n          return metadata;\n        }\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, options, match, response, metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            options = {};\n\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n\n            match = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n\n            if (metadata.length === 0) {\n              // If no metadata is returned, authority is untrusted\n              return [2\n              /*return*/\n              , null];\n            }\n\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            if (!match) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get cloud discovery metadata for common authorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\n    if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n      return InstanceDiscoveryMetadata[this.canonicalAuthority];\n    }\n\n    return null;\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n\n\n  Authority.generateAuthority = function (authorityString, azureCloudOptions) {\n    var authorityAzureCloudInstance;\n\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\n    }\n\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n\n    if (metadata.end_session_endpoint) {\n      metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    }\n\n    return metadata;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"mappings":"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","names":["Authority","authority","networkInterface","cacheManager","authorityOptions","proxyUrl","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscovery","RegionDiscovery","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","Constants","EMPTY_STRING","Object","get","pathSegments","canonicalAuthorityUrlComponents","PathSegments","length","toLowerCase","ADFS","AuthorityType","Adfs","Default","protocolMode","urlString","set","url","UrlString","_canonicalAuthorityUrlComponents","getUrlComponents","HostNameAndPort","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","ClientAuthError","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","issuer","jwks_uri","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","ProtocolMode","OIDC","metadataEntity","getAuthorityMetadataByAlias","hostnameAndPort","AuthorityMetadataEntity","updateCanonicalAuthority","updateCloudDiscoveryMetadata","cloudDiscoverySource","_a","preferred_network","updateEndpointMetadata","endpointSource","AuthorityMetadataSource","CACHE","resetExpiresAt","cacheKey","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","harcodedMetadata","getEndpointMetadataFromHardcodedValues","getEndpointMetadataFromNetwork","_c","azureRegionConfiguration","azureRegion","updateMetadataWithRegionalInformation","NETWORK","skipAuthorityMetadataCache","_b","HARDCODED_VALUES","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","ClientConfigurationError","createInvalidAuthorityMetadataError","options","sendGetRequestAsync","response","isOpenIdConfigResponse","body","EndpointMetadata","detectRegion","environmentRegion","autodetectedRegionName","_f","AZURE_REGION_AUTO_DISCOVER_FLAG","_d","RegionDiscoveryOutcomes","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","_e","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","getCloudDiscoveryMetadataFromHarcodedValues","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","AAD_INSTANCE_DISCOVERY_ENDPT","match","isCloudInstanceDiscoveryResponse","InstanceDiscoveryMetadata","_this","matches","knownAuthorities","filter","getDomainFromUrl","authorityString","azureCloudOptions","authorityAzureCloudInstance","azureCloudInstance","AzureCloudInstance","None","DEFAULT_COMMON_TENANT","host","aliases","i","indexOf","isAlias","KNOWN_PUBLIC_CLOUDS","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","isPublicCloudAuthority","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","__assign","buildRegionalAuthorityString"],"sources":["../../src/authority/Authority.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorityType } from \"./AuthorityType\";\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IUri } from \"../url/IUri\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { AuthorityMetadataSource, Constants, RegionDiscoveryOutcomes } from \"../utils/Constants\";\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from \"./AuthorityMetadata\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ProtocolMode } from \"./ProtocolMode\";\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\nimport { AuthorityOptions , AzureCloudInstance } from \"./AuthorityOptions\";\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\nimport { RegionDiscovery } from \"./RegionDiscovery\";\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\nimport { ImdsOptions } from \"./ImdsOptions\";\nimport { AzureCloudOptions } from \"../config/ClientConfiguration\";\n\n/**\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\n * endpoint. It will store the pertinent config data in this object for use during token calls.\n */\nexport class Authority {\n\n    // Canonical authority url string\n    private _canonicalAuthority: UrlString;\n    // Canonicaly authority url components\n    private _canonicalAuthorityUrlComponents: IUri | null;\n    // Network interface to make requests with.\n    protected networkInterface: INetworkModule;\n    // Cache Manager to cache network responses\n    protected cacheManager: ICacheManager;\n    // Protocol mode to construct endpoints\n    private authorityOptions: AuthorityOptions;\n    // Authority metadata\n    private metadata: AuthorityMetadataEntity;\n    // Region discovery service\n    private regionDiscovery: RegionDiscovery;\n    // Region discovery metadata\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\n    // Proxy url string\n    private proxyUrl: string;\n\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions, proxyUrl?: string) {\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\n        this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n    }\n\n    // See above for AuthorityType\n    public get authorityType(): AuthorityType {\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n            return AuthorityType.Adfs;\n        }\n\n        return AuthorityType.Default;\n    }\n\n    /**\n     * ProtocolMode enum representing the way endpoints are constructed.\n     */\n    public get protocolMode(): ProtocolMode {\n        return this.authorityOptions.protocolMode;\n    }\n\n    /**\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\n     */\n    public get options(): AuthorityOptions {\n        return this.authorityOptions;\n    }\n\n    /**\n     * A URL that is the authority set by the developer\n     */\n    public get canonicalAuthority(): string {\n        return this._canonicalAuthority.urlString;\n    }\n\n    /**\n     * Sets canonical authority.\n     */\n    public set canonicalAuthority(url: string) {\n        this._canonicalAuthority = new UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n\n    /**\n     * Get authority components.\n     */\n    public get canonicalAuthorityUrlComponents(): IUri {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n\n        return this._canonicalAuthorityUrlComponents;\n    }\n\n    /**\n     * Get hostname and port i.e. login.microsoftonline.com\n     */\n    public get hostnameAndPort(): string {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n\n    /**\n     * Get tenant for authority.\n     */\n    public get tenant(): string {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n\n    /**\n     * OAuth /authorize endpoint for requests\n     */\n    public get authorizationEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth /token endpoint for requests\n     */\n    public get tokenEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    public get deviceCodeEndpoint(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth logout endpoint for requests\n     */\n    public get endSessionEndpoint(): string {\n        if(this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw ClientAuthError.createLogoutNotSupportedError();\n            }\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * OAuth issuer for requests\n     */\n    public get selfSignedJwtAudience(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.issuer);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Jwks_uri for token signing keys\n     */\n    public get jwksUri(): string {\n        if(this.discoveryComplete()) {\n            const endpoint = this.replacePath(this.metadata.jwks_uri);\n            return this.replaceTenant(endpoint);\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Replaces tenant in url path with current tenant. Defaults to common.\n     * @param urlString\n     */\n    private replaceTenant(urlString: string): string {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n\n    /**\n     * Replaces path such as tenant or policy with the current tenant or policy.\n     * @param urlString\n     */\n    private replacePath(urlString: string): string {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n\n        currentAuthorityParts.forEach((currentPart, index) => {\n            const cachedPart = cachedAuthorityParts[index];\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n\n        return endpoint;\n    }\n\n    /**\n     * The default open id configuration endpoint for any canonical authority.\n     */\n    protected get defaultOpenIdConfigurationEndpoint(): string {\n        if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n\n    /**\n     * Boolean that returns whethr or not tenant discovery has been completed.\n     */\n    discoveryComplete(): boolean {\n        return !!this.metadata;\n    }\n\n    /**\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\n     * and the /authorize, /token and logout endpoints.\n     */\n    public async resolveEndpointsAsync(): Promise<void> {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = new AuthorityMetadataEntity();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\n\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.resetExpiresAt();\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n        }\n\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n\n    /**\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\n     * @param metadataEntity\n     */\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getEndpointMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateEndpointMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        let harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n        metadata = await this.getEndpointMetadataFromNetwork();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await this.updateMetadataWithRegionalInformation(metadata);\n            }\n\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        }    \n\n        if (harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                harcodedMetadata = await this.updateMetadataWithRegionalInformation(\n                    harcodedMetadata\n                );\n            }\n\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return AuthorityMetadataSource.HARDCODED_VALUES;\n        } else {\n            throw ClientAuthError.createUnableToGetOpenidConfigError(\n                this.defaultOpenIdConfigurationEndpoint\n            );\n        }\n    }\n\n    /**\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\n     * @param metadataEntity\n     */\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n\n    /**\n     * Parse authorityMetadata config option\n     */\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\n     * \n     * @param hasHardcodedMetadata boolean\n     */\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        /*\n         * TODO: Add a timeout if the authority exists in our library's \n         * hardcoded list of metadata\n         */\n\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint, options);\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get OAuth endpoints for common authorities.\n     */\n    private getEndpointMetadataFromHardcodedValues(): OpenIdConfigResponse | null {\n        if (this.canonicalAuthority in EndpointMetadata) {\n            return EndpointMetadata[this.canonicalAuthority];\n        }\n\n        return null;\n    }\n\n    /**\n     * Update the retrieved metadata with regional information.\n     */\n    private async updateMetadataWithRegionalInformation(metadata: OpenIdConfigResponse): Promise<OpenIdConfigResponse> {\n        const autodetectedRegionName = await this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl);\n\n        const azureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\n            ? autodetectedRegionName\n            : this.authorityOptions.azureRegionConfiguration?.azureRegion;\n\n        if (this.authorityOptions.azureRegionConfiguration?.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        } else {\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration?.azureRegion === autodetectedRegionName) ?\n                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\n                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n            } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n            }\n        }\n\n        if (azureRegion) {\n            this.regionDiscoveryMetadata.region_used = azureRegion;\n            return Authority.replaceWithRegionalInformation(metadata, azureRegion);\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\n     * @param cachedMetadata\n     * @param newMetadata\n     */\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n            return AuthorityMetadataSource.CONFIG;\n        }\n\n        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n            // No need to update\n            return AuthorityMetadataSource.CACHE;\n        }\n\n        const harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\n        if (metadata) {\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n            return AuthorityMetadataSource.NETWORK;\n        } \n        \n        if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n            metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n            return AuthorityMetadataSource.HARDCODED_VALUES;\n        } else {\n            // Metadata could not be obtained from config, cache or network\n            throw ClientConfigurationError.createUntrustedAuthorityError();\n        }\n    }\n\n    /**\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\n     */\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            try {\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n                if (metadata) {\n                    return metadata;\n                }\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n            }\n        }\n\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n\n        return null;\n    }\n\n    /**\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\n     * \n     * @param hasHardcodedMetadata boolean\n     */\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options: ImdsOptions = {};\n        if (this.proxyUrl) {\n            options.proxyUrl = this.proxyUrl;\n        }\n\n        /*\n         * TODO: Add a timeout if the authority exists in our library's\n         * hardcoded list of metadata\n         */\n\n        let match = null;\n        try {\n            const response =\n                await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse>(\n                    instanceDiscoveryEndpoint,\n                    options\n                );\n            const metadata = isCloudInstanceDiscoveryResponse(response.body)\n                ? response.body.metadata\n                : [];\n            if (metadata.length === 0) {\n                // If no metadata is returned, authority is untrusted\n                return null;\n            }\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(\n                metadata,\n                this.hostnameAndPort\n            );\n        } catch (e) {\n            return null;\n        }\n\n        if (!match) {\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n            match = Authority.createCloudDiscoveryMetadataFromHost(\n                this.hostnameAndPort\n            );\n        }\n        return match;\n    }\n\n    /**\n     * Get cloud discovery metadata for common authorities \n     */\n    private getCloudDiscoveryMetadataFromHarcodedValues(): CloudDiscoveryMetadata | null {\n        if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n            return InstanceDiscoveryMetadata[this.canonicalAuthority];\n        }\n\n        return null;\n    }\n\n    /**\n     * Helper function to determine if this host is included in the knownAuthorities config option\n     */\n    private isInKnownAuthorities(): boolean {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n\n        return matches.length > 0;\n    }\n\n    /**\n     * helper function to populate the authority based on azureCloudOptions\n     * @param authorityString\n     * @param azureCloudOptions\n     */\n    static generateAuthority(authorityString: string, azureCloudOptions?: AzureCloudOptions): string {\n        let authorityAzureCloudInstance;\n\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n\n    /**\n     * Creates cloud discovery metadata object from a given host\n     * @param host\n     */\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [host]\n        };\n    }\n\n    /**\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\n     * @param response\n     * @param authority\n     */\n    static getCloudDiscoveryMetadataFromNetworkResponse(response: CloudDiscoveryMetadata[], authority: string): CloudDiscoveryMetadata | null {\n        for (let i = 0; i < response.length; i++) {\n            const metadata = response[i];\n            if (metadata.aliases.indexOf(authority) > -1) {\n                return metadata;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * helper function to generate environment from authority object\n     */\n    getPreferredCache(): string {\n        if(this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n        }\n    }\n\n    /**\n     * Returns whether or not the provided host is an alias of this authority instance\n     * @param host\n     */\n    isAlias(host: string): boolean {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n\n    /**\n     * Checks whether the provided host is that of a public cloud authority\n     *\n     * @param authority string\n     * @returns bool\n     */\n    static isPublicCloudAuthority(host: string): boolean {\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n\n    /**\n     * Rebuild the authority string with the region\n     *\n     * @param host string\n     * @param region string\n     */\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new UrlString(host);\n        authorityUrlInstance.validateAsUri();\n\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\n\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n\n        // Include the query string portion of the url\n        const url = UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n\n        return url;\n    }\n\n    /**\n     * Replace the endpoints in the metadata object with their regional equivalents.\n     *\n     * @param metadata OpenIdConfigResponse\n     * @param azureRegion string\n     */\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n\n        if (metadata.end_session_endpoint) {\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n        }\n\n        return metadata;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}