{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\n\nvar PerformanceEvents;\n\n(function (PerformanceEvents) {\n  /**\r\n   * acquireTokenByCode API (msal-browser and msal-node).\r\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n   */\n  PerformanceEvents[\"AcquireTokenByCode\"] = \"acquireTokenByCode\";\n  /**\r\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n   * Used to renew an access token using a refresh token against the token endpoint.\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByRefreshToken\"] = \"acquireTokenByRefreshToken\";\n  /**\r\n   * acquireTokenSilent API (msal-browser and msal-node).\r\n   * Used to silently acquire a new access token (from the cache or the network).\r\n   */\n\n  PerformanceEvents[\"AcquireTokenSilent\"] = \"acquireTokenSilent\";\n  /**\r\n   * acquireTokenSilentAsync (msal-browser).\r\n   * Internal API for acquireTokenSilent.\r\n   */\n\n  PerformanceEvents[\"AcquireTokenSilentAsync\"] = \"acquireTokenSilentAsync\";\n  /**\r\n   * acquireTokenPopup (msal-browser).\r\n   * Used to acquire a new access token interactively through pop ups\r\n   */\n\n  PerformanceEvents[\"AcquireTokenPopup\"] = \"acquireTokenPopup\";\n  /**\r\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n   */\n\n  PerformanceEvents[\"CryptoOptsGetPublicKeyThumbprint\"] = \"cryptoOptsGetPublicKeyThumbprint\";\n  /**\r\n   * signJwt API in CryptoOpts class (msal-browser).\r\n   * Used to signed a pop token.\r\n   */\n\n  PerformanceEvents[\"CryptoOptsSignJwt\"] = \"cryptoOptsSignJwt\";\n  /**\r\n   * acquireToken API in the SilentCacheClient class (msal-browser).\r\n   * Used to read access tokens from the cache.\r\n   */\n\n  PerformanceEvents[\"SilentCacheClientAcquireToken\"] = \"silentCacheClientAcquireToken\";\n  /**\r\n   * acquireToken API in the SilentIframeClient class (msal-browser).\r\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n   */\n\n  PerformanceEvents[\"SilentIframeClientAcquireToken\"] = \"silentIframeClientAcquireToken\";\n  /**\r\n   * acquireToken API in SilentRereshClient (msal-browser).\r\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n   */\n\n  PerformanceEvents[\"SilentRefreshClientAcquireToken\"] = \"silentRefreshClientAcquireToken\";\n  /**\r\n   * ssoSilent API (msal-browser).\r\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n   */\n\n  PerformanceEvents[\"SsoSilent\"] = \"ssoSilent\";\n  /**\r\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n   * Used to load authority metadata for a request.\r\n   */\n\n  PerformanceEvents[\"StandardInteractionClientGetDiscoveredAuthority\"] = \"standardInteractionClientGetDiscoveredAuthority\";\n  /**\r\n   * acquireToken APIs in msal-browser.\r\n   * Used to make an /authorize endpoint call with native brokering enabled.\r\n   */\n\n  PerformanceEvents[\"FetchAccountIdWithNativeBroker\"] = \"fetchAccountIdWithNativeBroker\";\n  /**\r\n   * acquireToken API in NativeInteractionClient class (msal-browser).\r\n   * Used to acquire a token from Native component when native brokering is enabled.\r\n   */\n\n  PerformanceEvents[\"NativeInteractionClientAcquireToken\"] = \"nativeInteractionClientAcquireToken\";\n  /**\r\n   * Time spent on the network for refresh token acquisition\r\n   */\n\n  PerformanceEvents[\"RefreshTokenClientExecuteTokenRequest\"] = \"refreshTokenClientExecuteTokenRequest\";\n  /**\r\n   * Time spent creating default headers for requests to token endpoint\r\n   */\n\n  PerformanceEvents[\"BaseClientCreateTokenRequestHeaders\"] = \"baseClientCreateTokenRequestHeaders\";\n  /**\r\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n   */\n\n  PerformanceEvents[\"BrokerHandhshake\"] = \"brokerHandshake\";\n  /**\r\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByRefreshTokenInBroker\"] = \"acquireTokenByRefreshTokenInBroker\";\n  /**\r\n   * acquireToken API in BrokerClientApplication.\r\n   * Used to acquire a token on behalf of the embedded application (PW-Broker).\r\n   */\n\n  PerformanceEvents[\"AcquireTokenByBroker\"] = \"acquireTokenByBroker\";\n})(PerformanceEvents || (PerformanceEvents = {}));\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\n\n\nvar PerformanceEventStatus;\n\n(function (PerformanceEventStatus) {\n  PerformanceEventStatus[PerformanceEventStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  PerformanceEventStatus[PerformanceEventStatus[\"InProgress\"] = 1] = \"InProgress\";\n  PerformanceEventStatus[PerformanceEventStatus[\"Completed\"] = 2] = \"Completed\";\n})(PerformanceEventStatus || (PerformanceEventStatus = {}));\n\nexport { PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"mappings":";;AAAA;;;AAGG;;AAEH;;;;;AAKG;;IACSA;;AAAZ,WAAYA,iBAAZ,EAA6B;EAEzB;;;AAGG;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;;AAGG;;EACHA;EAEA;;AAEG;;EACHA;EAEA;;AAEG;;EACHA;EAEA;;AAEG;;EACHA;EAEA;;AAEG;;EACHA;EAEA;;;AAGG;;EACHA;AACH,CA/GD,EAAYA,iBAAiB,KAAjBA,iBAAiB,GA+G5B,EA/G4B,CAA7B;AAiHA;;;;;AAKG;;;IACSC;;AAAZ,WAAYA,sBAAZ,EAAkC;EAC9BA;EACAA;EACAA;AACH,CAJD,EAAYA,sBAAsB,KAAtBA,sBAAsB,GAIjC,EAJiC,CAAlC","names":["PerformanceEvents","PerformanceEventStatus"],"sources":["../../../src/telemetry/performance/PerformanceEvent.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nexport enum PerformanceEvents {\n\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode = \"acquireTokenByCode\",\n\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken = \"acquireTokenByRefreshToken\",\n\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent = \"acquireTokenSilent\",\n\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync = \"acquireTokenSilentAsync\",\n\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup = \"acquireTokenPopup\",\n\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint = \"cryptoOptsGetPublicKeyThumbprint\",\n\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt = \"cryptoOptsSignJwt\",\n\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken = \"silentCacheClientAcquireToken\",\n\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken = \"silentIframeClientAcquireToken\",\n\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken = \"silentRefreshClientAcquireToken\",\n\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent = \"ssoSilent\",\n\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority = \"standardInteractionClientGetDiscoveredAuthority\",\n\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker = \"fetchAccountIdWithNativeBroker\",\n\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken = \"nativeInteractionClientAcquireToken\",\n\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest = \"refreshTokenClientExecuteTokenRequest\",\n\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders = \"baseClientCreateTokenRequestHeaders\",\n\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake = \"brokerHandshake\",\n\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker = \"acquireTokenByRefreshTokenInBroker\",\n\n    /**\n     * acquireToken API in BrokerClientApplication.\n     * Used to acquire a token on behalf of the embedded application (PW-Broker).\n     */\n    AcquireTokenByBroker = \"acquireTokenByBroker\"\n}\n\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nexport enum PerformanceEventStatus {\n    NotStarted,\n    InProgress,\n    Completed\n}\n\n/**\n * Performance measurement taken by the library, including metadata about the request and application.\n *\n * @export\n * @typedef {PerformanceEvent}\n */\nexport type PerformanceEvent = {\n    /**\n     * Unique id for the event\n     *\n     * @type {string}\n     */\n    eventId: string,\n\n    /**\n     * State of the perforance measure.\n     *\n     * @type {PerformanceEventStatus}\n     */\n    status: PerformanceEventStatus,\n\n    /**\n     * Login authority used for the request\n     *\n     * @type {string}\n     */\n    authority: string,\n\n    /**\n     * Client id for the application\n     *\n     * @type {string}\n     */\n    clientId: string\n\n    /**\n     * Correlation ID used for the request\n     *\n     * @type {string}\n     */\n    correlationId: string,\n\n    /**\n     * End-to-end duration in milliseconds.\n     * @date 3/22/2022 - 3:40:05 PM\n     *\n     * @type {number}\n     */\n    durationMs?: number,\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    endPageVisibility?: string | null,\n\n    /**\n     * Whether the result was retrieved from the cache.\n     *\n     * @type {(boolean | null)}\n     */\n    fromCache?: boolean | null,\n\n    /**\n     * Event name (usually in the form of classNameFunctionName)\n     *\n     * @type {PerformanceEvents}\n     */\n    name: PerformanceEvents,\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    startPageVisibility?: string | null,\n\n    /**\n     * Unix millisecond timestamp when the event was initiated.\n     *\n     * @type {number}\n     */\n    startTimeMs: number,\n\n    /**\n     * Whether or the operation completed successfully.\n     *\n     * @type {(boolean | null)}\n     */\n    success?: boolean | null,\n\n    /**\n     * Add specific error code in case of failure\n     *\n     * @type {string}\n     */\n    errorCode?: string,\n\n    /**\n     * Add specific sub error code in case of failure\n     *\n     * @type {string}\n     */\n    subErrorCode?: string,\n\n    /**\n     * Name of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryName: string,\n\n    /**\n     * Version of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryVersion: string,\n\n    /**\n     * Size of the id token\n     *\n     * @type {number}\n     */\n    idTokenSize?: number,\n\n    /**\n     * \n     * Size of the access token\n     *\n     * @type {number}\n     */\n\n    accessTokenSize?: number,\n\n    /**\n     * Application name as specified by the app.\n     *\n     * @type {?string}\n     */\n    appName?: string,\n\n    /**\n     * Application version as specified by the app.\n     *\n     * @type {?string}\n     */\n    appVersion?: string,\n\n    /**\n     * Whether the response is from a native component (e.g., WAM)\n     *\n     * @type {?boolean}\n     */\n    isNativeBroker?: boolean\n};\n"]},"metadata":{},"sourceType":"module"}