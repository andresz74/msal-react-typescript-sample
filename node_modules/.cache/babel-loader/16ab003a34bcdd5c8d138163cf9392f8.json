{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthError, Constants, PerformanceEvents, StringUtils, PromptValue, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionType } from '../utils/BrowserConstants.js';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentIframeClient =\n/** @class */\nfunction (_super) {\n  __extends(SilentIframeClient, _super);\n\n  function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n\n    _this.apiId = apiId;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\r\n   * @param request\r\n   */\n\n\n  SilentIframeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenByIframe called\");\n            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId); // Check that we have some SSO data\n\n            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n              this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n            } // Check that prompt is set to none, throw error if it is set to anything else.\n\n\n            if (request.prompt && request.prompt !== PromptValue.NONE) {\n              acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n            }\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(__assign(__assign({}, request), {\n              prompt: PromptValue.NONE\n            }), InteractionType.Silent)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            return [4\n            /*yield*/\n            , this.silentTokenHelper(authClient, silentRequest).then(function (result) {\n              acquireTokenMeasurement.endMeasurement({\n                success: true,\n                fromCache: false\n              });\n              return result;\n            })];\n\n          case 4:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 5:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n              errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,\n              subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,\n              success: false\n            });\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Currently Unsupported\r\n   */\n\n\n  SilentIframeClient.prototype.logout = function () {\n    // Synchronous so we must reject\n    return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n  };\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n\n\n  SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(silentRequest)];\n\n          case 1:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, silentRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n            }))];\n\n          case 2:\n            navigateUrl = _a.sent();\n            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n            return [4\n            /*yield*/\n            , silentHandler.initiateAuthRequest(navigateUrl)];\n\n          case 3:\n            msalFrame = _a.sent();\n            return [4\n            /*yield*/\n            , silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];\n\n          case 4:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, silentRequest), {\n                state: userRequestState,\n                prompt: PromptValue.NONE\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            } // Handle response from hash string\n\n\n            return [2\n            /*return*/\n            , silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n        }\n      });\n    });\n  };\n\n  return SilentIframeClient;\n}(StandardInteractionClient);\n\nexport { SilentIframeClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","nativeStorage","SilentIframeClient","request","verbose","acquireTokenMeasurement","startMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","StringUtils","isEmpty","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","endMeasurement","success","BrowserAuthError","createSilentPromptValueError","initializeAuthorizationRequest","__assign","InteractionType","Silent","silentRequest","_a","browserStorage","updateCacheEntries","state","nonce","authority","Constants","EMPTY_STRING","serverTelemetryManager","initializeServerTelemetryManager","createAuthCodeClient","azureCloudOptions","authClient","silentTokenHelper","then","result","fromCache","e_1","AuthError","setCorrelationId","cacheFailedRequest","cleanRequestByState","errorCode","undefined","subErrorCode","subError","Promise","reject","createSilentLogoutUnsupportedError","initializeAuthorizationCodeRequest","authCodeRequest","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","navigateUrl","silentHandler","SilentHandler","system","navigateFrameWait","initiateAuthRequest","msalFrame","monitorIframeForHash","iframeHashTimeout","hash","serverParams","UrlString","getDeserializedHash","validateAndExtractStateFromHash","accountId","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","finally","handleCodeResponseFromHash","networkClient","StandardInteractionClient"],"sources":["../../src/interaction_client/SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, ICrypto, Logger, StringUtils, PromptValue, CommonAuthorizationCodeRequest, AuthorizationCodeClient, AuthError, Constants, UrlString, ServerAuthorizationCodeResponse, ProtocolUtils, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, apiId: ApiId, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none\n     * @param request\n     */\n    async acquireToken(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenByIframe called\");\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n        // Check that we have some SSO data\n        if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n\n        // Check that prompt is set to none, throw error if it is set to anything else.\n        if (request.prompt && request.prompt !== PromptValue.NONE) {\n            acquireTokenMeasurement.endMeasurement({\n                success: false\n            });\n            throw BrowserAuthError.createSilentPromptValueError(request.prompt);\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await this.initializeAuthorizationRequest({\n            ...request,\n            prompt: PromptValue.NONE\n        }, InteractionType.Silent);\n        this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            return await this.silentTokenHelper(authClient, silentRequest).then((result: AuthenticationResult) => {\n                acquireTokenMeasurement.endMeasurement({\n                    success: true,\n                    fromCache: false\n                });\n                return result;\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            acquireTokenMeasurement.endMeasurement({\n                errorCode: e instanceof AuthError && e.errorCode || undefined,\n                subErrorCode: e instanceof AuthError && e.subError || undefined,\n                success: false\n            });\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(authClient: AuthorizationCodeClient, silentRequest: AuthorizationUrlRequest): Promise<AuthenticationResult> {\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(silentRequest);\n        // Create authorize request url\n        const navigateUrl = await authClient.getAuthCodeUrl({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n        });\n        // Create silent handler\n        const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system.navigateFrameWait);\n        // Get the frame handle for the silent request\n        const msalFrame = await silentHandler.initiateAuthRequest(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n        const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n            }\n            const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n            const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return nativeInteractionClient.acquireToken({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: PromptValue.NONE\n            }).finally(() => {\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n\n        // Handle response from hash string\n        return silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}