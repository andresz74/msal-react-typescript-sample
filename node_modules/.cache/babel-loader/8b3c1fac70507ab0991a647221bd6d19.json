{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __spread, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AccountEntity, CacheManager, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, Constants, PersistentCacheKeys, ClientAuthError, ThrottlingEntity, StringUtils, ProtocolUtils, CcsCredentialType, IdToken, DEFAULT_CRYPTO_IMPLEMENTATION } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\n\nvar BrowserCacheManager =\n/** @class */\nfunction (_super) {\n  __extends(BrowserCacheManager, _super);\n\n  function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\n    var _this = _super.call(this, clientId, cryptoImpl) || this; // Cookie life calculation (hours * minutes * seconds * ms)\n\n\n    _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    _this.cacheConfig = cacheConfig;\n    _this.logger = logger;\n    _this.internalStorage = new MemoryStorage();\n    _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\n    _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation); // Migrate any cache entries from older versions of MSAL.\n\n    _this.migrateCacheEntries();\n\n    return _this;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n\n    }\n\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  };\n  /**\r\n   *\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  };\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntries = function () {\n    var _this = this;\n\n    var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\n    var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\n    var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\n    var idTokenValue = this.browserStorage.getItem(idTokenKey);\n    var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    var errorValue = this.browserStorage.getItem(errorKey);\n    var errorDescValue = this.browserStorage.getItem(errorDescKey);\n    var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach(function (cacheKey, index) {\n      return _this.migrateCacheEntry(cacheKey, values[index]);\n    });\n  };\n  /**\r\n   * Utility function to help with migration.\r\n   * @param newKey\r\n   * @param value\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  };\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n\n\n  BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\n    try {\n      var parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getItem = function (key) {\n    return this.browserStorage.getItem(key);\n  };\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setItem = function (key, value) {\n    this.browserStorage.setItem(key, value);\n  };\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccount = function (accountKey) {\n    var account = this.getItem(accountKey);\n\n    if (!account) {\n      return null;\n    }\n\n    var parsedAccount = this.validateAndParseJson(account);\n\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      return null;\n    }\n\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  };\n  /**\r\n   * set account entity in the platform cache\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccount = function (account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    var key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n  };\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\n    var value = this.getItem(idTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedIdToken = this.validateAndParseJson(value);\n\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  };\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    var idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n  };\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\n    var value = this.getItem(accessTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedAccessToken = this.validateAndParseJson(value);\n\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  };\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    var accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n  };\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\n    var value = this.getItem(refreshTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedRefreshToken = this.validateAndParseJson(value);\n\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  };\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    var refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n  };\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\n    var value = this.getItem(appMetadataKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  };\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n\n\n  BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    var appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  };\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\n    var value = this.getItem(serverTelemetryKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  };\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n\n\n  BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\n    var value = this.internalStorage.getItem(key);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n\n    return null;\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\n    var _this = this;\n\n    var allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(function (key) {\n      return _this.isAuthorityMetadata(key);\n    });\n  };\n  /**\r\n   * Sets wrapper metadata in memory\r\n   * @param wrapperSKU\r\n   * @param wrapperVersion\r\n   */\n\n\n  BrowserCacheManager.prototype.setWrapperMetadata = function (wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  };\n  /**\r\n   * Returns wrapper metadata from in-memory storage\r\n   */\n\n\n  BrowserCacheManager.prototype.getWrapperMetadata = function () {\n    var sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    var version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  };\n  /**\r\n   *\r\n   * @param entity\r\n   */\n\n\n  BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  };\n  /**\r\n   * Gets the active account\r\n   */\n\n\n  BrowserCacheManager.prototype.getActiveAccount = function () {\n    var activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"No active account filters cache schema found, looking for legacy schema\");\n      var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      var activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"No active account found\");\n        return null;\n      }\n\n      var activeAccount = this.getAccountInfoByFilter({\n        localAccountId: activeAccountValueLocal\n      })[0] || null;\n\n      if (activeAccount) {\n        this.logger.trace(\"Legacy active account cache schema found\");\n        this.logger.trace(\"Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n\n      return null;\n    }\n\n    var activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n\n    if (activeAccountValueObj) {\n      this.logger.trace(\"Active account filters schema found\");\n      return this.getAccountInfoByFilter({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId\n      })[0] || null;\n    }\n\n    this.logger.trace(\"No active account found\");\n    return null;\n  };\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.setActiveAccount = function (account) {\n    var activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      var activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  };\n  /**\r\n   * Gets a list of accounts that match all of the filters provided\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\n    var allAccounts = this.getAllAccounts();\n    return allAccounts.filter(function (accountObj) {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n  /**\r\n   * Checks the cache for accounts matching loginHint or SID\r\n   * @param loginHint\r\n   * @param sid\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountInfoByHints = function (loginHint, sid) {\n    var matchingAccounts = this.getAllAccounts().filter(function (accountInfo) {\n      if (sid) {\n        var accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\n        return sid === accountSid;\n      }\n\n      if (loginHint) {\n        return loginHint === accountInfo.username;\n      }\n\n      return false;\n    });\n\n    if (matchingAccounts.length === 1) {\n      return matchingAccounts[0];\n    } else if (matchingAccounts.length > 1) {\n      throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n    }\n\n    return null;\n  };\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\n    var value = this.getItem(throttlingCacheKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    var parsedThrottlingCache = this.validateAndParseJson(value);\n\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  };\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n\n\n  BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  };\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      var itemCookie = this.getItemCookie(key);\n\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n\n    var value = this.temporaryCacheStorage.getItem(key);\n\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        var item = this.browserStorage.getItem(key);\n\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  };\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\r\n   * Removes the cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeItem = function (key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n\n    return true;\n  };\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.containsKey = function (key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  };\n  /**\r\n   * Gets all keys in window.\r\n   */\n\n\n  BrowserCacheManager.prototype.getKeys = function () {\n    return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\n  };\n  /**\r\n   * Clears all cache entries created by MSAL.\r\n   */\n\n\n  BrowserCacheManager.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Removes all accounts and their credentials\n            return [4\n            /*yield*/\n            , this.removeAllAccounts()];\n\n          case 1:\n            // Removes all accounts and their credentials\n            _a.sent();\n\n            this.removeAppMetadata(); // Removes all remaining MSAL cache items\n\n            this.getKeys().forEach(function (cacheKey) {\n              // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n              if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) {\n                _this.removeItem(cacheKey);\n              }\n            });\n            this.internalStorage.clear();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Add value to cookies\r\n   * @param cookieName\r\n   * @param cookieValue\r\n   * @param expires\r\n   */\n\n\n  BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\n    var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;SameSite=Lax;\";\n\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Get one item by key from cookies\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\n    var name = encodeURIComponent(cookieName) + \"=\";\n    var cookieList = document.cookie.split(\";\");\n\n    for (var i = 0; i < cookieList.length; i++) {\n      var cookie = cookieList[i];\n\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n   */\n\n\n  BrowserCacheManager.prototype.clearMsalCookies = function () {\n    var _this = this;\n\n    var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\n    var cookieList = document.cookie.split(\";\");\n    cookieList.forEach(function (cookie) {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        var cookieKey = cookie.split(\"=\")[0];\n\n        _this.clearItemCookie(cookieKey);\n      }\n    });\n  };\n  /**\r\n   * Clear an item in the cookies by key\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\n    this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n  };\n  /**\r\n   * Get cookie expiration time\r\n   * @param cookieLifeDays\r\n   */\n\n\n  BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  };\n  /**\r\n   * Gets the cache object referenced by the browser\r\n   */\n\n\n  BrowserCacheManager.prototype.getCache = function () {\n    return this.browserStorage;\n  };\n  /**\r\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n   */\n\n\n  BrowserCacheManager.prototype.setCache = function () {// sets nothing\n  };\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n\n\n  BrowserCacheManager.prototype.generateCacheKey = function (key) {\n    var generatedKey = this.validateAndParseJson(key);\n\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n\n      return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\n    }\n\n    return JSON.stringify(key);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\n  };\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\n  };\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n\n\n  BrowserCacheManager.prototype.generateStateKey = function (stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\n  };\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\n    var stateCacheKey = this.generateStateKey(cachedState);\n    var state = this.getTemporaryCache(stateCacheKey);\n\n    if (!state) {\n      return null;\n    }\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  };\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\"); // Cache the request state\n\n    var stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false); // Cache the nonce\n\n    var nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false); // Cache authorityKey\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n    if (account) {\n      var ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      var ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  };\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.resetRequestCache = function (state) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\"); // check state and remove associated cache items\n\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(function (key) {\n        if (key.indexOf(state) !== -1) {\n          _this.removeItem(key);\n        }\n      });\n    } // delete generic interactive request parameters\n\n\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  };\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\"); // Interaction is completed - remove interaction status.\n\n    if (stateString) {\n      var stateKey = this.generateStateKey(stateString);\n      var cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n\n    this.clearMsalCookies();\n  };\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\"); // Loop through all keys to find state key\n\n    this.getKeys().forEach(function (key) {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      } // Retrieve state value, return if not a valid value\n\n\n      var stateValue = _this.temporaryCacheStorage.getItem(key);\n\n      if (!stateValue) {\n        return;\n      } // Extract state and ensure it matches given InteractionType, then clean request cache\n\n\n      var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\n\n      if (parsedState && parsedState.interactionType === interactionType) {\n        _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\n\n        _this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n    this.setInteractionInProgress(false);\n  };\n\n  BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  };\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\"); // Get token request from cache and parse as TokenExchangeParameters.\n\n    var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n\n    var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)); // Get cached authority and use if no authority is cached with request.\n\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      var authorityCacheKey = this.generateAuthorityKey(state);\n      var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n\n      parsedRequest.authority = cachedAuthority;\n    }\n\n    return parsedRequest;\n  };\n  /**\r\n   * Gets cached native request for redirect flows\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedNativeRequest = function () {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    var cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n\n    var parsedRequest = this.validateAndParseJson(cachedRequest);\n\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n\n    return parsedRequest;\n  };\n\n  BrowserCacheManager.prototype.isInteractionInProgress = function (matchClientId) {\n    var clientId = this.getInteractionInProgress();\n\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  };\n\n  BrowserCacheManager.prototype.getInteractionInProgress = function () {\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n    return this.getTemporaryCache(key, false);\n  };\n\n  BrowserCacheManager.prototype.setInteractionInProgress = function (inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    var key = Constants.CACHE_PREFIX + \".\" + TemporaryCacheKeys.INTERACTION_STATUS_KEY;\n\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw BrowserAuthError.createInteractionInProgressError();\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeItem(key);\n    }\n  };\n  /**\r\n   * Returns username retrieved from ADAL or MSAL v1 idToken\r\n   */\n\n\n  BrowserCacheManager.prototype.getLegacyLoginHint = function () {\n    // Only check for adal/msal token if no SSO params are being used\n    var adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    } // Check for cached MSAL v1 id token\n\n\n    var msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n\n    if (msalIdTokenString) {\n      this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n\n    var cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n\n    if (cachedIdTokenString) {\n      var cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n\n      if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return cachedIdToken.claims.preferred_username;\n      } else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return cachedIdToken.claims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Updates a credential's cache key if the current cache key is outdated\r\n   */\n\n\n  BrowserCacheManager.prototype.updateCredentialCacheKey = function (currentCacheKey, credential) {\n    var updatedCacheKey = credential.generateCredentialKey();\n\n    if (currentCacheKey !== updatedCacheKey) {\n      var cacheItem = this.getItem(currentCacheKey);\n\n      if (cacheItem) {\n        this.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(\"Updated an outdated \" + credential.credentialType + \" cache key\");\n        return updatedCacheKey;\n      } else {\n        this.logger.error(\"Attempted to update an outdated \" + credential.credentialType + \" cache key but no item matching the outdated key was found in storage\");\n      }\n    }\n\n    return currentCacheKey;\n  };\n\n  return BrowserCacheManager;\n}(CacheManager);\n\nvar DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {\n  var cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"mappings":"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","names":["__extends","clientId","cacheConfig","cryptoImpl","logger","_super","_this","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","migrateCacheEntries","BrowserCacheManager","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","jsonValue","parsedJson","JSON","parse","error","key","setItem","accountKey","account","parsedAccount","validateAndParseJson","AccountEntity","isAccountEntity","CacheManager","toObject","trace","generateAccountKey","stringify","parsedIdToken","IdTokenEntity","isIdTokenEntity","idToken","generateCredentialKey","accessTokenKey","parsedAccessToken","AccessTokenEntity","isAccessTokenEntity","accessToken","refreshTokenKey","parsedRefreshToken","RefreshTokenEntity","isRefreshTokenEntity","refreshToken","appMetadataKey","parsedMetadata","AppMetadataEntity","isAppMetadataEntity","appMetadata","generateAppMetadataKey","serverTelemetryKey","ServerTelemetryEntity","isServerTelemetryEntity","serverTelemetry","AuthorityMetadataEntity","isAuthorityMetadataEntity","allKeys","getKeys","filter","isAuthorityMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","sku","EMPTY_STRING","version","entity","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoByFilter","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","activeAccountKey","activeAccountValue","removeItem","accountFilter","allAccounts","getAllAccounts","accountObj","username","toLowerCase","tenantId","environment","loginHint","sid","matchingAccounts","accountInfo","accountSid","idTokenClaims","length","ClientAuthError","createMultipleMatchingAccountsInCacheError","throttlingCacheKey","parsedThrottlingCache","ThrottlingEntity","isThrottlingEntity","throttlingCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","item","setItemCookie","clearItemCookie","containsKey","removeAllAccounts","_a","removeAppMetadata","indexOf","clear","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","charAt","substring","decodeURIComponent","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","COOKIE_LIFE_MULTIPLIER","toUTCString","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","stateString","stateId","ProtocolUtils","parseRequestState","libraryState","id","TemporaryCacheKeys","AUTHORITY","NONCE_IDTOKEN","REQUEST_STATE","cachedState","stateCacheKey","generateStateKey","state","getTemporaryCache","authorityCacheKey","generateAuthorityKey","nonce","authorityInstance","nonceCacheKey","generateNonceKey","ccsCredential","credential","type","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","stateKey","infoPii","resetRequestCache","clearMsalCookies","interactionType","stateValue","parsedState","BrowserProtocolUtils","extractBrowserRequestState","authCodeRequest","browserCrypto","encodedValue","base64Encode","encodedTokenRequest","BrowserAuthError","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","cachedRequest","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","createInteractionInProgressError","adalIdTokenString","msalIdTokenString","cachedIdTokenString","cachedIdToken","IdToken","claims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["../../src/cache/BrowserCacheManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants, PersistentCacheKeys, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager, ServerTelemetryEntity, ThrottlingEntity, ProtocolUtils, Logger, AuthorityMetadataEntity, DEFAULT_CRYPTO_IMPLEMENTATION, AccountInfo, ActiveAccountFilters, CcsCredential, CcsCredentialType, IdToken, ValidCredentialType, ClientAuthError } from \"@azure/msal-common\";\nimport { CacheOptions } from \"../config/Configuration\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { BrowserCacheLocation, InteractionType, TemporaryCacheKeys, InMemoryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\nimport { IWindowStorage } from \"./IWindowStorage\";\nimport { BrowserProtocolUtils } from \"../utils/BrowserProtocolUtils\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Client id of application. Used in cache keys to partition cache correctly in the case of multiple instances of MSAL.\n    protected logger: Logger;\n\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n\n    constructor(clientId: string, cacheConfig: Required<CacheOptions>, cryptoImpl: ICrypto, logger: Logger) {\n        super(clientId, cryptoImpl);\n\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.cacheLocation);\n\n        // Migrate any cache entries from older versions of MSAL.\n        this.migrateCacheEntries();\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(cacheLocation);\n                } catch (e) {\n                    this.logger.verbose(e);\n                    break;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                break;\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     *\n     * @param cacheLocation\n     */\n    protected setupTemporaryCacheStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(BrowserCacheLocation.SessionStorage);\n                } catch (e) {\n                    this.logger.verbose(e);\n                    return this.internalStorage;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                return this.internalStorage;\n        }\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n\n        keysToMigrate.forEach((cacheKey:string, index: number) => this.migrateCacheEntry(cacheKey, values[index]));\n    }\n\n    /**\n     * Utility function to help with migration.\n     * @param newKey\n     * @param value\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntry(newKey: string, value: string|null): void {\n        if (value) {\n            this.setTemporaryCache(newKey, value, true);\n        }\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string): AccountEntity | null {\n        const account = this.getItem(accountKey);\n        if (!account) {\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(account);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedAccount);\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param key\n     * @param value\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = idToken.generateCredentialKey();\n\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n        const accessTokenKey = accessToken.generateCredentialKey();\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n        const refreshTokenKey = refreshToken.generateCredentialKey();\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string) : AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU\n     * @param wrapperVersion\n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n        const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) { \n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\"No active account filters cache schema found, looking for legacy schema\");\n            const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if(!activeAccountValueLocal) {\n                this.logger.trace(\"No active account found\");\n                return null;\n            }\n            const activeAccount = this.getAccountInfoByFilter({localAccountId: activeAccountValueLocal})[0] || null;\n            if(activeAccount) {\n                this.logger.trace(\"Legacy active account cache schema found\");\n                this.logger.trace(\"Adding active account filters cache schema\");\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters) as AccountInfo;\n        if(activeAccountValueObj) {\n            this.logger.trace(\"Active account filters schema found\");\n            return this.getAccountInfoByFilter({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId\n            })[0] || null;\n        }\n        this.logger.trace(\"No active account found\");\n        return null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue: ActiveAccountFilters = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId\n            };\n            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n        } else {\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n\n    /**\n     * Gets a list of accounts that match all of the filters provided\n     * @param account\n     */\n    getAccountInfoByFilter(accountFilter: Partial<Omit<AccountInfo, \"idTokenClaims\"|\"name\">>): AccountInfo[] {\n        const allAccounts = this.getAllAccounts();\n        return allAccounts.filter((accountObj) => {\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n                return false;\n            }\n\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n                return false;\n            }\n\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n                return false;\n            }\n\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Checks the cache for accounts matching loginHint or SID\n     * @param loginHint\n     * @param sid\n     */\n    getAccountInfoByHints(loginHint?: string, sid?: string): AccountInfo | null {\n        const matchingAccounts = this.getAllAccounts().filter((accountInfo) => {\n            if (sid) {\n                const accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims[\"sid\"];\n                return sid === accountSid;\n            }\n\n            if (loginHint) {\n                return loginHint === accountInfo.username;\n            }\n\n            return false;\n        });\n\n        if (matchingAccounts.length === 1) {\n            return matchingAccounts[0];\n        } else if (matchingAccounts.length > 1) {\n            throw ClientAuthError.createMultipleMatchingAccountsInCacheError();\n        }\n\n        return null;\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.getItemCookie(key);\n            if (itemCookie) {\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n                    return item;\n                }\n            }\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(cacheKey: string, value: string, generateKey?: boolean): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n            this.setItemCookie(key, value);\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeItem(key: string): boolean {\n        this.browserStorage.removeItem(key);\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n            this.clearItemCookie(key);\n        }\n        return true;\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key\n     */\n    containsKey(key: string): boolean {\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return [\n            ...this.browserStorage.getKeys(),\n            ...this.temporaryCacheStorage.getKeys()\n        ];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Removes all remaining MSAL cache items\n        this.getKeys().forEach((cacheKey: string) => {\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n            if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(this.clientId) !== -1))) {\n                this.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Add value to cookies\n     * @param cookieName\n     * @param cookieValue\n     * @param expires\n     */\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;\n        if (expires) {\n            const expireTime = this.getCookieExpirationTime(expires);\n            cookieStr += `expires=${expireTime};`;\n        }\n\n        if (this.cacheConfig.secureCookies) {\n            cookieStr += \"Secure;\";\n        }\n\n        document.cookie = cookieStr;\n    }\n\n    /**\n     * Get one item by key from cookies\n     * @param cookieName\n     */\n    getItemCookie(cookieName: string): string {\n        const name = `${encodeURIComponent(cookieName)}=`;\n        const cookieList = document.cookie.split(\";\");\n        for (let i: number = 0; i < cookieList.length; i++) {\n            let cookie = cookieList[i];\n            while (cookie.charAt(0) === \" \") {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(name) === 0) {\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\n            }\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n     */\n    clearMsalCookies(): void {\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n        const cookieList = document.cookie.split(\";\");\n        cookieList.forEach((cookie: string): void => {\n            while (cookie.charAt(0) === \" \") {\n                // eslint-disable-next-line no-param-reassign\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookiePrefix) === 0) {\n                const cookieKey = cookie.split(\"=\")[0];\n                this.clearItemCookie(cookieKey);\n            }\n        });\n    }\n\n    /**\n     * Clear an item in the cookies by key\n     * @param cookieName\n     */\n    clearItemCookie(cookieName: string): void {\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n    }\n\n    /**\n     * Get cookie expiration time\n     * @param cookieLifeDays\n     */\n    getCookieExpirationTime(cookieLifeDays: number): string {\n        const today = new Date();\n        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n        return expr.toUTCString();\n    }\n\n    /**\n     * Gets the cache object referenced by the browser\n     */\n    getCache(): object {\n        return this.browserStorage;\n    }\n\n    /**\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\n     */\n    setCache(): void {\n        // sets nothing\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: {\n                id: stateId\n            }\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n    }\n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(state: string, nonce: string, authorityInstance: string, loginHint: string, account: AccountInfo|null): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            };\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        } else if (!StringUtils.isEmpty(loginHint)) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN\n            };\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (!StringUtils.isEmpty(state)) {\n            this.getKeys().forEach(key => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeItem(key);\n                }\n            });\n        }\n\n        // delete generic interactive request parameters\n        if (state) {\n            this.removeItem(this.generateStateKey(state));\n            this.removeItem(this.generateNonceKey(state));\n            this.removeItem(this.generateAuthorityKey(state));\n        }\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString\n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n        }\n        this.clearMsalCookies();\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType\n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n        // Loop through all keys to find state key\n        this.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\n            if (parsedState && parsedState.interactionType === interactionType) {\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.clearMsalCookies();\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest, browserCrypto: ICrypto): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string, browserCrypto: ICrypto): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n        if (!encodedTokenRequest) {\n            throw BrowserAuthError.createNoTokenRequestCacheError();\n        }\n\n        const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest)) as CommonAuthorizationCodeRequest;\n        if (!parsedRequest) {\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n        }\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n\n        // Get cached authority and use if no authority is cached with request.\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    /**\n     * Gets cached native request for redirect flows\n     */\n    getCachedNativeRequest(): NativeTokenRequest | null {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n        if (!cachedRequest) {\n            this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n            return null;\n        }\n\n        const parsedRequest = this.validateAndParseJson(cachedRequest) as NativeTokenRequest;\n        if (!parsedRequest) {\n            this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n            return null;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw BrowserAuthError.createInteractionInProgressError();\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n            this.removeItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n        if (msalIdTokenString) {\n            this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const cachedIdToken = new IdToken(cachedIdTokenString, this.cryptoImpl);\n            if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n                return cachedIdToken.claims.preferred_username;\n            }\n            else if (cachedIdToken.claims && cachedIdToken.claims.upn) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n                return cachedIdToken.claims.upn;\n            }\n            else {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(currentCacheKey: string, credential: ValidCredentialType): string {\n        const updatedCacheKey = credential.generateCredentialKey();\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n\n        return currentCacheKey;\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (clientId: string, logger: Logger): BrowserCacheManager => {\n    const cacheOptions = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false\n    };\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n"]},"metadata":{},"sourceType":"module"}