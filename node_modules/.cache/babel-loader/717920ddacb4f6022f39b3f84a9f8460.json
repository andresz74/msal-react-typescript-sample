{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupClient =\n/** @class */\nfunction (_super) {\n  __extends(PopupClient, _super);\n\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this; // Properly sets this reference for the unload event.\n\n\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\"); // Passes on popup position and dimensions if in request\n\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n\n\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\"); // Passes on popup position and dimensions if in request\n\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent();\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.monitorPopupForHash(popupWindow)];\n\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId); // Remove throttle if it exists\n\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\"); // end measurement for server call with native brokering enabled\n\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n\n          case 7:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 8:\n            e_1 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n\n\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]); // Clear cache on logout\n\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.waitForLogoutPopup(popupWindow)];\n\n          case 4:\n            _a.sent();\n\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_2 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n\n\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / BrowserConstants.POLL_INTERVAL_MS;\n      var ticks = 0;\n\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n\n\n        ticks++;\n\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n\n          clearInterval(intervalId);\n\n          _this.cleanPopup(popupWindow);\n\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          resolve();\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n        clearInterval(intervalId);\n\n        _this.cleanPopup(popupWindow);\n\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n\n  return PopupClient;\n}(StandardInteractionClient);\n\nexport { PopupClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","unloadWindow","bind","nativeStorage","PopupClient","request","popupName","generatePopupName","scopes","OIDC_DEFAULT_SCOPES","authority","auth","popupWindowAttributes","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","undefined","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenPopup","initializeAuthorizationRequest","InteractionType","Popup","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","loginHint","Constants","EMPTY_STRING","account","initializeAuthorizationCodeRequest","authCodeRequest","createAuthCodeClient","azureCloudOptions","authClient","isNativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","fetchNativeAccountIdMeasurement","startMeasurement","PerformanceEvents","FetchAccountIdWithNativeBroker","getAuthCodeUrl","__assign","nativeBroker","navigateUrl","interactionHandler","InteractionHandler","popupParameters","popupWindow","initiateAuthRequest","emitEvent","EventType","POPUP_OPENED","monitorPopupForHash","hash","serverParams","UrlString","getDeserializedHash","state_1","validateAndExtractStateFromHash","ThrottlingUtils","removeThrottle","clientId","accountId","endMeasurement","success","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","prompt","finally","cleanRequestByState","handleCodeResponseFromHash","networkClient","result","close","e_1","AuthError","setCorrelationId","cacheFailedRequest","requestAuthority","LOGOUT_START","logoutPopup","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","openPopup","waitForLogoutPopup","navigationOptions","apiId","timeout","redirectNavigationTimeout","noHistory","absoluteUrl","getAbsoluteUrl","BrowserUtils","getCurrentUri","verbosePii","navigateInternal","e_2","setInteractionInProgress","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","StringUtils","isEmpty","infoPii","error","createEmptyNavigationUriError","resolve","maxTicks","windowHashTimeout","BrowserConstants","POLL_INTERVAL_MS","ticks","intervalId","setInterval","closed","cleanPopup","clearInterval","createUserCancelledError","href","location","hashContainsKnownProperties","errorPii","createHashDoesNotContainKnownPropertiesError","createMonitorPopupTimeoutError","urlNavigate","popupParams","assign","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","message","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","_b","top","popupPosition","_c","left","_d","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","preventDefault","removeEventListener","POPUP_NAME_PREFIX","join","homeAccountId","StandardInteractionClient"],"sources":["../../src/interaction_client/PopupClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, PerformanceEvents, StringUtils, IPerformanceClient, Logger, ICrypto } from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { EventType } from \"../event/EventType\";\nimport { InteractionType, ApiId, BrowserConstants } from \"../utils/BrowserConstants\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { InteractionHandler, InteractionParams } from \"../interaction_handler/InteractionHandler\";\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\n\nexport type PopupParams = InteractionParams & {\n    popup?: Window|null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes\n};\n\nexport class PopupClient extends StandardInteractionClient {\n    private currentWindow: Window | undefined;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     */\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\n            this.logger.verbose(\"Auth code client created\");\n\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker\n            });\n\n            // Create popup interaction handler.\n            const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger);\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes\n            };\n            const popupWindow: Window = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const hash = await this.monitorPopupForHash(popupWindow);\n            // Deserialize hash fragment response parameters.\n            const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\n            const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.endMeasurement({\n                        success: true,\n                        isNativeBroker: true\n                    });\n                }\n\n                if (!this.nativeMessageHandler) {\n                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n                }\n                const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n                const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n                return nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n                }).finally(() => {\n                    this.browserStorage.cleanRequestByState(state);\n                });\n            }\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\n\n            return result;\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\n\n            await this.waitForLogoutPopup(popupWindow);\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (!StringUtils.isEmpty(requestUrl)) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - timeout for processing hash once popup is redirected back to application\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return new Promise((resolve, reject) => {\n            /*\n             * Polling for popups needs to be tick-based,\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\n             */\n            const maxTicks = this.config.system.windowHashTimeout / BrowserConstants.POLL_INTERVAL_MS;\n            let ticks = 0;\n\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createUserCancelledError());\n                    return;\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                let hash: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                    hash = popupWindow.location.hash;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n\n                /*\n                 * Only run clock when we are on same domain for popups\n                 * as popup operations can take a long time.\n                 */\n                ticks++;\n\n                if (hash) {\n                    this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n                    clearInterval(intervalId);\n                    this.cleanPopup(popupWindow);\n\n                    if (UrlString.hashContainsKnownProperties(hash)) {\n                        this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n                        resolve(hash);\n                    } else {\n                        this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n                        this.logger.errorPii(`PopupHandler.monitorPopupForHash - hash found: ${hash}`);\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n                    }\n                } else if (ticks > maxTicks) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n                    clearInterval(intervalId);\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\n                }\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * Waits for user interaction in logout popup window\n     * @param popupWindow\n     * @returns\n     */\n    waitForLogoutPopup(popupWindow: Window): Promise<void> {\n        return new Promise((resolve) => {\n            this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n                    this.cleanPopup();\n                    clearInterval(intervalId);\n                    resolve();\n                }\n\n                let href: string = Constants.EMPTY_STRING;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n                    return;\n                }\n\n                this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n                clearInterval(intervalId);\n                this.cleanPopup(popupWindow);\n                resolve();\n            }, BrowserConstants.POLL_INTERVAL_MS);\n        });\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw BrowserAuthError.createEmptyWindowCreatedError();\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + (e as AuthError).message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw BrowserAuthError.createPopupWindowError((e as AuthError).toString());\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate\n     * @param popupName\n     * @param popupWindowAttributes\n     * @returns\n     */\n    openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes): Window|null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\n        }\n\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    generatePopupName(scopes: Array<string>, authority: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId\n     * @param request\n     */\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}