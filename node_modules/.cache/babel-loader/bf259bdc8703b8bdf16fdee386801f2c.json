{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceMeasurement =\n/** @class */\nfunction () {\n  function BrowserPerformanceMeasurement(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = \"msal.measure.\" + name + \".\" + this.correlationId;\n    this.startMark = \"msal.start.\" + name + \".\" + this.correlationId;\n    this.endMark = \"msal.end.\" + name + \".\" + this.correlationId;\n  }\n\n  BrowserPerformanceMeasurement.supportsBrowserPerformance = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  };\n\n  BrowserPerformanceMeasurement.prototype.startMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.endMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {// Silently catch\n      }\n    }\n  };\n\n  BrowserPerformanceMeasurement.prototype.flushMeasurement = function () {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        var entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n\n        if (entriesForMeasurement.length > 0) {\n          var durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {// Silently catch and return null\n      }\n    }\n\n    return null;\n  };\n\n  return BrowserPerformanceMeasurement;\n}();\n\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"mappings":";;AAAA;;;;;;;;EAaI,uCAAYA,IAAZ,EAA0BC,aAA1B,EAA+C;IAC3C,KAAKA,aAAL,GAAqBA,aAArB;IACA,KAAKC,WAAL,GAAmB,kBAAgBF,IAAhB,GAAoB,GAApB,GAAwB,KAAKC,aAAhD;IACA,KAAKE,SAAL,GAAiB,gBAAcH,IAAd,GAAkB,GAAlB,GAAsB,KAAKC,aAA5C;IACA,KAAKG,OAAL,GAAe,cAAYJ,IAAZ,GAAgB,GAAhB,GAAoB,KAAKC,aAAxC;EACH;;EAEMI,2DAAP;IACI,OAAO,OAAOC,MAAP,KAAkB,WAAlB,IACH,OAAOA,MAAM,CAACC,WAAd,KAA8B,WAD3B,IAEH,OAAOD,MAAM,CAACC,WAAP,CAAmBC,IAA1B,KAAmC,UAFhC,IAGH,OAAOF,MAAM,CAACC,WAAP,CAAmBE,OAA1B,KAAsC,UAHnC,IAIH,OAAOH,MAAM,CAACC,WAAP,CAAmBG,UAA1B,KAAyC,UAJtC,IAKH,OAAOJ,MAAM,CAACC,WAAP,CAAmBI,aAA1B,KAA4C,UALzC,IAMH,OAAOL,MAAM,CAACC,WAAP,CAAmBK,gBAA1B,KAA+C,UANnD;EAOH,CARM;;EAUPP;IACI,IAAIA,6BAA6B,CAACQ,0BAA9B,EAAJ,EAAgE;MAC5D,IAAI;QACAP,MAAM,CAACC,WAAP,CAAmBC,IAAnB,CAAwB,KAAKL,SAA7B;MACH,CAFD,CAEE,OAAOW,CAAP,EAAU;MAEX;IACJ;EACJ,CARD;;EAUAT;IACI,IAAIA,6BAA6B,CAACQ,0BAA9B,EAAJ,EAAgE;MAC5D,IAAI;QACAP,MAAM,CAACC,WAAP,CAAmBC,IAAnB,CAAwB,KAAKJ,OAA7B;QACAE,MAAM,CAACC,WAAP,CAAmBE,OAAnB,CAA2B,KAAKP,WAAhC,EAA6C,KAAKC,SAAlD,EAA6D,KAAKC,OAAlE;MACH,CAHD,CAGE,OAAOU,CAAP,EAAU;MAEX;IACJ;EACJ,CATD;;EAWAT;IACI,IAAIA,6BAA6B,CAACQ,0BAA9B,EAAJ,EAAgE;MAC5D,IAAI;QACA,IAAME,qBAAqB,GAAGT,MAAM,CAACC,WAAP,CAAmBK,gBAAnB,CAAoC,KAAKV,WAAzC,EAAsD,SAAtD,CAA9B;;QACA,IAAIa,qBAAqB,CAACC,MAAtB,GAA+B,CAAnC,EAAsC;UAClC,IAAMC,UAAU,GAAGF,qBAAqB,CAAC,CAAD,CAArB,CAAyBG,QAA5C;UACAZ,MAAM,CAACC,WAAP,CAAmBI,aAAnB,CAAiC,KAAKT,WAAtC;UACAI,MAAM,CAACC,WAAP,CAAmBG,UAAnB,CAA8B,KAAKP,SAAnC;UACAG,MAAM,CAACC,WAAP,CAAmBG,UAAnB,CAA8B,KAAKN,OAAnC;UACA,OAAOa,UAAP;QACH;MACJ,CATD,CASE,OAAOH,CAAP,EAAU;MAEX;IACJ;;IACD,OAAO,IAAP;EACH,CAhBD;;EAiBJ;AAAC","names":["name","correlationId","measureName","startMark","endMark","BrowserPerformanceMeasurement","window","performance","mark","measure","clearMarks","clearMeasures","getEntriesByName","supportsBrowserPerformance","e","entriesForMeasurement","length","durationMs","duration"],"sources":["../../src/telemetry/BrowserPerformanceMeasurement.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IPerformanceMeasurement } from \"@azure/msal-common\";\n\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\n    private measureName: string;\n    private correlationId: string;\n    private startMark: string;\n    private endMark: string;\n\n    constructor(name: string, correlationId: string) {\n        this.correlationId = correlationId;\n        this.measureName = `msal.measure.${name}.${this.correlationId}`;\n        this.startMark = `msal.start.${name}.${this.correlationId}`;\n        this.endMark = `msal.end.${name}.${this.correlationId}`;\n    }\n\n    static supportsBrowserPerformance(): boolean {\n        return typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.mark === \"function\" && \n            typeof window.performance.measure === \"function\" &&\n            typeof window.performance.clearMarks === \"function\" &&\n            typeof window.performance.clearMeasures === \"function\" &&\n            typeof window.performance.getEntriesByName === \"function\";\n    }\n\n    startMeasurement(): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.startMark);\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    endMeasurement():void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.endMark);\n                window.performance.measure(this.measureName, this.startMark, this.endMark);\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    flushMeasurement(): number | null {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n                if (entriesForMeasurement.length > 0) {\n                    const durationMs = entriesForMeasurement[0].duration;\n                    window.performance.clearMeasures(this.measureName);\n                    window.performance.clearMarks(this.startMark);\n                    window.performance.clearMarks(this.endMark);\n                    return durationMs;\n                }\n            } catch (e) {\n                // Silently catch and return null\n            }\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}