{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { AsyncMemoryStorage } from '../cache/AsyncMemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar CryptoKeyStoreNames;\n\n(function (CryptoKeyStoreNames) {\n  CryptoKeyStoreNames[\"asymmetricKeys\"] = \"asymmetricKeys\";\n  CryptoKeyStoreNames[\"symmetricKeys\"] = \"symmetricKeys\";\n})(CryptoKeyStoreNames || (CryptoKeyStoreNames = {}));\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger, performanceClient) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = {\n      asymmetricKeys: new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys),\n      symmetricKeys: new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys)\n    };\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _b.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            this.logger.verbose(\"Deleting in-memory and persistent asymmetric key stores\");\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.clear()];\n\n          case 1:\n            _a.sent();\n\n            this.logger.verbose(\"Successfully deleted asymmetric key stores\");\n            this.logger.verbose(\"Deleting in-memory and persistent symmetric key stores\");\n            return [4\n            /*yield*/\n            , this.cache.symmetricKeys.clear()];\n\n          case 2:\n            _a.sent();\n\n            this.logger.verbose(\"Successfully deleted symmetric key stores\");\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof Error) {\n              this.logger.error(\"Clearing keystore failed with error: \" + e_1.message);\n            } else {\n              this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _b.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoKeyStoreNames, CryptoOps };","map":{"version":3,"mappings":"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","names":["CryptoKeyStoreNames","logger","performanceClient","browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","asymmetricKeys","AsyncMemoryStorage","symmetricKeys","CryptoOps","generateGuid","input","encode","decode","generateCodes","request","publicKeyThumbMeasurement","_a","startMeasurement","PerformanceEvents","CryptoOptsGetPublicKeyThumbprint","correlationId","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","keyPair","_b","exportJwk","publicKey","publicKeyJwk","pubKeyThumprintObj","e","kty","n","publicJwkString","getJwkString","hashString","publicJwkHash","privateKey","privateKeyJwk","importJwk","unextractablePrivateKey","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","endMeasurement","success","kid","removeItem","containsKey","keyFound","verbose","clear","e_1","Error","error","message","payload","signJwtMeasurement","CryptoOptsSignJwt","getItem","cachedKeyPair","BrowserAuthError","createSigningKeyNotFoundInStorageError","publicKeyJwkString","encodedKeyIdThumbprint","urlEncode","JSON","stringify","shrHeader","JoseHeader","getShrHeaderString","alg","encodedShrHeader","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","BrowserStringUtils","stringToArrayBuffer","sign","signatureBuffer","encodedSignature","urlEncodeArr","Uint8Array","signedJwt","plainText","sha256Digest","hashBuffer","hashBytes"],"sources":["../../src/crypto/CryptoOps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, IPerformanceClient, JoseHeader, Logger, PerformanceEvents, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { AsyncMemoryStorage } from \"../cache/AsyncMemoryStorage\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nexport type CryptoKeyStore = {\n    asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\n    symmetricKeys: AsyncMemoryStorage<CryptoKey>;\n};\n\nexport enum CryptoKeyStoreNames {\n    asymmetricKeys = \"asymmetricKeys\",\n    symmetricKeys = \"symmetricKeys\"\n}\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    /**\n     * CryptoOps can be used in contexts outside a PCA instance,\n     * meaning there won't be a performance manager available.\n     */\n    private performanceClient: IPerformanceClient | undefined;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger, performanceClient?: IPerformanceClient) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = {\n            asymmetricKeys: new AsyncMemoryStorage<CachedKeyPair>(this.logger, CryptoKeyStoreNames.asymmetricKeys),\n            symmetricKeys: new AsyncMemoryStorage<CryptoKey>(this.logger, CryptoKeyStoreNames.symmetricKeys)\n        };\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        try {\n            this.logger.verbose(\"Deleting in-memory and persistent asymmetric key stores\");\n            await this.cache.asymmetricKeys.clear();\n            this.logger.verbose(\"Successfully deleted asymmetric key stores\");\n            this.logger.verbose(\"Deleting in-memory and persistent symmetric key stores\");\n            await this.cache.symmetricKeys.clear();\n            this.logger.verbose(\"Successfully deleted symmetric key stores\");\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n            } else {\n                this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n            \n            return false;\n        }\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string, correlationId?: string): Promise<string> {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n        \n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\n\n        // Generate header\n        const shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\n        const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n\n        if (signJwtMeasurement) {\n            signJwtMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return signedJwt;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}