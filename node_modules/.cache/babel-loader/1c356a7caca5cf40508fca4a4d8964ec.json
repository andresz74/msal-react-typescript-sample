{"ast":null,"code":"/*! @azure/msal-browser v2.28.2 2022-09-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n\n        return [2\n        /*return*/\n        , this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","logger","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["../../src/interaction_handler/InteractionHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthorizationCodePayload , StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger, ServerError } from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\n\nexport type InteractionParams = {};\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport class InteractionHandler {\n\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected logger: Logger;\n\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n    }\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n            throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n            } else {\n                throw e;\n            }\n        }\n\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse \n     * @param state \n     * @param authority \n     * @param networkModule \n     * @returns \n     */\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        \n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            authCodeResponse.nonce = cachedNonce || undefined;\n        }\n        \n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Updates authority based on cloudInstanceHostname\n     * @param cloudInstanceHostname \n     * @param authority \n     * @param networkModule \n     */\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\n        this.authModule.updateAuthority(cloudInstanceAuthority);\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}