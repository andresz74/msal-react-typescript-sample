{"ast":null,"code":"/*! @azure/msal-common v7.4.0 2022-09-06 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RequestParameterBuilder =\n/** @class */\nfunction () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_type = token id_token\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + \" \" + Constants.ID_TOKEN_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * Add flag to indicate STS should attempt to use WAM if available\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNativeBroker = function () {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n\n\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  };\n  /**\r\n   * Add client telemetry parameters\r\n   * @param appTelemetry\r\n   */\n\n\n  RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n\n    if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n\n\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    if (!StringUtils.isEmpty(clientAssertion)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    if (!StringUtils.isEmpty(clientAssertionType)) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n\n\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n\n    RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims; // Parse provided claims into JSON object or initialize empty object\n\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      } // Add xms_cc claim with provided clientCapabilities to access_token key\n\n\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n\n\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add SSH JWK and key ID to query params\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\n    if (!StringUtils.isEmpty(sshJwkString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n\n\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n\n\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n\n\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n\n  return RequestParameterBuilder;\n}();\n\nexport { RequestParameterBuilder };","map":{"version":3,"mappings":"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","names":["parameters","Map","RequestParameterBuilder","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","ResponseMode","QUERY","NATIVE_BROKER","scopes","addOidcScopes","requestScopes","OIDC_DEFAULT_SCOPES","scopeSet","ScopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","SSOTypes","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","StringUtils","isEmpty","STATE","addNonce","nonce","NONCE","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","CLIENT_INFO","addExtraQueryParameters","eQparams","_this","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","PasswordGrantConstants","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","queryParameterArray","Array","value","push","join"],"sources":["../../src/request/RequestParameterBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport { ApplicationTelemetry, LibraryInfo } from \"../config/ClientConfiguration\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\nexport class RequestParameterBuilder {\n\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`)\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker(): void {\n        this.parameters.set(\n            AADServerParamKeys.NATIVE_BROKER,\n            encodeURIComponent(\"1\")\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\n        if (appTelemetry?.appName) {\n            this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n        }\n\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (!StringUtils.isEmpty(state)) {\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        if (!StringUtils.isEmpty(clientAssertion)) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        if (!StringUtils.isEmpty(clientAssertionType)) {\n            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQparams\n     */\n    addExtraQueryParameters(eQparams: StringDict): void {\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n        Object.keys(eQparams).forEach((key) => {\n            this.parameters.set(key, eQparams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch(e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (!StringUtils.isEmpty(cnfString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString: string): void {\n        if(!StringUtils.isEmpty(sshJwkString)) {\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}